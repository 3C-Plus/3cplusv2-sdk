!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("3cplusv2-sdk-js",[],t):"object"==typeof exports?exports["3cplusv2-sdk-js"]=t():e["3cplusv2-sdk-js"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=47)}([function(e,t,n){(function(r){function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(71)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))}),e.splice(o,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(24))},function(e,t,n){"use strict";var r=n(41);e.exports={USER_AGENT:r.title+" "+r.version,SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",MISSING_SDP:"Missing SDP",AUTHENTICATION_ERROR:"Authentication Error",BYE:"Terminated",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",DIALOG_ERROR:"Dialog Error",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484,424],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",REFER:"REFER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",424:"Bad Location Information",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"JsSIP Internal Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},ALLOWED_METHODS:"INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO",ACCEPTED_BODY_TYPES:"application/sdp, application/dtmf-relay",MAX_FORWARDS:69,SESSION_EXPIRES:90,MIN_SESSION_EXPIRES:60}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=n(1),o=n(12),s=n(5);t.str_utf8_length=function(e){return unescape(encodeURIComponent(e)).length};var a=t.isFunction=function(e){return void 0!==e&&"[object Function]"===Object.prototype.toString.call(e)};t.isString=function(e){return void 0!==e&&"[object String]"===Object.prototype.toString.call(e)},t.isDecimal=function(e){return!isNaN(e)&&parseFloat(e)===parseInt(e,10)},t.isEmpty=function(e){return null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length||"number"==typeof e&&isNaN(e)},t.hasMethods=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=!0,o=!1,s=void 0;try{for(var u,l=n[Symbol.iterator]();!(i=(u=l.next()).done);i=!0){var c=u.value;if(a(e[c]))return!1}}catch(e){o=!0,s=e}finally{try{!i&&l.return&&l.return()}finally{if(o)throw s}}return!0};var u=t.createRandomToken=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,n=void 0,r="";for(n=0;n<e;n++)r+=(Math.random()*t|0).toString(t);return r};t.newTag=function(){return u(10)},t.newUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})},t.hostType=function(e){if(e)return-1!==(e=s.parse(e,"host"))?e.host_type:void 0};var l=t.escapeUser=function(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")};t.normalizeTarget=function(e,t){if(e){if(e instanceof o)return e;if("string"==typeof e){var n=e.split("@"),r=void 0,s=void 0;switch(n.length){case 1:if(!t)return;r=e,s=t;break;case 2:r=n[0],s=n[1];break;default:r=n.slice(0,n.length-1).join("@"),s=n[n.length-1]}r=r.replace(/^(sips?|tel):/i,""),/^[-.()]*\+?[0-9\-.()]+$/.test(r)&&(r=r.replace(/[-.()]/g,"")),e=i.SIP+":"+l(r)+"@"+s;var a;return(a=o.parse(e))?a:void 0}}else;},t.headerize=function(e){var t={"Call-Id":"Call-ID",Cseq:"CSeq","Www-Authenticate":"WWW-Authenticate"},n=e.toLowerCase().replace(/_/g,"-").split("-"),r="",i=n.length,o=void 0;for(o=0;o<i;o++)0!==o&&(r+="-"),r+=n[o].charAt(0).toUpperCase()+n[o].substring(1);return t[r]&&(r=t[r]),r},t.sipErrorCause=function(e){for(var t in i.SIP_ERROR_CAUSES)if(-1!==i.SIP_ERROR_CAUSES[t].indexOf(e))return i.causes[t];return i.causes.SIP_FAILURE_CODE},t.getRandomTestNetIP=function(){return"192.0.2."+(e=1,t=254,Math.floor(Math.random()*(t-e+1)+e));var e,t},t.calculateMD5=function(e){function t(e,t){return e<<t|e>>>32-t}function n(e,t){var n=2147483648&e,r=2147483648&t,i=1073741824&e,o=1073741824&t,s=(1073741823&e)+(1073741823&t);return i&o?2147483648^s^n^r:i|o?1073741824&s?3221225472^s^n^r:1073741824^s^n^r:s^n^r}function r(e,r,i,o,s,a,u){return e=n(e,n(n(function(e,t,n){return e&t|~e&n}(r,i,o),s),u)),n(t(e,a),r)}function i(e,r,i,o,s,a,u){return e=n(e,n(n(function(e,t,n){return e&n|t&~n}(r,i,o),s),u)),n(t(e,a),r)}function o(e,r,i,o,s,a,u){return e=n(e,n(n(function(e,t,n){return e^t^n}(r,i,o),s),u)),n(t(e,a),r)}function s(e,r,i,o,s,a,u){return e=n(e,n(n(function(e,t,n){return t^(e|~n)}(r,i,o),s),u)),n(t(e,a),r)}function a(e){var t="",n="",r=void 0;for(r=0;r<=3;r++)t+=(n="0"+(e>>>8*r&255).toString(16)).substr(n.length-2,2);return t}var u,l=void 0,c=void 0,h=void 0,d=void 0,f=void 0,p=void 0,v=void 0,m=void 0,_=void 0;for(u=function(e){for(var t=void 0,n=e.length,r=n+8,i=16*((r-r%64)/64+1),o=new Array(i-1),s=0,a=0;a<n;)s=a%4*8,o[t=(a-a%4)/4]=o[t]|e.charCodeAt(a)<<s,a++;return s=a%4*8,o[t=(a-a%4)/4]=o[t]|128<<s,o[i-2]=n<<3,o[i-1]=n>>>29,o}(e=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t}(e)),p=1732584193,v=4023233417,m=2562383102,_=271733878,l=0;l<u.length;l+=16)c=p,h=v,d=m,f=_,p=r(p,v,m,_,u[l+0],7,3614090360),_=r(_,p,v,m,u[l+1],12,3905402710),m=r(m,_,p,v,u[l+2],17,606105819),v=r(v,m,_,p,u[l+3],22,3250441966),p=r(p,v,m,_,u[l+4],7,4118548399),_=r(_,p,v,m,u[l+5],12,1200080426),m=r(m,_,p,v,u[l+6],17,2821735955),v=r(v,m,_,p,u[l+7],22,4249261313),p=r(p,v,m,_,u[l+8],7,1770035416),_=r(_,p,v,m,u[l+9],12,2336552879),m=r(m,_,p,v,u[l+10],17,4294925233),v=r(v,m,_,p,u[l+11],22,2304563134),p=r(p,v,m,_,u[l+12],7,1804603682),_=r(_,p,v,m,u[l+13],12,4254626195),m=r(m,_,p,v,u[l+14],17,2792965006),p=i(p,v=r(v,m,_,p,u[l+15],22,1236535329),m,_,u[l+1],5,4129170786),_=i(_,p,v,m,u[l+6],9,3225465664),m=i(m,_,p,v,u[l+11],14,643717713),v=i(v,m,_,p,u[l+0],20,3921069994),p=i(p,v,m,_,u[l+5],5,3593408605),_=i(_,p,v,m,u[l+10],9,38016083),m=i(m,_,p,v,u[l+15],14,3634488961),v=i(v,m,_,p,u[l+4],20,3889429448),p=i(p,v,m,_,u[l+9],5,568446438),_=i(_,p,v,m,u[l+14],9,3275163606),m=i(m,_,p,v,u[l+3],14,4107603335),v=i(v,m,_,p,u[l+8],20,1163531501),p=i(p,v,m,_,u[l+13],5,2850285829),_=i(_,p,v,m,u[l+2],9,4243563512),m=i(m,_,p,v,u[l+7],14,1735328473),p=o(p,v=i(v,m,_,p,u[l+12],20,2368359562),m,_,u[l+5],4,4294588738),_=o(_,p,v,m,u[l+8],11,2272392833),m=o(m,_,p,v,u[l+11],16,1839030562),v=o(v,m,_,p,u[l+14],23,4259657740),p=o(p,v,m,_,u[l+1],4,2763975236),_=o(_,p,v,m,u[l+4],11,1272893353),m=o(m,_,p,v,u[l+7],16,4139469664),v=o(v,m,_,p,u[l+10],23,3200236656),p=o(p,v,m,_,u[l+13],4,681279174),_=o(_,p,v,m,u[l+0],11,3936430074),m=o(m,_,p,v,u[l+3],16,3572445317),v=o(v,m,_,p,u[l+6],23,76029189),p=o(p,v,m,_,u[l+9],4,3654602809),_=o(_,p,v,m,u[l+12],11,3873151461),m=o(m,_,p,v,u[l+15],16,530742520),p=s(p,v=o(v,m,_,p,u[l+2],23,3299628645),m,_,u[l+0],6,4096336452),_=s(_,p,v,m,u[l+7],10,1126891415),m=s(m,_,p,v,u[l+14],15,2878612391),v=s(v,m,_,p,u[l+5],21,4237533241),p=s(p,v,m,_,u[l+12],6,1700485571),_=s(_,p,v,m,u[l+3],10,2399980690),m=s(m,_,p,v,u[l+10],15,4293915773),v=s(v,m,_,p,u[l+1],21,2240044497),p=s(p,v,m,_,u[l+8],6,1873313359),_=s(_,p,v,m,u[l+15],10,4264355552),m=s(m,_,p,v,u[l+6],15,2734768916),v=s(v,m,_,p,u[l+13],21,1309151649),p=s(p,v,m,_,u[l+4],6,4149444226),_=s(_,p,v,m,u[l+11],10,3174756917),m=s(m,_,p,v,u[l+2],15,718787259),v=s(v,m,_,p,u[l+9],21,3951481745),p=n(p,c),v=n(v,h),m=n(m,d),_=n(_,f);return(a(p)+a(v)+a(m)+a(_)).toLowerCase()},t.closeMediaStream=function(e){if(e)try{var t=void 0;if(e.getTracks){t=e.getTracks();var n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done);n=!0){s.value.stop()}}catch(e){i=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}}else{t=e.getAudioTracks();var u=!0,l=!1,c=void 0;try{for(var h,d=t[Symbol.iterator]();!(u=(h=d.next()).done);u=!0){h.value.stop()}}catch(e){l=!0,c=e}finally{try{!u&&d.return&&d.return()}finally{if(l)throw c}}t=e.getVideoTracks();var f=!0,p=!1,v=void 0;try{for(var m,_=t[Symbol.iterator]();!(f=(m=_.next()).done);f=!0){m.value.stop()}}catch(e){p=!0,v=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw v}}}}catch(t){"function"!=typeof e.stop&&"object"!==r(e.stop)||e.stop()}},t.cloneArray=function(e){return e&&e.slice()||[]}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(23),i=n(51),o=Object.prototype.toString;function s(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";e.exports=function(){function e(e){return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}var t={parse:function(t,r){var i={CRLF:c,DIGIT:h,ALPHA:d,HEXDIG:f,WSP:p,OCTET:v,DQUOTE:m,SP:_,HTAB:y,alphanum:g,reserved:T,unreserved:C,mark:S,escaped:b,LWS:E,SWS:w,HCOLON:R,TEXT_UTF8_TRIM:A,TEXT_UTF8char:k,UTF8_NONASCII:I,UTF8_CONT:P,LHEX:function(){var e;null===(e=h())&&(/^[a-f]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[a-f]")));return e},token:O,token_nodot:x,separators:function(){var e;40===t.charCodeAt(o)?(e="(",o++):(e=null,0===s&&l('"("'));null===e&&(41===t.charCodeAt(o)?(e=")",o++):(e=null,0===s&&l('")"')),null===e&&(60===t.charCodeAt(o)?(e="<",o++):(e=null,0===s&&l('"<"')),null===e&&(62===t.charCodeAt(o)?(e=">",o++):(e=null,0===s&&l('">"')),null===e&&(64===t.charCodeAt(o)?(e="@",o++):(e=null,0===s&&l('"@"')),null===e&&(44===t.charCodeAt(o)?(e=",",o++):(e=null,0===s&&l('","')),null===e&&(59===t.charCodeAt(o)?(e=";",o++):(e=null,0===s&&l('";"')),null===e&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(92===t.charCodeAt(o)?(e="\\",o++):(e=null,0===s&&l('"\\\\"')),null===e&&null===(e=m())&&(47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"')),null===e&&(91===t.charCodeAt(o)?(e="[",o++):(e=null,0===s&&l('"["')),null===e&&(93===t.charCodeAt(o)?(e="]",o++):(e=null,0===s&&l('"]"')),null===e&&(63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null===e&&(61===t.charCodeAt(o)?(e="=",o++):(e=null,0===s&&l('"="')),null===e&&(123===t.charCodeAt(o)?(e="{",o++):(e=null,0===s&&l('"{"')),null===e&&(125===t.charCodeAt(o)?(e="}",o++):(e=null,0===s&&l('"}"')),null===e&&null===(e=_())&&(e=y()))))))))))))))));return e},word:D,STAR:N,SLASH:U,EQUAL:M,LPAREN:L,RPAREN:q,RAQUOT:j,LAQUOT:H,COMMA:B,SEMI:F,COLON:G,LDQUOT:V,RDQUOT:z,comment:function e(){var t,n,r;var i;i=o;t=L();if(null!==t){for(n=[],null===(r=Y())&&null===(r=X())&&(r=e());null!==r;)n.push(r),null===(r=Y())&&null===(r=X())&&(r=e());null!==n&&null!==(r=q())?t=[t,n,r]:(t=null,o=i)}else t=null,o=i;return t},ctext:Y,quoted_string:W,quoted_string_clean:J,qdtext:K,quoted_pair:X,SIP_URI_noparams:$,SIP_URI:Q,uri_scheme:Z,uri_scheme_sips:ee,uri_scheme_sip:te,userinfo:ne,user:re,user_unreserved:ie,password:oe,hostport:se,host:ae,hostname:ue,domainlabel:le,toplabel:ce,IPv6reference:he,IPv6address:de,h16:fe,ls32:pe,IPv4address:ve,dec_octet:me,port:_e,uri_parameters:ye,uri_parameter:ge,transport_param:Te,user_param:Ce,method_param:Se,ttl_param:be,maddr_param:Ee,lr_param:we,other_param:Re,pname:Ae,pvalue:ke,paramchar:Ie,param_unreserved:Pe,headers:Oe,header:xe,hname:De,hvalue:Ne,hnv_unreserved:Ue,Request_Response:function(){var e;null===(e=ht())&&(e=Me());return e},Request_Line:Me,Request_URI:Le,absoluteURI:qe,hier_part:je,net_path:He,abs_path:Be,opaque_part:Fe,uric:Ge,uric_no_slash:Ve,path_segments:ze,segment:Ye,param:We,pchar:Je,scheme:Ke,authority:Xe,srvr:$e,reg_name:Qe,query:Ze,SIP_Version:et,INVITEm:tt,ACKm:nt,OPTIONSm:rt,BYEm:it,CANCELm:ot,REGISTERm:st,SUBSCRIBEm:at,NOTIFYm:ut,REFERm:lt,Method:ct,Status_Line:ht,Status_Code:dt,extension_code:ft,Reason_Phrase:pt,Allow_Events:function(){var e,t,n,r,i,s;if(i=o,null!==(e=qt())){for(t=[],s=o,null!==(n=B())&&null!==(r=qt())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=qt())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},Call_ID:function(){var e,n,r,i,a,u;i=o,a=o,null!==(e=D())?(u=o,64===t.charCodeAt(o)?(n="@",o++):(n=null,0===s&&l('"@"')),null!==n&&null!==(r=D())?n=[n,r]:(n=null,o=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=a)):(e=null,o=a);null!==e&&(c=i,e=void(Hn=t.substring(o,c)));var c;null===e&&(o=i);return e},Contact:function(){var e,t,n,r,i,s,a;if(i=o,null===(e=N()))if(s=o,null!==(e=vt())){for(t=[],a=o,null!==(n=B())&&null!==(r=vt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=B())&&null!==(r=vt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(e=function(e){var t,n;for(n=Hn.multi_header.length,t=0;t<n;t++)if(null===Hn.multi_header[t].parsed){Hn=null;break}Hn=null!==Hn?Hn.multi_header:-1}());null===e&&(o=i);return e},contact_param:vt,name_addr:mt,display_name:_t,contact_params:yt,c_p_q:gt,c_p_expires:Tt,delta_seconds:Ct,qvalue:St,generic_param:bt,gen_value:Et,Content_Disposition:function(){var e,t,n,r,i,s;if(i=o,null!==(e=wt())){for(t=[],s=o,null!==(n=F())&&null!==(r=Rt())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=F())&&null!==(r=Rt())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},disp_type:wt,disp_param:Rt,handling_param:At,Content_Encoding:function(){var e,t,n,r,i,s;if(i=o,null!==(e=O())){for(t=[],s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},Content_Length:function(){var e,t,n;if(n=o,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(Hn=parseInt(e.join(""))));null===e&&(o=n);return e},Content_Type:function(){var e,n;n=o,null!==(e=kt())&&(r=n,e=void(Hn=t.substring(o,r)));var r;null===e&&(o=n);return e},media_type:kt,m_type:It,discrete_type:Pt,composite_type:Ot,extension_token:xt,x_token:Dt,m_subtype:Nt,m_parameter:Ut,m_value:Mt,CSeq:function(){var e,t,n,r;r=o,null!==(e=Lt())&&null!==(t=E())&&null!==(n=ct())?e=[e,t,n]:(e=null,o=r);return e},CSeq_value:Lt,Expires:function(){var e,t;t=o,null!==(e=Ct())&&(e=void(Hn=e));null===e&&(o=t);return e},Event:function(){var e,t,n,r,i,s,a;if(i=o,s=o,null!==(e=qt())){for(t=[],a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(u=e[0],e=void(Hn.event=u.join("").toLowerCase()));var u;null===e&&(o=i);return e},event_type:qt,From:function(){var e,t,n,r,i,s,a;i=o,s=o,null===(e=$())&&(e=mt());if(null!==e){for(t=[],a=o,null!==(n=F())&&null!==(r=jt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=jt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(e=function(e){var t=Hn.tag;try{Hn=new jn(Hn.uri,Hn.display_name,Hn.params),t&&Hn.setParam("tag",t)}catch(e){Hn=-1}}());null===e&&(o=i);return e},from_param:jt,tag_param:Ht,Max_Forwards:function(){var e,t,n;if(n=o,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(Hn=parseInt(e.join(""))));null===e&&(o=n);return e},Min_Expires:function(){var e,t;t=o,null!==(e=Ct())&&(e=void(Hn=e));null===e&&(o=t);return e},Name_Addr_Header:function(){var e,t,n,r,i,s,a,u,l,c;u=o,l=o,e=[],t=_t();for(;null!==t;)e.push(t),t=_t();if(null!==e)if(null!==(t=H()))if(null!==(n=Q()))if(null!==(r=j())){for(i=[],c=o,null!==(s=F())&&null!==(a=bt())?s=[s,a]:(s=null,o=c);null!==s;)i.push(s),c=o,null!==(s=F())&&null!==(a=bt())?s=[s,a]:(s=null,o=c);null!==i?e=[e,t,n,r,i]:(e=null,o=l)}else e=null,o=l;else e=null,o=l;else e=null,o=l;else e=null,o=l;null!==e&&(e=function(e){try{Hn=new jn(Hn.uri,Hn.display_name,Hn.params)}catch(e){Hn=-1}}());null===e&&(o=u);return e},Proxy_Authenticate:function(){return Bt()},challenge:Bt,other_challenge:Ft,auth_param:Gt,digest_cln:Vt,realm:zt,realm_value:Yt,domain:Wt,URI:Jt,nonce:Kt,nonce_value:Xt,opaque:$t,stale:Qt,algorithm:Zt,qop_options:en,qop_value:tn,Proxy_Require:function(){var e,t,n,r,i,s;if(i=o,null!==(e=O())){for(t=[],s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},Record_Route:function(){var e,t,n,r,i,s,a;if(i=o,s=o,null!==(e=nn())){for(t=[],a=o,null!==(n=B())&&null!==(r=nn())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=B())&&null!==(r=nn())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(e=function(e){var t,n;for(n=Hn.multi_header.length,t=0;t<n;t++)if(null===Hn.multi_header[t].parsed){Hn=null;break}Hn=null!==Hn?Hn.multi_header:-1}());null===e&&(o=i);return e},rec_route:nn,Reason:function(){var e,n,r,i,a,u,c;a=o,u=o,"sip"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"SIP"'));null===e&&(e=O());if(null!==e){for(n=[],c=o,null!==(r=F())&&null!==(i=rn())?r=[r,i]:(r=null,o=c);null!==r;)n.push(r),c=o,null!==(r=F())&&null!==(i=rn())?r=[r,i]:(r=null,o=c);null!==n?e=[e,n]:(e=null,o=u)}else e=null,o=u;null!==e&&(e=function(e,t){if(Hn.protocol=t.toLowerCase(),Hn.params||(Hn.params={}),Hn.params.text&&'"'===Hn.params.text[0]){var n=Hn.params.text;Hn.text=n.substring(1,n.length-1),delete Hn.params.text}}(0,e[0]));null===e&&(o=a);return e},reason_param:rn,reason_cause:on,Require:function(){var e,t,n,r,i,s;if(i=o,null!==(e=O())){for(t=[],s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},Route:function(){var e,t,n,r,i,s;if(i=o,null!==(e=sn())){for(t=[],s=o,null!==(n=B())&&null!==(r=sn())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=sn())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},route_param:sn,Subscription_State:function(){var e,t,n,r,i,s;if(i=o,null!==(e=an())){for(t=[],s=o,null!==(n=F())&&null!==(r=un())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=F())&&null!==(r=un())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},substate_value:an,subexp_params:un,event_reason_value:ln,Subject:function(){var e;return e=null!==(e=A())?e:""},Supported:function(){var e,t,n,r,i,s;if(i=o,null!==(e=O())){for(t=[],s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=O())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e=null!==e?e:""},To:function(){var e,t,n,r,i,s,a;i=o,s=o,null===(e=$())&&(e=mt());if(null!==e){for(t=[],a=o,null!==(n=F())&&null!==(r=cn())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=cn())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(e=function(e){var t=Hn.tag;try{Hn=new jn(Hn.uri,Hn.display_name,Hn.params),t&&Hn.setParam("tag",t)}catch(e){Hn=-1}}());null===e&&(o=i);return e},to_param:cn,Via:function(){var e,t,n,r,i,s;if(i=o,null!==(e=hn())){for(t=[],s=o,null!==(n=B())&&null!==(r=hn())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=B())&&null!==(r=hn())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},via_param:hn,via_params:dn,via_ttl:fn,via_maddr:pn,via_received:vn,via_branch:mn,response_port:_n,sent_protocol:yn,protocol_name:gn,transport:Tn,sent_by:Cn,via_host:Sn,via_port:bn,ttl:En,WWW_Authenticate:function(){return Bt()},Session_Expires:function(){var e,t,n,r,i,s;if(i=o,null!==(e=wn())){for(t=[],s=o,null!==(n=F())&&null!==(r=Rn())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=F())&&null!==(r=Rn())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},s_e_expires:wn,s_e_params:Rn,s_e_refresher:An,extension_header:function(){var e,t,n,r;r=o,null!==(e=O())&&null!==(t=R())&&null!==(n=kn())?e=[e,t,n]:(e=null,o=r);return e},header_value:kn,message_body:function(){var e,t;e=[],t=v();for(;null!==t;)e.push(t),t=v();return e},uuid_URI:function(){var e,n,r;r=o,"uuid:"===t.substr(o,5)?(e="uuid:",o+=5):(e=null,0===s&&l('"uuid:"'));null!==e&&null!==(n=In())?e=[e,n]:(e=null,o=r);return e},uuid:In,hex4:Pn,hex8:On,hex12:xn,Refer_To:function(){var e,t,n,r,i,s,a;i=o,s=o,null===(e=$())&&(e=mt());if(null!==e){for(t=[],a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;null!==e&&(e=function(e){try{Hn=new jn(Hn.uri,Hn.display_name,Hn.params)}catch(e){Hn=-1}}());null===e&&(o=i);return e},Replaces:function(){var e,t,n,r,i,s;if(i=o,null!==(e=Dn())){for(t=[],s=o,null!==(n=F())&&null!==(r=Nn())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=F())&&null!==(r=Nn())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e},call_id:Dn,replaces_param:Nn,to_tag:Un,from_tag:Mn,early_flag:Ln};if(void 0!==r){if(void 0===i[r])throw new Error("Invalid rule name: "+e(r)+".")}else r="CRLF";var o=0,s=0,a=0,u=[];function l(e){o<a||(o>a&&(a=o,u=[]),u.push(e))}function c(){var e;return"\r\n"===t.substr(o,2)?(e="\r\n",o+=2):(e=null,0===s&&l('"\\r\\n"')),e}function h(){var e;return/^[0-9]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[0-9]")),e}function d(){var e;return/^[a-zA-Z]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[a-zA-Z]")),e}function f(){var e;return/^[0-9a-fA-F]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[0-9a-fA-F]")),e}function p(){var e;return null===(e=_())&&(e=y()),e}function v(){var e;return/^[\0-\xFF]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[\\0-\\xFF]")),e}function m(){var e;return/^["]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l('["]')),e}function _(){var e;return 32===t.charCodeAt(o)?(e=" ",o++):(e=null,0===s&&l('" "')),e}function y(){var e;return 9===t.charCodeAt(o)?(e="\t",o++):(e=null,0===s&&l('"\\t"')),e}function g(){var e;return/^[a-zA-Z0-9]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[a-zA-Z0-9]")),e}function T(){var e;return 59===t.charCodeAt(o)?(e=";",o++):(e=null,0===s&&l('";"')),null===e&&(47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"')),null===e&&(63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null===e&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(64===t.charCodeAt(o)?(e="@",o++):(e=null,0===s&&l('"@"')),null===e&&(38===t.charCodeAt(o)?(e="&",o++):(e=null,0===s&&l('"&"')),null===e&&(61===t.charCodeAt(o)?(e="=",o++):(e=null,0===s&&l('"="')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')),null===e&&(44===t.charCodeAt(o)?(e=",",o++):(e=null,0===s&&l('","'))))))))))),e}function C(){var e;return null===(e=g())&&(e=S()),e}function S(){var e;return 45===t.charCodeAt(o)?(e="-",o++):(e=null,0===s&&l('"-"')),null===e&&(95===t.charCodeAt(o)?(e="_",o++):(e=null,0===s&&l('"_"')),null===e&&(46===t.charCodeAt(o)?(e=".",o++):(e=null,0===s&&l('"."')),null===e&&(33===t.charCodeAt(o)?(e="!",o++):(e=null,0===s&&l('"!"')),null===e&&(126===t.charCodeAt(o)?(e="~",o++):(e=null,0===s&&l('"~"')),null===e&&(42===t.charCodeAt(o)?(e="*",o++):(e=null,0===s&&l('"*"')),null===e&&(39===t.charCodeAt(o)?(e="'",o++):(e=null,0===s&&l('"\'"')),null===e&&(40===t.charCodeAt(o)?(e="(",o++):(e=null,0===s&&l('"("')),null===e&&(41===t.charCodeAt(o)?(e=")",o++):(e=null,0===s&&l('")"')))))))))),e}function b(){var e,n,r,i,a;return i=o,a=o,37===t.charCodeAt(o)?(e="%",o++):(e=null,0===s&&l('"%"')),null!==e&&null!==(n=f())&&null!==(r=f())?e=[e,n,r]:(e=null,o=a),null!==e&&(e=e.join("")),null===e&&(o=i),e}function E(){var e,t,n,r,i,s;for(r=o,i=o,s=o,e=[],t=p();null!==t;)e.push(t),t=p();if(null!==e&&null!==(t=c())?e=[e,t]:(e=null,o=s),null!==(e=null!==e?e:"")){if(null!==(n=p()))for(t=[];null!==n;)t.push(n),n=p();else t=null;null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return null!==e&&(e=" "),null===e&&(o=r),e}function w(){var e;return e=null!==(e=E())?e:""}function R(){var e,n,r,i,a;for(i=o,a=o,e=[],null===(n=_())&&(n=y());null!==n;)e.push(n),null===(n=_())&&(n=y());return null!==e?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e=":"),null===e&&(o=i),e}function A(){var e,n,r,i,s,a,u,l;if(s=o,a=o,null!==(n=k()))for(e=[];null!==n;)e.push(n),n=k();else e=null;if(null!==e){for(n=[],u=o,r=[],i=E();null!==i;)r.push(i),i=E();for(null!==r&&null!==(i=k())?r=[r,i]:(r=null,o=u);null!==r;){for(n.push(r),u=o,r=[],i=E();null!==i;)r.push(i),i=E();null!==r&&null!==(i=k())?r=[r,i]:(r=null,o=u)}null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return null!==e&&(l=s,e=t.substring(o,l)),null===e&&(o=s),e}function k(){var e;return/^[!-~]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[!-~]")),null===e&&(e=I()),e}function I(){var e;return/^[\x80-\uFFFF]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[\\x80-\\uFFFF]")),e}function P(){var e;return/^[\x80-\xBF]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[\\x80-\\xBF]")),e}function O(){var e,n,r,i;if(r=o,null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"')))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"'))))))))))));else e=null;return null!==e&&(i=r,e=t.substring(o,i)),null===e&&(o=r),e}function x(){var e,n,r,i;if(r=o,null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"'))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"')))))))))));else e=null;return null!==e&&(i=r,e=t.substring(o,i)),null===e&&(o=r),e}function D(){var e,n,r,i;if(r=o,null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"')),null===n&&(40===t.charCodeAt(o)?(n="(",o++):(n=null,0===s&&l('"("')),null===n&&(41===t.charCodeAt(o)?(n=")",o++):(n=null,0===s&&l('")"')),null===n&&(60===t.charCodeAt(o)?(n="<",o++):(n=null,0===s&&l('"<"')),null===n&&(62===t.charCodeAt(o)?(n=">",o++):(n=null,0===s&&l('">"')),null===n&&(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null===n&&(92===t.charCodeAt(o)?(n="\\",o++):(n=null,0===s&&l('"\\\\"')),null===n&&null===(n=m())&&(47===t.charCodeAt(o)?(n="/",o++):(n=null,0===s&&l('"/"')),null===n&&(91===t.charCodeAt(o)?(n="[",o++):(n=null,0===s&&l('"["')),null===n&&(93===t.charCodeAt(o)?(n="]",o++):(n=null,0===s&&l('"]"')),null===n&&(63===t.charCodeAt(o)?(n="?",o++):(n=null,0===s&&l('"?"')),null===n&&(123===t.charCodeAt(o)?(n="{",o++):(n=null,0===s&&l('"{"')),null===n&&(125===t.charCodeAt(o)?(n="}",o++):(n=null,0===s&&l('"}"')))))))))))))))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null===n&&(46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null===n&&(33===t.charCodeAt(o)?(n="!",o++):(n=null,0===s&&l('"!"')),null===n&&(37===t.charCodeAt(o)?(n="%",o++):(n=null,0===s&&l('"%"')),null===n&&(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null===n&&(95===t.charCodeAt(o)?(n="_",o++):(n=null,0===s&&l('"_"')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(96===t.charCodeAt(o)?(n="`",o++):(n=null,0===s&&l('"`"')),null===n&&(39===t.charCodeAt(o)?(n="'",o++):(n=null,0===s&&l('"\'"')),null===n&&(126===t.charCodeAt(o)?(n="~",o++):(n=null,0===s&&l('"~"')),null===n&&(40===t.charCodeAt(o)?(n="(",o++):(n=null,0===s&&l('"("')),null===n&&(41===t.charCodeAt(o)?(n=")",o++):(n=null,0===s&&l('")"')),null===n&&(60===t.charCodeAt(o)?(n="<",o++):(n=null,0===s&&l('"<"')),null===n&&(62===t.charCodeAt(o)?(n=">",o++):(n=null,0===s&&l('">"')),null===n&&(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null===n&&(92===t.charCodeAt(o)?(n="\\",o++):(n=null,0===s&&l('"\\\\"')),null===n&&null===(n=m())&&(47===t.charCodeAt(o)?(n="/",o++):(n=null,0===s&&l('"/"')),null===n&&(91===t.charCodeAt(o)?(n="[",o++):(n=null,0===s&&l('"["')),null===n&&(93===t.charCodeAt(o)?(n="]",o++):(n=null,0===s&&l('"]"')),null===n&&(63===t.charCodeAt(o)?(n="?",o++):(n=null,0===s&&l('"?"')),null===n&&(123===t.charCodeAt(o)?(n="{",o++):(n=null,0===s&&l('"{"')),null===n&&(125===t.charCodeAt(o)?(n="}",o++):(n=null,0===s&&l('"}"'))))))))))))))))))))))));else e=null;return null!==e&&(i=r,e=t.substring(o,i)),null===e&&(o=r),e}function N(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(42===t.charCodeAt(o)?(n="*",o++):(n=null,0===s&&l('"*"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e="*"),null===e&&(o=i),e}function U(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(47===t.charCodeAt(o)?(n="/",o++):(n=null,0===s&&l('"/"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e="/"),null===e&&(o=i),e}function M(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e="="),null===e&&(o=i),e}function L(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(40===t.charCodeAt(o)?(n="(",o++):(n=null,0===s&&l('"("')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e="("),null===e&&(o=i),e}function q(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(41===t.charCodeAt(o)?(n=")",o++):(n=null,0===s&&l('")"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e=")"),null===e&&(o=i),e}function j(){var e,n,r,i;return r=o,i=o,62===t.charCodeAt(o)?(e=">",o++):(e=null,0===s&&l('">"')),null!==e&&null!==(n=w())?e=[e,n]:(e=null,o=i),null!==e&&(e=">"),null===e&&(o=r),e}function H(){var e,n,r,i;return r=o,i=o,null!==(e=w())?(60===t.charCodeAt(o)?(n="<",o++):(n=null,0===s&&l('"<"')),null!==n?e=[e,n]:(e=null,o=i)):(e=null,o=i),null!==e&&(e="<"),null===e&&(o=r),e}function B(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(44===t.charCodeAt(o)?(n=",",o++):(n=null,0===s&&l('","')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e=","),null===e&&(o=i),e}function F(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(59===t.charCodeAt(o)?(n=";",o++):(n=null,0===s&&l('";"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e=";"),null===e&&(o=i),e}function G(){var e,n,r,i,a;return i=o,a=o,null!==(e=w())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(e=":"),null===e&&(o=i),e}function V(){var e,t,n,r;return n=o,r=o,null!==(e=w())&&null!==(t=m())?e=[e,t]:(e=null,o=r),null!==e&&(e='"'),null===e&&(o=n),e}function z(){var e,t,n,r;return n=o,r=o,null!==(e=m())&&null!==(t=w())?e=[e,t]:(e=null,o=r),null!==e&&(e='"'),null===e&&(o=n),e}function Y(){var e;return/^[!-']/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[!-']")),null===e&&(/^[*-[]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[*-[]")),null===e&&(/^[\]-~]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[\\]-~]")),null===e&&null===(e=I())&&(e=E()))),e}function W(){var e,n,r,i,s,a,u;if(s=o,a=o,null!==(e=w()))if(null!==(n=m())){for(r=[],null===(i=K())&&(i=X());null!==i;)r.push(i),null===(i=K())&&(i=X());null!==r&&null!==(i=m())?e=[e,n,r,i]:(e=null,o=a)}else e=null,o=a;else e=null,o=a;return null!==e&&(u=s,e=t.substring(o,u)),null===e&&(o=s),e}function J(){var e,n,r,i,s,a,u;if(s=o,a=o,null!==(e=w()))if(null!==(n=m())){for(r=[],null===(i=K())&&(i=X());null!==i;)r.push(i),null===(i=K())&&(i=X());null!==r&&null!==(i=m())?e=[e,n,r,i]:(e=null,o=a)}else e=null,o=a;else e=null,o=a;return null!==e&&(u=s,e=t.substring(o-1,u+1)),null===e&&(o=s),e}function K(){var e;return null===(e=E())&&(33===t.charCodeAt(o)?(e="!",o++):(e=null,0===s&&l('"!"')),null===e&&(/^[#-[]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[#-[]")),null===e&&(/^[\]-~]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[\\]-~]")),null===e&&(e=I())))),e}function X(){var e,n,r;return r=o,92===t.charCodeAt(o)?(e="\\",o++):(e=null,0===s&&l('"\\\\"')),null!==e?(/^[\0-\t]/.test(t.charAt(o))?(n=t.charAt(o),o++):(n=null,0===s&&l("[\\0-\\t]")),null===n&&(/^[\x0B-\f]/.test(t.charAt(o))?(n=t.charAt(o),o++):(n=null,0===s&&l("[\\x0B-\\f]")),null===n&&(/^[\x0E-]/.test(t.charAt(o))?(n=t.charAt(o),o++):(n=null,0===s&&l("[\\x0E-]")))),null!==n?e=[e,n]:(e=null,o=r)):(e=null,o=r),e}function $(){var e,n,r,i,a,u;return a=o,u=o,null!==(e=Z())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=null!==(r=ne())?r:"")&&null!==(i=se())?e=[e,n,r,i]:(e=null,o=u)):(e=null,o=u),null!==e&&(e=function(e){try{Hn.uri=new qn(Hn.scheme,Hn.user,Hn.host,Hn.port),delete Hn.scheme,delete Hn.user,delete Hn.host,delete Hn.host_type,delete Hn.port}catch(e){Hn=-1}}()),null===e&&(o=a),e}function Q(){var e,n,i,a,u,c,h,d;return h=o,d=o,null!==(e=Z())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(i=null!==(i=ne())?i:"")&&null!==(a=se())&&null!==(u=ye())&&null!==(c=null!==(c=Oe())?c:"")?e=[e,n,i,a,u,c]:(e=null,o=d)):(e=null,o=d),null!==e&&(e=function(e){try{Hn.uri=new qn(Hn.scheme,Hn.user,Hn.host,Hn.port,Hn.uri_params,Hn.uri_headers),delete Hn.scheme,delete Hn.user,delete Hn.host,delete Hn.host_type,delete Hn.port,delete Hn.uri_params,"SIP_URI"===r&&(Hn=Hn.uri)}catch(e){Hn=-1}}()),null===e&&(o=h),e}function Z(){var e;return null===(e=ee())&&(e=te()),e}function ee(){var e,n,r;return n=o,"sips"===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"sips"')),null!==e&&(r=e,e=void(Hn.scheme=r.toLowerCase())),null===e&&(o=n),e}function te(){var e,n,r;return n=o,"sip"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"sip"')),null!==e&&(r=e,e=void(Hn.scheme=r.toLowerCase())),null===e&&(o=n),e}function ne(){var e,n,r,i,a,u,c;return i=o,a=o,null!==(e=re())?(u=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=oe())?n=[n,r]:(n=null,o=u),null!==(n=null!==n?n:"")?(64===t.charCodeAt(o)?(r="@",o++):(r=null,0===s&&l('"@"')),null!==r?e=[e,n,r]:(e=null,o=a)):(e=null,o=a)):(e=null,o=a),null!==e&&(c=i,e=void(Hn.user=decodeURIComponent(t.substring(o-1,c)))),null===e&&(o=i),e}function re(){var e,t;if(null===(t=C())&&null===(t=b())&&(t=ie()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=C())&&null===(t=b())&&(t=ie());else e=null;return e}function ie(){var e;return 38===t.charCodeAt(o)?(e="&",o++):(e=null,0===s&&l('"&"')),null===e&&(61===t.charCodeAt(o)?(e="=",o++):(e=null,0===s&&l('"="')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')),null===e&&(44===t.charCodeAt(o)?(e=",",o++):(e=null,0===s&&l('","')),null===e&&(59===t.charCodeAt(o)?(e=";",o++):(e=null,0===s&&l('";"')),null===e&&(63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null===e&&(47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"'))))))))),e}function oe(){var e,n,r,i;for(r=o,e=[],null===(n=C())&&null===(n=b())&&(38===t.charCodeAt(o)?(n="&",o++):(n=null,0===s&&l('"&"')),null===n&&(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(36===t.charCodeAt(o)?(n="$",o++):(n=null,0===s&&l('"$"')),null===n&&(44===t.charCodeAt(o)?(n=",",o++):(n=null,0===s&&l('","')))))));null!==n;)e.push(n),null===(n=C())&&null===(n=b())&&(38===t.charCodeAt(o)?(n="&",o++):(n=null,0===s&&l('"&"')),null===n&&(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')),null===n&&(36===t.charCodeAt(o)?(n="$",o++):(n=null,0===s&&l('"$"')),null===n&&(44===t.charCodeAt(o)?(n=",",o++):(n=null,0===s&&l('","')))))));return null!==e&&(i=r,e=void(Hn.password=t.substring(o,i))),null===e&&(o=r),e}function se(){var e,n,r,i,a;return i=o,null!==(e=ae())?(a=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=_e())?n=[n,r]:(n=null,o=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=i)):(e=null,o=i),e}function ae(){var e,n,r;return n=o,null===(e=ue())&&null===(e=ve())&&(e=he()),null!==e&&(r=n,Hn.host=t.substring(o,r).toLowerCase(),e=Hn.host),null===e&&(o=n),e}function ue(){var e,n,r,i,a,u,c;for(i=o,a=o,e=[],u=o,null!==(n=le())?(46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')),null!==r?n=[n,r]:(n=null,o=u)):(n=null,o=u);null!==n;)e.push(n),u=o,null!==(n=le())?(46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')),null!==r?n=[n,r]:(n=null,o=u)):(n=null,o=u);return null!==e&&null!==(n=ce())?(46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')),null!==(r=null!==r?r:"")?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(c=i,Hn.host_type="domain",e=t.substring(o,c)),null===e&&(o=i),e}function le(){var e,n,r,i;if(i=o,null!==(e=g())){for(n=[],null===(r=g())&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(95===t.charCodeAt(o)?(r="_",o++):(r=null,0===s&&l('"_"'))));null!==r;)n.push(r),null===(r=g())&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(95===t.charCodeAt(o)?(r="_",o++):(r=null,0===s&&l('"_"'))));null!==n?e=[e,n]:(e=null,o=i)}else e=null,o=i;return e}function ce(){var e,n,r,i;if(i=o,null!==(e=d())){for(n=[],null===(r=g())&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(95===t.charCodeAt(o)?(r="_",o++):(r=null,0===s&&l('"_"'))));null!==r;)n.push(r),null===(r=g())&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(95===t.charCodeAt(o)?(r="_",o++):(r=null,0===s&&l('"_"'))));null!==n?e=[e,n]:(e=null,o=i)}else e=null,o=i;return e}function he(){var e,n,r,i,a,u;return i=o,a=o,91===t.charCodeAt(o)?(e="[",o++):(e=null,0===s&&l('"["')),null!==e&&null!==(n=de())?(93===t.charCodeAt(o)?(r="]",o++):(r=null,0===s&&l('"]"')),null!==r?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(u=i,Hn.host_type="IPv6",e=t.substring(o,u)),null===e&&(o=i),e}function de(){var e,n,r,i,a,u,c,h,d,f,p,v,m,_,y,g,T;return _=o,y=o,null!==(e=fe())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?(58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?(58===t.charCodeAt(o)?(u=":",o++):(u=null,0===s&&l('":"')),null!==u&&null!==(c=fe())?(58===t.charCodeAt(o)?(h=":",o++):(h=null,0===s&&l('":"')),null!==h&&null!==(d=fe())?(58===t.charCodeAt(o)?(f=":",o++):(f=null,0===s&&l('":"')),null!==f&&null!==(p=fe())?(58===t.charCodeAt(o)?(v=":",o++):(v=null,0===s&&l('":"')),null!==v&&null!==(m=pe())?e=[e,n,r,i,a,u,c,h,d,f,p,v,m]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?(58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?(58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?(58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=fe())?(58===t.charCodeAt(o)?(d=":",o++):(d=null,0===s&&l('":"')),null!==d&&null!==(f=fe())?(58===t.charCodeAt(o)?(p=":",o++):(p=null,0===s&&l('":"')),null!==p&&null!==(v=pe())?e=[e,n,r,i,a,u,c,h,d,f,p,v]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?(58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?(58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?(58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=fe())?(58===t.charCodeAt(o)?(d=":",o++):(d=null,0===s&&l('":"')),null!==d&&null!==(f=pe())?e=[e,n,r,i,a,u,c,h,d,f]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?(58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?(58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?(58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=pe())?e=[e,n,r,i,a,u,c,h]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?(58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?(58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=pe())?e=[e,n,r,i,a,u]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?(58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=pe())?e=[e,n,r,i]:(e=null,o=y)):(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=pe())?e=[e,n]:(e=null,o=y),null===e&&(y=o,"::"===t.substr(o,2)?(e="::",o+=2):(e=null,0===s&&l('"::"')),null!==e&&null!==(n=fe())?e=[e,n]:(e=null,o=y),null===e&&(y=o,null!==(e=fe())?("::"===t.substr(o,2)?(n="::",o+=2):(n=null,0===s&&l('"::"')),null!==n&&null!==(r=fe())?(58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?(58===t.charCodeAt(o)?(u=":",o++):(u=null,0===s&&l('":"')),null!==u&&null!==(c=fe())?(58===t.charCodeAt(o)?(h=":",o++):(h=null,0===s&&l('":"')),null!==h&&null!==(d=fe())?(58===t.charCodeAt(o)?(f=":",o++):(f=null,0===s&&l('":"')),null!==f&&null!==(p=pe())?e=[e,n,r,i,a,u,c,h,d,f,p]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?("::"===t.substr(o,2)?(r="::",o+=2):(r=null,0===s&&l('"::"')),null!==r&&null!==(i=fe())?(58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?(58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=fe())?(58===t.charCodeAt(o)?(d=":",o++):(d=null,0===s&&l('":"')),null!==d&&null!==(f=pe())?e=[e,n,r,i,a,u,c,h,d,f]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?(g=o,58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,o=g),null!==(r=null!==r?r:"")?("::"===t.substr(o,2)?(i="::",o+=2):(i=null,0===s&&l('"::"')),null!==i&&null!==(a=fe())?(58===t.charCodeAt(o)?(u=":",o++):(u=null,0===s&&l('":"')),null!==u&&null!==(c=fe())?(58===t.charCodeAt(o)?(h=":",o++):(h=null,0===s&&l('":"')),null!==h&&null!==(d=pe())?e=[e,n,r,i,a,u,c,h,d]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?(g=o,58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,o=g),null!==(r=null!==r?r:"")?(g=o,58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?i=[i,a]:(i=null,o=g),null!==(i=null!==i?i:"")?("::"===t.substr(o,2)?(a="::",o+=2):(a=null,0===s&&l('"::"')),null!==a&&null!==(u=fe())?(58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=pe())?e=[e,n,r,i,a,u,c,h]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?(g=o,58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,o=g),null!==(r=null!==r?r:"")?(g=o,58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?i=[i,a]:(i=null,o=g),null!==(i=null!==i?i:"")?(g=o,58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?a=[a,u]:(a=null,o=g),null!==(a=null!==a?a:"")?("::"===t.substr(o,2)?(u="::",o+=2):(u=null,0===s&&l('"::"')),null!==u&&null!==(c=pe())?e=[e,n,r,i,a,u,c]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?(g=o,58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,o=g),null!==(r=null!==r?r:"")?(g=o,58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?i=[i,a]:(i=null,o=g),null!==(i=null!==i?i:"")?(g=o,58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?a=[a,u]:(a=null,o=g),null!==(a=null!==a?a:"")?(g=o,58===t.charCodeAt(o)?(u=":",o++):(u=null,0===s&&l('":"')),null!==u&&null!==(c=fe())?u=[u,c]:(u=null,o=g),null!==(u=null!==u?u:"")?("::"===t.substr(o,2)?(c="::",o+=2):(c=null,0===s&&l('"::"')),null!==c&&null!==(h=fe())?e=[e,n,r,i,a,u,c,h]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y),null===e&&(y=o,null!==(e=fe())?(g=o,58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?n=[n,r]:(n=null,o=g),null!==(n=null!==n?n:"")?(g=o,58===t.charCodeAt(o)?(r=":",o++):(r=null,0===s&&l('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,o=g),null!==(r=null!==r?r:"")?(g=o,58===t.charCodeAt(o)?(i=":",o++):(i=null,0===s&&l('":"')),null!==i&&null!==(a=fe())?i=[i,a]:(i=null,o=g),null!==(i=null!==i?i:"")?(g=o,58===t.charCodeAt(o)?(a=":",o++):(a=null,0===s&&l('":"')),null!==a&&null!==(u=fe())?a=[a,u]:(a=null,o=g),null!==(a=null!==a?a:"")?(g=o,58===t.charCodeAt(o)?(u=":",o++):(u=null,0===s&&l('":"')),null!==u&&null!==(c=fe())?u=[u,c]:(u=null,o=g),null!==(u=null!==u?u:"")?(g=o,58===t.charCodeAt(o)?(c=":",o++):(c=null,0===s&&l('":"')),null!==c&&null!==(h=fe())?c=[c,h]:(c=null,o=g),null!==(c=null!==c?c:"")?("::"===t.substr(o,2)?(h="::",o+=2):(h=null,0===s&&l('"::"')),null!==h?e=[e,n,r,i,a,u,c,h]:(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y)):(e=null,o=y))))))))))))))),null!==e&&(T=_,Hn.host_type="IPv6",e=t.substring(o,T)),null===e&&(o=_),e}function fe(){var e,t,n,r,i;return i=o,null!==(e=f())&&null!==(t=null!==(t=f())?t:"")&&null!==(n=null!==(n=f())?n:"")&&null!==(r=null!==(r=f())?r:"")?e=[e,t,n,r]:(e=null,o=i),e}function pe(){var e,n,r,i;return i=o,null!==(e=fe())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n&&null!==(r=fe())?e=[e,n,r]:(e=null,o=i)):(e=null,o=i),null===e&&(e=ve()),e}function ve(){var e,n,r,i,a,u,c,h,d,f;return h=o,d=o,null!==(e=me())?(46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null!==n&&null!==(r=me())?(46===t.charCodeAt(o)?(i=".",o++):(i=null,0===s&&l('"."')),null!==i&&null!==(a=me())?(46===t.charCodeAt(o)?(u=".",o++):(u=null,0===s&&l('"."')),null!==u&&null!==(c=me())?e=[e,n,r,i,a,u,c]:(e=null,o=d)):(e=null,o=d)):(e=null,o=d)):(e=null,o=d),null!==e&&(f=h,Hn.host_type="IPv4",e=t.substring(o,f)),null===e&&(o=h),e}function me(){var e,n,r,i;return i=o,"25"===t.substr(o,2)?(e="25",o+=2):(e=null,0===s&&l('"25"')),null!==e?(/^[0-5]/.test(t.charAt(o))?(n=t.charAt(o),o++):(n=null,0===s&&l("[0-5]")),null!==n?e=[e,n]:(e=null,o=i)):(e=null,o=i),null===e&&(i=o,50===t.charCodeAt(o)?(e="2",o++):(e=null,0===s&&l('"2"')),null!==e?(/^[0-4]/.test(t.charAt(o))?(n=t.charAt(o),o++):(n=null,0===s&&l("[0-4]")),null!==n&&null!==(r=h())?e=[e,n,r]:(e=null,o=i)):(e=null,o=i),null===e&&(i=o,49===t.charCodeAt(o)?(e="1",o++):(e=null,0===s&&l('"1"')),null!==e&&null!==(n=h())&&null!==(r=h())?e=[e,n,r]:(e=null,o=i),null===e&&(i=o,/^[1-9]/.test(t.charAt(o))?(e=t.charAt(o),o++):(e=null,0===s&&l("[1-9]")),null!==e&&null!==(n=h())?e=[e,n]:(e=null,o=i),null===e&&(e=h())))),e}function _e(){var e,t,n,r,i,s,a,u;return s=o,a=o,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")?e=[e,t,n,r,i]:(e=null,o=a),null!==e&&(u=e,u=parseInt(u.join("")),Hn.port=u,e=u),null===e&&(o=s),e}function ye(){var e,n,r,i;for(e=[],i=o,59===t.charCodeAt(o)?(n=";",o++):(n=null,0===s&&l('";"')),null!==n&&null!==(r=ge())?n=[n,r]:(n=null,o=i);null!==n;)e.push(n),i=o,59===t.charCodeAt(o)?(n=";",o++):(n=null,0===s&&l('";"')),null!==n&&null!==(r=ge())?n=[n,r]:(n=null,o=i);return e}function ge(){var e;return null===(e=Te())&&null===(e=Ce())&&null===(e=Se())&&null===(e=be())&&null===(e=Ee())&&null===(e=we())&&(e=Re()),e}function Te(){var e,n,r,i,a;return r=o,i=o,"transport="===t.substr(o,10).toLowerCase()?(e=t.substr(o,10),o+=10):(e=null,0===s&&l('"transport="')),null!==e?("udp"===t.substr(o,3).toLowerCase()?(n=t.substr(o,3),o+=3):(n=null,0===s&&l('"udp"')),null===n&&("tcp"===t.substr(o,3).toLowerCase()?(n=t.substr(o,3),o+=3):(n=null,0===s&&l('"tcp"')),null===n&&("sctp"===t.substr(o,4).toLowerCase()?(n=t.substr(o,4),o+=4):(n=null,0===s&&l('"sctp"')),null===n&&("tls"===t.substr(o,3).toLowerCase()?(n=t.substr(o,3),o+=3):(n=null,0===s&&l('"tls"')),null===n&&(n=O())))),null!==n?e=[e,n]:(e=null,o=i)):(e=null,o=i),null!==e&&(a=e[1],Hn.uri_params||(Hn.uri_params={}),e=void(Hn.uri_params.transport=a.toLowerCase())),null===e&&(o=r),e}function Ce(){var e,n,r,i,a;return r=o,i=o,"user="===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"user="')),null!==e?("phone"===t.substr(o,5).toLowerCase()?(n=t.substr(o,5),o+=5):(n=null,0===s&&l('"phone"')),null===n&&("ip"===t.substr(o,2).toLowerCase()?(n=t.substr(o,2),o+=2):(n=null,0===s&&l('"ip"')),null===n&&(n=O())),null!==n?e=[e,n]:(e=null,o=i)):(e=null,o=i),null!==e&&(a=e[1],Hn.uri_params||(Hn.uri_params={}),e=void(Hn.uri_params.user=a.toLowerCase())),null===e&&(o=r),e}function Se(){var e,n,r,i,a;return r=o,i=o,"method="===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"method="')),null!==e&&null!==(n=ct())?e=[e,n]:(e=null,o=i),null!==e&&(a=e[1],Hn.uri_params||(Hn.uri_params={}),e=void(Hn.uri_params.method=a)),null===e&&(o=r),e}function be(){var e,n,r,i,a;return r=o,i=o,"ttl="===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"ttl="')),null!==e&&null!==(n=En())?e=[e,n]:(e=null,o=i),null!==e&&(a=e[1],Hn.params||(Hn.params={}),e=void(Hn.params.ttl=a)),null===e&&(o=r),e}function Ee(){var e,n,r,i,a;return r=o,i=o,"maddr="===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"maddr="')),null!==e&&null!==(n=ae())?e=[e,n]:(e=null,o=i),null!==e&&(a=e[1],Hn.uri_params||(Hn.uri_params={}),e=void(Hn.uri_params.maddr=a)),null===e&&(o=r),e}function we(){var e,n,r,i,a,u;return i=o,a=o,"lr"===t.substr(o,2).toLowerCase()?(e=t.substr(o,2),o+=2):(e=null,0===s&&l('"lr"')),null!==e?(u=o,61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null!==n&&null!==(r=O())?n=[n,r]:(n=null,o=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=a)):(e=null,o=a),null!==e&&(Hn.uri_params||(Hn.uri_params={}),e=void(Hn.uri_params.lr=void 0)),null===e&&(o=i),e}function Re(){var e,n,r,i,a,u,c,h;return i=o,a=o,null!==(e=Ae())?(u=o,61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null!==n&&null!==(r=ke())?n=[n,r]:(n=null,o=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=a)):(e=null,o=a),null!==e&&(c=e[0],h=e[1],Hn.uri_params||(Hn.uri_params={}),h=void 0===h?void 0:h[1],e=void(Hn.uri_params[c.toLowerCase()]=h)),null===e&&(o=i),e}function Ae(){var e,t,n;if(n=o,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(o=n),e}function ke(){var e,t,n;if(n=o,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(o=n),e}function Ie(){var e;return null===(e=Pe())&&null===(e=C())&&(e=b()),e}function Pe(){var e;return 91===t.charCodeAt(o)?(e="[",o++):(e=null,0===s&&l('"["')),null===e&&(93===t.charCodeAt(o)?(e="]",o++):(e=null,0===s&&l('"]"')),null===e&&(47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"')),null===e&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(38===t.charCodeAt(o)?(e="&",o++):(e=null,0===s&&l('"&"')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')))))))),e}function Oe(){var e,n,r,i,a,u,c;if(u=o,63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null!==e)if(null!==(n=xe())){for(r=[],c=o,38===t.charCodeAt(o)?(i="&",o++):(i=null,0===s&&l('"&"')),null!==i&&null!==(a=xe())?i=[i,a]:(i=null,o=c);null!==i;)r.push(i),c=o,38===t.charCodeAt(o)?(i="&",o++):(i=null,0===s&&l('"&"')),null!==i&&null!==(a=xe())?i=[i,a]:(i=null,o=c);null!==r?e=[e,n,r]:(e=null,o=u)}else e=null,o=u;else e=null,o=u;return e}function xe(){var e,n,r,i,a,u,c;return i=o,a=o,null!==(e=De())?(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null!==n&&null!==(r=Ne())?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(u=e[0],c=e[2],u=u.join("").toLowerCase(),c=c.join(""),Hn.uri_headers||(Hn.uri_headers={}),e=void(Hn.uri_headers[u]?Hn.uri_headers[u].push(c):Hn.uri_headers[u]=[c])),null===e&&(o=i),e}function De(){var e,t;if(null===(t=Ue())&&null===(t=C())&&(t=b()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=Ue())&&null===(t=C())&&(t=b());else e=null;return e}function Ne(){var e,t;for(e=[],null===(t=Ue())&&null===(t=C())&&(t=b());null!==t;)e.push(t),null===(t=Ue())&&null===(t=C())&&(t=b());return e}function Ue(){var e;return 91===t.charCodeAt(o)?(e="[",o++):(e=null,0===s&&l('"["')),null===e&&(93===t.charCodeAt(o)?(e="]",o++):(e=null,0===s&&l('"]"')),null===e&&(47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"')),null===e&&(63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null===e&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')))))))),e}function Me(){var e,t,n,r,i,s;return s=o,null!==(e=ct())&&null!==(t=_())&&null!==(n=Le())&&null!==(r=_())&&null!==(i=et())?e=[e,t,n,r,i]:(e=null,o=s),e}function Le(){var e;return null===(e=Q())&&(e=qe()),e}function qe(){var e,n,r,i;return i=o,null!==(e=Ke())?(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null!==n?(null===(r=je())&&(r=Fe()),null!==r?e=[e,n,r]:(e=null,o=i)):(e=null,o=i)):(e=null,o=i),e}function je(){var e,n,r,i,a;return i=o,null===(e=He())&&(e=Be()),null!==e?(a=o,63===t.charCodeAt(o)?(n="?",o++):(n=null,0===s&&l('"?"')),null!==n&&null!==(r=Ze())?n=[n,r]:(n=null,o=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=i)):(e=null,o=i),e}function He(){var e,n,r,i;return i=o,"//"===t.substr(o,2)?(e="//",o+=2):(e=null,0===s&&l('"//"')),null!==e&&null!==(n=Xe())&&null!==(r=null!==(r=Be())?r:"")?e=[e,n,r]:(e=null,o=i),e}function Be(){var e,n,r;return r=o,47===t.charCodeAt(o)?(e="/",o++):(e=null,0===s&&l('"/"')),null!==e&&null!==(n=ze())?e=[e,n]:(e=null,o=r),e}function Fe(){var e,t,n,r;if(r=o,null!==(e=Ve())){for(t=[],n=Ge();null!==n;)t.push(n),n=Ge();null!==t?e=[e,t]:(e=null,o=r)}else e=null,o=r;return e}function Ge(){var e;return null===(e=T())&&null===(e=C())&&(e=b()),e}function Ve(){var e;return null===(e=C())&&null===(e=b())&&(59===t.charCodeAt(o)?(e=";",o++):(e=null,0===s&&l('";"')),null===e&&(63===t.charCodeAt(o)?(e="?",o++):(e=null,0===s&&l('"?"')),null===e&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(64===t.charCodeAt(o)?(e="@",o++):(e=null,0===s&&l('"@"')),null===e&&(38===t.charCodeAt(o)?(e="&",o++):(e=null,0===s&&l('"&"')),null===e&&(61===t.charCodeAt(o)?(e="=",o++):(e=null,0===s&&l('"="')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')),null===e&&(44===t.charCodeAt(o)?(e=",",o++):(e=null,0===s&&l('","'))))))))))),e}function ze(){var e,n,r,i,a,u;if(a=o,null!==(e=Ye())){for(n=[],u=o,47===t.charCodeAt(o)?(r="/",o++):(r=null,0===s&&l('"/"')),null!==r&&null!==(i=Ye())?r=[r,i]:(r=null,o=u);null!==r;)n.push(r),u=o,47===t.charCodeAt(o)?(r="/",o++):(r=null,0===s&&l('"/"')),null!==r&&null!==(i=Ye())?r=[r,i]:(r=null,o=u);null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return e}function Ye(){var e,n,r,i,a,u;for(a=o,e=[],n=Je();null!==n;)e.push(n),n=Je();if(null!==e){for(n=[],u=o,59===t.charCodeAt(o)?(r=";",o++):(r=null,0===s&&l('";"')),null!==r&&null!==(i=We())?r=[r,i]:(r=null,o=u);null!==r;)n.push(r),u=o,59===t.charCodeAt(o)?(r=";",o++):(r=null,0===s&&l('";"')),null!==r&&null!==(i=We())?r=[r,i]:(r=null,o=u);null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return e}function We(){var e,t;for(e=[],t=Je();null!==t;)e.push(t),t=Je();return e}function Je(){var e;return null===(e=C())&&null===(e=b())&&(58===t.charCodeAt(o)?(e=":",o++):(e=null,0===s&&l('":"')),null===e&&(64===t.charCodeAt(o)?(e="@",o++):(e=null,0===s&&l('"@"')),null===e&&(38===t.charCodeAt(o)?(e="&",o++):(e=null,0===s&&l('"&"')),null===e&&(61===t.charCodeAt(o)?(e="=",o++):(e=null,0===s&&l('"="')),null===e&&(43===t.charCodeAt(o)?(e="+",o++):(e=null,0===s&&l('"+"')),null===e&&(36===t.charCodeAt(o)?(e="$",o++):(e=null,0===s&&l('"$"')),null===e&&(44===t.charCodeAt(o)?(e=",",o++):(e=null,0===s&&l('","'))))))))),e}function Ke(){var e,n,r,i,a,u;if(i=o,a=o,null!==(e=d())){for(n=[],null===(r=d())&&null===(r=h())&&(43===t.charCodeAt(o)?(r="+",o++):(r=null,0===s&&l('"+"')),null===r&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')))));null!==r;)n.push(r),null===(r=d())&&null===(r=h())&&(43===t.charCodeAt(o)?(r="+",o++):(r=null,0===s&&l('"+"')),null===r&&(45===t.charCodeAt(o)?(r="-",o++):(r=null,0===s&&l('"-"')),null===r&&(46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')))));null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return null!==e&&(u=i,e=void(Hn.scheme=t.substring(o,u))),null===e&&(o=i),e}function Xe(){var e;return null===(e=$e())&&(e=Qe()),e}function $e(){var e,n,r,i;return r=o,i=o,null!==(e=ne())?(64===t.charCodeAt(o)?(n="@",o++):(n=null,0===s&&l('"@"')),null!==n?e=[e,n]:(e=null,o=i)):(e=null,o=i),null!==(e=null!==e?e:"")&&null!==(n=se())?e=[e,n]:(e=null,o=r),e=null!==e?e:""}function Qe(){var e,n;if(null===(n=C())&&null===(n=b())&&(36===t.charCodeAt(o)?(n="$",o++):(n=null,0===s&&l('"$"')),null===n&&(44===t.charCodeAt(o)?(n=",",o++):(n=null,0===s&&l('","')),null===n&&(59===t.charCodeAt(o)?(n=";",o++):(n=null,0===s&&l('";"')),null===n&&(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null===n&&(64===t.charCodeAt(o)?(n="@",o++):(n=null,0===s&&l('"@"')),null===n&&(38===t.charCodeAt(o)?(n="&",o++):(n=null,0===s&&l('"&"')),null===n&&(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"')))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=C())&&null===(n=b())&&(36===t.charCodeAt(o)?(n="$",o++):(n=null,0===s&&l('"$"')),null===n&&(44===t.charCodeAt(o)?(n=",",o++):(n=null,0===s&&l('","')),null===n&&(59===t.charCodeAt(o)?(n=";",o++):(n=null,0===s&&l('";"')),null===n&&(58===t.charCodeAt(o)?(n=":",o++):(n=null,0===s&&l('":"')),null===n&&(64===t.charCodeAt(o)?(n="@",o++):(n=null,0===s&&l('"@"')),null===n&&(38===t.charCodeAt(o)?(n="&",o++):(n=null,0===s&&l('"&"')),null===n&&(61===t.charCodeAt(o)?(n="=",o++):(n=null,0===s&&l('"="')),null===n&&(43===t.charCodeAt(o)?(n="+",o++):(n=null,0===s&&l('"+"'))))))))));else e=null;return e}function Ze(){var e,t;for(e=[],t=Ge();null!==t;)e.push(t),t=Ge();return e}function et(){var e,n,r,i,a,u,c,d,f;if(c=o,d=o,"sip"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"SIP"')),null!==e)if(47===t.charCodeAt(o)?(n="/",o++):(n=null,0===s&&l('"/"')),null!==n){if(null!==(i=h()))for(r=[];null!==i;)r.push(i),i=h();else r=null;if(null!==r)if(46===t.charCodeAt(o)?(i=".",o++):(i=null,0===s&&l('"."')),null!==i){if(null!==(u=h()))for(a=[];null!==u;)a.push(u),u=h();else a=null;null!==a?e=[e,n,r,i,a]:(e=null,o=d)}else e=null,o=d;else e=null,o=d}else e=null,o=d;else e=null,o=d;return null!==e&&(f=c,e=void(Hn.sip_version=t.substring(o,f))),null===e&&(o=c),e}function tt(){var e;return"INVITE"===t.substr(o,6)?(e="INVITE",o+=6):(e=null,0===s&&l('"INVITE"')),e}function nt(){var e;return"ACK"===t.substr(o,3)?(e="ACK",o+=3):(e=null,0===s&&l('"ACK"')),e}function rt(){var e;return"OPTIONS"===t.substr(o,7)?(e="OPTIONS",o+=7):(e=null,0===s&&l('"OPTIONS"')),e}function it(){var e;return"BYE"===t.substr(o,3)?(e="BYE",o+=3):(e=null,0===s&&l('"BYE"')),e}function ot(){var e;return"CANCEL"===t.substr(o,6)?(e="CANCEL",o+=6):(e=null,0===s&&l('"CANCEL"')),e}function st(){var e;return"REGISTER"===t.substr(o,8)?(e="REGISTER",o+=8):(e=null,0===s&&l('"REGISTER"')),e}function at(){var e;return"SUBSCRIBE"===t.substr(o,9)?(e="SUBSCRIBE",o+=9):(e=null,0===s&&l('"SUBSCRIBE"')),e}function ut(){var e;return"NOTIFY"===t.substr(o,6)?(e="NOTIFY",o+=6):(e=null,0===s&&l('"NOTIFY"')),e}function lt(){var e;return"REFER"===t.substr(o,5)?(e="REFER",o+=5):(e=null,0===s&&l('"REFER"')),e}function ct(){var e,n,r;return n=o,null===(e=tt())&&null===(e=nt())&&null===(e=rt())&&null===(e=it())&&null===(e=ot())&&null===(e=st())&&null===(e=at())&&null===(e=ut())&&null===(e=lt())&&(e=O()),null!==e&&(r=n,Hn.method=t.substring(o,r),e=Hn.method),null===e&&(o=n),e}function ht(){var e,t,n,r,i,s;return s=o,null!==(e=et())&&null!==(t=_())&&null!==(n=dt())&&null!==(r=_())&&null!==(i=pt())?e=[e,t,n,r,i]:(e=null,o=s),e}function dt(){var e,t,n;return t=o,null!==(e=ft())&&(n=e,e=void(Hn.status_code=parseInt(n.join("")))),null===e&&(o=t),e}function ft(){var e,t,n,r;return r=o,null!==(e=h())&&null!==(t=h())&&null!==(n=h())?e=[e,t,n]:(e=null,o=r),e}function pt(){var e,n,r,i;for(r=o,e=[],null===(n=T())&&null===(n=C())&&null===(n=b())&&null===(n=I())&&null===(n=P())&&null===(n=_())&&(n=y());null!==n;)e.push(n),null===(n=T())&&null===(n=C())&&null===(n=b())&&null===(n=I())&&null===(n=P())&&null===(n=_())&&(n=y());return null!==e&&(i=r,e=void(Hn.reason_phrase=t.substring(o,i))),null===e&&(o=r),e}function vt(){var e,t,n,r,i,s,a;if(i=o,s=o,null===(e=$())&&(e=mt()),null!==e){for(t=[],a=o,null!==(n=F())&&null!==(r=yt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=yt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;return null!==e&&(e=function(e){var t;Hn.multi_header||(Hn.multi_header=[]);try{t=new jn(Hn.uri,Hn.display_name,Hn.params),delete Hn.uri,delete Hn.display_name,delete Hn.params}catch(e){t=null}Hn.multi_header.push({possition:o,offset:e,parsed:t})}(i)),null===e&&(o=i),e}function mt(){var e,t,n,r,i;return i=o,null!==(e=null!==(e=_t())?e:"")&&null!==(t=H())&&null!==(n=Q())&&null!==(r=j())?e=[e,t,n,r]:(e=null,o=i),e}function _t(){var e,n,r,i,s,a,u,l,c;if(s=o,a=o,null!==(e=O())){for(n=[],u=o,null!==(r=E())&&null!==(i=O())?r=[r,i]:(r=null,o=u);null!==r;)n.push(r),u=o,null!==(r=E())&&null!==(i=O())?r=[r,i]:(r=null,o=u);null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return null===e&&(e=W()),null!==e&&(l=s,c=e,'"'===(c=t.substring(o,l).trim())[0]&&(c=c.substring(1,c.length-1)),e=void(Hn.display_name=c)),null===e&&(o=s),e}function yt(){var e;return null===(e=gt())&&null===(e=Tt())&&(e=bt()),e}function gt(){var e,n,r,i,a,u;return i=o,a=o,"q"===t.substr(o,1).toLowerCase()?(e=t.substr(o,1),o++):(e=null,0===s&&l('"q"')),null!==e&&null!==(n=M())&&null!==(r=St())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],Hn.params||(Hn.params={}),e=void(Hn.params.q=u)),null===e&&(o=i),e}function Tt(){var e,n,r,i,a,u;return i=o,a=o,"expires"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"expires"')),null!==e&&null!==(n=M())&&null!==(r=Ct())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],Hn.params||(Hn.params={}),e=void(Hn.params.expires=u)),null===e&&(o=i),e}function Ct(){var e,t,n;if(n=o,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=parseInt(e.join(""))),null===e&&(o=n),e}function St(){var e,n,r,i,a,u,c,d,f;return u=o,c=o,48===t.charCodeAt(o)?(e="0",o++):(e=null,0===s&&l('"0"')),null!==e?(d=o,46===t.charCodeAt(o)?(n=".",o++):(n=null,0===s&&l('"."')),null!==n&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")&&null!==(a=null!==(a=h())?a:"")?n=[n,r,i,a]:(n=null,o=d),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=c)):(e=null,o=c),null!==e&&(f=u,e=parseFloat(t.substring(o,f))),null===e&&(o=u),e}function bt(){var e,t,n,r,i,s,a,u;return r=o,i=o,null!==(e=O())?(s=o,null!==(t=M())&&null!==(n=Et())?t=[t,n]:(t=null,o=s),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,o=i)):(e=null,o=i),null!==e&&(a=e[0],u=e[1],Hn.params||(Hn.params={}),u=void 0===u?void 0:u[1],e=void(Hn.params[a.toLowerCase()]=u)),null===e&&(o=r),e}function Et(){var e;return null===(e=O())&&null===(e=ae())&&(e=W()),e}function wt(){var e;return"render"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"render"')),null===e&&("session"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"session"')),null===e&&("icon"===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"icon"')),null===e&&("alert"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"alert"')),null===e&&(e=O())))),e}function Rt(){var e;return null===(e=At())&&(e=bt()),e}function At(){var e,n,r,i;return i=o,"handling"===t.substr(o,8).toLowerCase()?(e=t.substr(o,8),o+=8):(e=null,0===s&&l('"handling"')),null!==e&&null!==(n=M())?("optional"===t.substr(o,8).toLowerCase()?(r=t.substr(o,8),o+=8):(r=null,0===s&&l('"optional"')),null===r&&("required"===t.substr(o,8).toLowerCase()?(r=t.substr(o,8),o+=8):(r=null,0===s&&l('"required"')),null===r&&(r=O())),null!==r?e=[e,n,r]:(e=null,o=i)):(e=null,o=i),e}function kt(){var e,t,n,r,i,s,a,u;if(a=o,null!==(e=It()))if(null!==(t=U()))if(null!==(n=Nt())){for(r=[],u=o,null!==(i=F())&&null!==(s=Ut())?i=[i,s]:(i=null,o=u);null!==i;)r.push(i),u=o,null!==(i=F())&&null!==(s=Ut())?i=[i,s]:(i=null,o=u);null!==r?e=[e,t,n,r]:(e=null,o=a)}else e=null,o=a;else e=null,o=a;else e=null,o=a;return e}function It(){var e;return null===(e=Pt())&&(e=Ot()),e}function Pt(){var e;return"text"===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"text"')),null===e&&("image"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"image"')),null===e&&("audio"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"audio"')),null===e&&("video"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"video"')),null===e&&("application"===t.substr(o,11).toLowerCase()?(e=t.substr(o,11),o+=11):(e=null,0===s&&l('"application"')),null===e&&(e=xt()))))),e}function Ot(){var e;return"message"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"message"')),null===e&&("multipart"===t.substr(o,9).toLowerCase()?(e=t.substr(o,9),o+=9):(e=null,0===s&&l('"multipart"')),null===e&&(e=xt())),e}function xt(){var e;return null===(e=O())&&(e=Dt()),e}function Dt(){var e,n,r;return r=o,"x-"===t.substr(o,2).toLowerCase()?(e=t.substr(o,2),o+=2):(e=null,0===s&&l('"x-"')),null!==e&&null!==(n=O())?e=[e,n]:(e=null,o=r),e}function Nt(){var e;return null===(e=xt())&&(e=O()),e}function Ut(){var e,t,n,r;return r=o,null!==(e=O())&&null!==(t=M())&&null!==(n=Mt())?e=[e,t,n]:(e=null,o=r),e}function Mt(){var e;return null===(e=O())&&(e=W()),e}function Lt(){var e,t,n,r;if(n=o,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(r=e,e=void(Hn.value=parseInt(r.join("")))),null===e&&(o=n),e}function qt(){var e,n,r,i,a,u;if(a=o,null!==(e=x())){for(n=[],u=o,46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')),null!==r&&null!==(i=x())?r=[r,i]:(r=null,o=u);null!==r;)n.push(r),u=o,46===t.charCodeAt(o)?(r=".",o++):(r=null,0===s&&l('"."')),null!==r&&null!==(i=x())?r=[r,i]:(r=null,o=u);null!==n?e=[e,n]:(e=null,o=a)}else e=null,o=a;return e}function jt(){var e;return null===(e=Ht())&&(e=bt()),e}function Ht(){var e,n,r,i,a,u;return i=o,a=o,"tag"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"tag"')),null!==e&&null!==(n=M())&&null!==(r=O())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.tag=u)),null===e&&(o=i),e}function Bt(){var e,n,r,i,a,u,c,h;if(c=o,"digest"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"Digest"')),null!==e)if(null!==(n=E()))if(null!==(r=Vt())){for(i=[],h=o,null!==(a=B())&&null!==(u=Vt())?a=[a,u]:(a=null,o=h);null!==a;)i.push(a),h=o,null!==(a=B())&&null!==(u=Vt())?a=[a,u]:(a=null,o=h);null!==i?e=[e,n,r,i]:(e=null,o=c)}else e=null,o=c;else e=null,o=c;else e=null,o=c;return null===e&&(e=Ft()),e}function Ft(){var e,t,n,r,i,s,a,u;if(a=o,null!==(e=O()))if(null!==(t=E()))if(null!==(n=Gt())){for(r=[],u=o,null!==(i=B())&&null!==(s=Gt())?i=[i,s]:(i=null,o=u);null!==i;)r.push(i),u=o,null!==(i=B())&&null!==(s=Gt())?i=[i,s]:(i=null,o=u);null!==r?e=[e,t,n,r]:(e=null,o=a)}else e=null,o=a;else e=null,o=a;else e=null,o=a;return e}function Gt(){var e,t,n,r;return r=o,null!==(e=O())&&null!==(t=M())?(null===(n=O())&&(n=W()),null!==n?e=[e,t,n]:(e=null,o=r)):(e=null,o=r),e}function Vt(){var e;return null===(e=zt())&&null===(e=Wt())&&null===(e=Kt())&&null===(e=$t())&&null===(e=Qt())&&null===(e=Zt())&&null===(e=en())&&(e=Gt()),e}function zt(){var e,n,r,i;return i=o,"realm"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"realm"')),null!==e&&null!==(n=M())&&null!==(r=Yt())?e=[e,n,r]:(e=null,o=i),e}function Yt(){var e,t,n;return t=o,null!==(e=J())&&(n=e,e=void(Hn.realm=n)),null===e&&(o=t),e}function Wt(){var e,n,r,i,a,u,c,h,d;if(h=o,"domain"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"domain"')),null!==e)if(null!==(n=M()))if(null!==(r=V()))if(null!==(i=Jt())){if(a=[],d=o,null!==(c=_()))for(u=[];null!==c;)u.push(c),c=_();else u=null;for(null!==u&&null!==(c=Jt())?u=[u,c]:(u=null,o=d);null!==u;){if(a.push(u),d=o,null!==(c=_()))for(u=[];null!==c;)u.push(c),c=_();else u=null;null!==u&&null!==(c=Jt())?u=[u,c]:(u=null,o=d)}null!==a&&null!==(u=z())?e=[e,n,r,i,a,u]:(e=null,o=h)}else e=null,o=h;else e=null,o=h;else e=null,o=h;else e=null,o=h;return e}function Jt(){var e;return null===(e=qe())&&(e=Be()),e}function Kt(){var e,n,r,i;return i=o,"nonce"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"nonce"')),null!==e&&null!==(n=M())&&null!==(r=Xt())?e=[e,n,r]:(e=null,o=i),e}function Xt(){var e,t,n;return t=o,null!==(e=J())&&(n=e,e=void(Hn.nonce=n)),null===e&&(o=t),e}function $t(){var e,n,r,i,a,u;return i=o,a=o,"opaque"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"opaque"')),null!==e&&null!==(n=M())&&null!==(r=J())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.opaque=u)),null===e&&(o=i),e}function Qt(){var e,n,r,i,a;return i=o,"stale"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"stale"')),null!==e&&null!==(n=M())?(a=o,"true"===t.substr(o,4).toLowerCase()?(r=t.substr(o,4),o+=4):(r=null,0===s&&l('"true"')),null!==r&&(r=void(Hn.stale=!0)),null===r&&(o=a),null===r&&(a=o,"false"===t.substr(o,5).toLowerCase()?(r=t.substr(o,5),o+=5):(r=null,0===s&&l('"false"')),null!==r&&(r=void(Hn.stale=!1)),null===r&&(o=a)),null!==r?e=[e,n,r]:(e=null,o=i)):(e=null,o=i),e}function Zt(){var e,n,r,i,a,u;return i=o,a=o,"algorithm"===t.substr(o,9).toLowerCase()?(e=t.substr(o,9),o+=9):(e=null,0===s&&l('"algorithm"')),null!==e&&null!==(n=M())?("md5"===t.substr(o,3).toLowerCase()?(r=t.substr(o,3),o+=3):(r=null,0===s&&l('"MD5"')),null===r&&("md5-sess"===t.substr(o,8).toLowerCase()?(r=t.substr(o,8),o+=8):(r=null,0===s&&l('"MD5-sess"')),null===r&&(r=O())),null!==r?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.algorithm=u.toUpperCase())),null===e&&(o=i),e}function en(){var e,n,r,i,a,u,c,h,d,f;if(h=o,"qop"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"qop"')),null!==e)if(null!==(n=M()))if(null!==(r=V())){if(d=o,null!==(i=tn())){for(a=[],f=o,44===t.charCodeAt(o)?(u=",",o++):(u=null,0===s&&l('","')),null!==u&&null!==(c=tn())?u=[u,c]:(u=null,o=f);null!==u;)a.push(u),f=o,44===t.charCodeAt(o)?(u=",",o++):(u=null,0===s&&l('","')),null!==u&&null!==(c=tn())?u=[u,c]:(u=null,o=f);null!==a?i=[i,a]:(i=null,o=d)}else i=null,o=d;null!==i&&null!==(a=z())?e=[e,n,r,i,a]:(e=null,o=h)}else e=null,o=h;else e=null,o=h;else e=null,o=h;return e}function tn(){var e,n,r;return n=o,"auth-int"===t.substr(o,8).toLowerCase()?(e=t.substr(o,8),o+=8):(e=null,0===s&&l('"auth-int"')),null===e&&("auth"===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"auth"')),null===e&&(e=O())),null!==e&&(r=e,Hn.qop||(Hn.qop=[]),e=void Hn.qop.push(r.toLowerCase())),null===e&&(o=n),e}function nn(){var e,t,n,r,i,s,a;if(i=o,s=o,null!==(e=mt())){for(t=[],a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==n;)t.push(n),a=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=a);null!==t?e=[e,t]:(e=null,o=s)}else e=null,o=s;return null!==e&&(e=function(e){var t;Hn.multi_header||(Hn.multi_header=[]);try{t=new jn(Hn.uri,Hn.display_name,Hn.params),delete Hn.uri,delete Hn.display_name,delete Hn.params}catch(e){t=null}Hn.multi_header.push({possition:o,offset:e,parsed:t})}(i)),null===e&&(o=i),e}function rn(){var e;return null===(e=on())&&(e=bt()),e}function on(){var e,n,r,i,a,u,c;if(a=o,u=o,"cause"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"cause"')),null!==e)if(null!==(n=M())){if(null!==(i=h()))for(r=[];null!==i;)r.push(i),i=h();else r=null;null!==r?e=[e,n,r]:(e=null,o=u)}else e=null,o=u;else e=null,o=u;return null!==e&&(c=e[2],e=void(Hn.cause=parseInt(c.join("")))),null===e&&(o=a),e}function sn(){var e,t,n,r,i,s;if(i=o,null!==(e=mt())){for(t=[],s=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=s);null!==n;)t.push(n),s=o,null!==(n=F())&&null!==(r=bt())?n=[n,r]:(n=null,o=s);null!==t?e=[e,t]:(e=null,o=i)}else e=null,o=i;return e}function an(){var e,n,r;return n=o,"active"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"active"')),null===e&&("pending"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"pending"')),null===e&&("terminated"===t.substr(o,10).toLowerCase()?(e=t.substr(o,10),o+=10):(e=null,0===s&&l('"terminated"')),null===e&&(e=O()))),null!==e&&(r=n,e=void(Hn.state=t.substring(o,r))),null===e&&(o=n),e}function un(){var e,n,r,i,a,u,c,h;return i=o,a=o,"reason"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"reason"')),null!==e&&null!==(n=M())&&null!==(r=ln())?e=[e,n,r]:(e=null,o=a),null!==e&&(e=void(void 0!==(u=e[2])&&(Hn.reason=u))),null===e&&(o=i),null===e&&(i=o,a=o,"expires"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"expires"')),null!==e&&null!==(n=M())&&null!==(r=Ct())?e=[e,n,r]:(e=null,o=a),null!==e&&(e=void(void 0!==(h=e[2])&&(Hn.expires=h))),null===e&&(o=i),null===e&&(i=o,a=o,"retry_after"===t.substr(o,11).toLowerCase()?(e=t.substr(o,11),o+=11):(e=null,0===s&&l('"retry_after"')),null!==e&&null!==(n=M())&&null!==(r=Ct())?e=[e,n,r]:(e=null,o=a),null!==e&&(e=void(void 0!==(c=e[2])&&(Hn.retry_after=c))),null===e&&(o=i),null===e&&(e=bt()))),e}function ln(){var e;return"deactivated"===t.substr(o,11).toLowerCase()?(e=t.substr(o,11),o+=11):(e=null,0===s&&l('"deactivated"')),null===e&&("probation"===t.substr(o,9).toLowerCase()?(e=t.substr(o,9),o+=9):(e=null,0===s&&l('"probation"')),null===e&&("rejected"===t.substr(o,8).toLowerCase()?(e=t.substr(o,8),o+=8):(e=null,0===s&&l('"rejected"')),null===e&&("timeout"===t.substr(o,7).toLowerCase()?(e=t.substr(o,7),o+=7):(e=null,0===s&&l('"timeout"')),null===e&&("giveup"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"giveup"')),null===e&&("noresource"===t.substr(o,10).toLowerCase()?(e=t.substr(o,10),o+=10):(e=null,0===s&&l('"noresource"')),null===e&&("invariant"===t.substr(o,9).toLowerCase()?(e=t.substr(o,9),o+=9):(e=null,0===s&&l('"invariant"')),null===e&&(e=O()))))))),e}function cn(){var e;return null===(e=Ht())&&(e=bt()),e}function hn(){var e,t,n,r,i,s,a,u;if(a=o,null!==(e=yn()))if(null!==(t=E()))if(null!==(n=Cn())){for(r=[],u=o,null!==(i=F())&&null!==(s=dn())?i=[i,s]:(i=null,o=u);null!==i;)r.push(i),u=o,null!==(i=F())&&null!==(s=dn())?i=[i,s]:(i=null,o=u);null!==r?e=[e,t,n,r]:(e=null,o=a)}else e=null,o=a;else e=null,o=a;else e=null,o=a;return e}function dn(){var e;return null===(e=fn())&&null===(e=pn())&&null===(e=vn())&&null===(e=mn())&&null===(e=_n())&&(e=bt()),e}function fn(){var e,n,r,i,a,u;return i=o,a=o,"ttl"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"ttl"')),null!==e&&null!==(n=M())&&null!==(r=En())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.ttl=u)),null===e&&(o=i),e}function pn(){var e,n,r,i,a,u;return i=o,a=o,"maddr"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"maddr"')),null!==e&&null!==(n=M())&&null!==(r=ae())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.maddr=u)),null===e&&(o=i),e}function vn(){var e,n,r,i,a,u;return i=o,a=o,"received"===t.substr(o,8).toLowerCase()?(e=t.substr(o,8),o+=8):(e=null,0===s&&l('"received"')),null!==e&&null!==(n=M())?(null===(r=ve())&&(r=de()),null!==r?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.received=u)),null===e&&(o=i),e}function mn(){var e,n,r,i,a,u;return i=o,a=o,"branch"===t.substr(o,6).toLowerCase()?(e=t.substr(o,6),o+=6):(e=null,0===s&&l('"branch"')),null!==e&&null!==(n=M())&&null!==(r=O())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.branch=u)),null===e&&(o=i),e}function _n(){var e,n,r,i,a,u,c;if(a=o,u=o,"rport"===t.substr(o,5).toLowerCase()?(e=t.substr(o,5),o+=5):(e=null,0===s&&l('"rport"')),null!==e){if(c=o,null!==(n=M())){for(r=[],i=h();null!==i;)r.push(i),i=h();null!==r?n=[n,r]:(n=null,o=c)}else n=null,o=c;null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=u)}else e=null,o=u;return null!==e&&(e=void("undefined"!=typeof response_port&&(Hn.rport=response_port.join("")))),null===e&&(o=a),e}function yn(){var e,t,n,r,i,s;return s=o,null!==(e=gn())&&null!==(t=U())&&null!==(n=O())&&null!==(r=U())&&null!==(i=Tn())?e=[e,t,n,r,i]:(e=null,o=s),e}function gn(){var e,n,r;return n=o,"sip"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"SIP"')),null===e&&(e=O()),null!==e&&(r=e,e=void(Hn.protocol=r)),null===e&&(o=n),e}function Tn(){var e,n,r;return n=o,"udp"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"UDP"')),null===e&&("tcp"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"TCP"')),null===e&&("tls"===t.substr(o,3).toLowerCase()?(e=t.substr(o,3),o+=3):(e=null,0===s&&l('"TLS"')),null===e&&("sctp"===t.substr(o,4).toLowerCase()?(e=t.substr(o,4),o+=4):(e=null,0===s&&l('"SCTP"')),null===e&&(e=O())))),null!==e&&(r=e,e=void(Hn.transport=r)),null===e&&(o=n),e}function Cn(){var e,t,n,r,i;return r=o,null!==(e=Sn())?(i=o,null!==(t=G())&&null!==(n=bn())?t=[t,n]:(t=null,o=i),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,o=r)):(e=null,o=r),e}function Sn(){var e,n,r;return n=o,null===(e=ve())&&null===(e=he())&&(e=ue()),null!==e&&(r=n,e=void(Hn.host=t.substring(o,r))),null===e&&(o=n),e}function bn(){var e,t,n,r,i,s,a,u;return s=o,a=o,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")?e=[e,t,n,r,i]:(e=null,o=a),null!==e&&(u=e,e=void(Hn.port=parseInt(u.join("")))),null===e&&(o=s),e}function En(){var e,t,n,r,i;return r=o,i=o,null!==(e=h())&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")?e=[e,t,n]:(e=null,o=i),null!==e&&(e=parseInt(e.join(""))),null===e&&(o=r),e}function wn(){var e,t,n;return t=o,null!==(e=Ct())&&(n=e,e=void(Hn.expires=n)),null===e&&(o=t),e}function Rn(){var e;return null===(e=An())&&(e=bt()),e}function An(){var e,n,r,i,a,u;return i=o,a=o,"refresher"===t.substr(o,9).toLowerCase()?(e=t.substr(o,9),o+=9):(e=null,0===s&&l('"refresher"')),null!==e&&null!==(n=M())?("uac"===t.substr(o,3).toLowerCase()?(r=t.substr(o,3),o+=3):(r=null,0===s&&l('"uac"')),null===r&&("uas"===t.substr(o,3).toLowerCase()?(r=t.substr(o,3),o+=3):(r=null,0===s&&l('"uas"'))),null!==r?e=[e,n,r]:(e=null,o=a)):(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.refresher=u.toLowerCase())),null===e&&(o=i),e}function kn(){var e,t;for(e=[],null===(t=k())&&null===(t=P())&&(t=E());null!==t;)e.push(t),null===(t=k())&&null===(t=P())&&(t=E());return e}function In(){var e,n,r,i,a,u,c,h,d,f,p,v;return f=o,p=o,null!==(e=On())?(45===t.charCodeAt(o)?(n="-",o++):(n=null,0===s&&l('"-"')),null!==n&&null!==(r=Pn())?(45===t.charCodeAt(o)?(i="-",o++):(i=null,0===s&&l('"-"')),null!==i&&null!==(a=Pn())?(45===t.charCodeAt(o)?(u="-",o++):(u=null,0===s&&l('"-"')),null!==u&&null!==(c=Pn())?(45===t.charCodeAt(o)?(h="-",o++):(h=null,0===s&&l('"-"')),null!==h&&null!==(d=xn())?e=[e,n,r,i,a,u,c,h,d]:(e=null,o=p)):(e=null,o=p)):(e=null,o=p)):(e=null,o=p)):(e=null,o=p),null!==e&&(v=f,e[0],e=void(Hn=t.substring(o+5,v))),null===e&&(o=f),e}function Pn(){var e,t,n,r,i;return i=o,null!==(e=f())&&null!==(t=f())&&null!==(n=f())&&null!==(r=f())?e=[e,t,n,r]:(e=null,o=i),e}function On(){var e,t,n;return n=o,null!==(e=Pn())&&null!==(t=Pn())?e=[e,t]:(e=null,o=n),e}function xn(){var e,t,n,r;return r=o,null!==(e=Pn())&&null!==(t=Pn())&&null!==(n=Pn())?e=[e,t,n]:(e=null,o=r),e}function Dn(){var e,n,r,i,a,u,c;return i=o,a=o,null!==(e=D())?(u=o,64===t.charCodeAt(o)?(n="@",o++):(n=null,0===s&&l('"@"')),null!==n&&null!==(r=D())?n=[n,r]:(n=null,o=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,o=a)):(e=null,o=a),null!==e&&(c=i,e=void(Hn.call_id=t.substring(o,c))),null===e&&(o=i),e}function Nn(){var e;return null===(e=Un())&&null===(e=Mn())&&null===(e=Ln())&&(e=bt()),e}function Un(){var e,n,r,i,a,u;return i=o,a=o,"to-tag"===t.substr(o,6)?(e="to-tag",o+=6):(e=null,0===s&&l('"to-tag"')),null!==e&&null!==(n=M())&&null!==(r=O())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.to_tag=u)),null===e&&(o=i),e}function Mn(){var e,n,r,i,a,u;return i=o,a=o,"from-tag"===t.substr(o,8)?(e="from-tag",o+=8):(e=null,0===s&&l('"from-tag"')),null!==e&&null!==(n=M())&&null!==(r=O())?e=[e,n,r]:(e=null,o=a),null!==e&&(u=e[2],e=void(Hn.from_tag=u)),null===e&&(o=i),e}function Ln(){var e,n;return n=o,"early-only"===t.substr(o,10)?(e="early-only",o+=10):(e=null,0===s&&l('"early-only"')),null!==e&&(e=void(Hn.early_only=!0)),null===e&&(o=n),e}var qn=n(12),jn=n(22),Hn={};if(null===i[r]()||o!==t.length){var Bn=Math.max(o,a),Fn=Bn<t.length?t.charAt(Bn):null,Gn=function(){for(var e=1,n=1,r=!1,i=0;i<Math.max(o,a);i++){var s=t.charAt(i);"\n"===s?(r||e++,n=1,r=!1):"\r"===s||"\u2028"===s||"\u2029"===s?(e++,n=1,r=!0):(n++,r=!1)}return{line:e,column:n}}();return new this.SyntaxError(function(e){e.sort();for(var t=null,n=[],r=0;r<e.length;r++)e[r]!==t&&(n.push(e[r]),t=e[r]);return n}(u),Fn,Bn,Gn.line,Gn.column),-1}return Hn},toSource:function(){return this._source},SyntaxError:function(t,n,r,i,o){this.name="SyntaxError",this.expected=t,this.found=n,this.message=function(t,n){var r;switch(t.length){case 0:r="end of input";break;case 1:r=t[0];break;default:r=t.slice(0,t.length-1).join(", ")+" or "+t[t.length-1]}return"Expected "+r+" but "+(n?e(n):"end of input")+" found."}(t,n),this.offset=r,this.line=i,this.column=o}};return t.SyntaxError.prototype=Error.prototype,t}()},function(e,t,n){"use strict";var r=!0,i=!0;function o(e,t,n){var r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}e.exports={extractVersion:o,wrapPeerConnectionEvent:function(e,t,n){if(e.RTCPeerConnection){var r=e.RTCPeerConnection.prototype,i=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return i.apply(this,arguments);var o=function(e){var t=n(e);t&&r(t)};return this._eventMap=this._eventMap||{},this._eventMap[r]=o,i.apply(this,[e,o])};var o=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[n])return o.apply(this,arguments);var r=this._eventMap[n];return delete this._eventMap[n],o.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get:function(){return this["_on"+t]},set:function(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}},disableLog:function(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(r=e,e?"adapter.js logging disabled":"adapter.js logging enabled")},disableWarnings:function(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(i=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))},log:function(){if("object"==typeof window){if(r)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}},deprecated:function(e,t){i&&console.warn(e+" is deprecated, please use "+t+" instead.")},detectBrowser:function(e){var t=e&&e.navigator,n={browser:null,version:null};if(void 0===e||!e.navigator)return n.browser="Not a browser.",n;if(t.mozGetUserMedia)n.browser="firefox",n.version=o(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia)n.browser="chrome",n.version=o(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))n.browser="edge",n.version=o(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return n.browser="Not a supported browser.",n;n.browser="safari",n.version=o(t.userAgent,/AppleWebKit\/(\d+)\./,1)}return n}}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=n(42),u=n(1),l=n(2),c=n(22),h=n(5),d=n(0)("JsSIP:SIPMessage"),f=function(){function e(t,n,r,i,o,a){if(s(this,e),!t||!n||!r)return null;i=i||{},this.ua=r,this.headers={},this.method=t,this.ruri=n,this.body=a,this.extraHeaders=l.cloneArray(o),i.route_set?this.setHeader("route",i.route_set):r.configuration.use_preloaded_route&&this.setHeader("route","<"+r.transport.sip_uri+";lr>"),this.setHeader("via",""),this.setHeader("max-forwards",u.MAX_FORWARDS);var h=i.to_display_name||0===i.to_display_name?'"'+i.to_display_name+'" ':"";h+="<"+(i.to_uri||n)+">",h+=i.to_tag?";tag="+i.to_tag:"",this.to=c.parse(h),this.setHeader("to",h);var d=void 0;d=i.from_display_name||0===i.from_display_name?'"'+i.from_display_name+'" ':r.configuration.display_name?'"'+r.configuration.display_name+'" ':"",d+="<"+(i.from_uri||r.configuration.uri)+">;tag=",d+=i.from_tag||l.newTag(),this.from=c.parse(d),this.setHeader("from",d);var f=i.call_id||r.configuration.jssip_id+l.createRandomToken(15);this.call_id=f,this.setHeader("call-id",f);var p=i.cseq||Math.floor(1e4*Math.random());this.cseq=p,this.setHeader("cseq",p+" "+t)}return r(e,[{key:"setHeader",value:function(e,t){for(var n=new RegExp("^\\s*"+e+"\\s*:","i"),r=0;r<this.extraHeaders.length;r++)n.test(this.extraHeaders[r])&&this.extraHeaders.splice(r,1);this.headers[l.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){var t=this.headers[l.headerize(e)];if(t){if(t[0])return t[0]}else{var n=new RegExp("^\\s*"+e+"\\s*:","i"),r=!0,i=!1,o=void 0;try{for(var s,a=this.extraHeaders[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;if(n.test(u))return u.substring(u.indexOf(":")+1).trim()}}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}}}},{key:"getHeaders",value:function(e){var t=this.headers[l.headerize(e)],n=[];if(t){var r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;n.push(u)}}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}var c=new RegExp("^\\s*"+e+"\\s*:","i"),h=!0,d=!1,f=void 0;try{for(var p,v=this.extraHeaders[Symbol.iterator]();!(h=(p=v.next()).done);h=!0){var m=p.value;c.test(m)&&n.push(m.substring(m.indexOf(":")+1).trim())}}catch(e){d=!0,f=e}finally{try{!h&&v.return&&v.return()}finally{if(d)throw f}}return n}},{key:"hasHeader",value:function(e){if(this.headers[l.headerize(e)])return!0;var t=new RegExp("^\\s*"+e+"\\s*:","i"),n=!0,r=!1,i=void 0;try{for(var o,s=this.extraHeaders[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value;if(t.test(a))return!0}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}return!1}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=a.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){var e=this.method+" "+this.ruri+" SIP/2.0\r\n";for(var t in this.headers)if(Object.prototype.hasOwnProperty.call(this.headers,t)){var n=!0,r=!1,i=void 0;try{for(var o,s=this.headers[t][Symbol.iterator]();!(n=(o=s.next()).done);n=!0){e+=t+": "+o.value+"\r\n"}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}}var a=!0,c=!1,h=void 0;try{for(var d,f=this.extraHeaders[Symbol.iterator]();!(a=(d=f.next()).done);a=!0){e+=d.value.trim()+"\r\n"}}catch(e){c=!0,h=e}finally{try{!a&&f.return&&f.return()}finally{if(c)throw h}}var p=[];switch(this.method){case u.REGISTER:p.push("path","gruu");break;case u.INVITE:this.ua.configuration.session_timers&&p.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&p.push("gruu"),p.push("ice","replaces");break;case u.UPDATE:this.ua.configuration.session_timers&&p.push("timer"),p.push("ice")}p.push("outbound");var v=this.ua.configuration.user_agent||u.USER_AGENT;(e+="Allow: "+u.ALLOWED_METHODS+"\r\n",e+="Supported: "+p+"\r\n",e+="User-Agent: "+v+"\r\n",this.body)?(e+="Content-Length: "+l.str_utf8_length(this.body)+"\r\n\r\n",e+=this.body):e+="Content-Length: 0\r\n\r\n";return e}},{key:"clone",value:function(){var t=new e(this.method,this.ruri,this.ua);return Object.keys(this.headers).forEach(function(e){t.headers[e]=this.headers[e].slice()},this),t.body=this.body,t.extraHeaders=l.cloneArray(this.extraHeaders),t.to=this.to,t.from=this.from,t.call_id=this.call_id,t.cseq=this.cseq,t}}]),e}(),p=function(e){function t(e,n,r,o,a){s(this,t);var l=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,u.INVITE,e,n,r,o,a));return l.transaction=null,l}return o(t,f),r(t,[{key:"cancel",value:function(e){this.transaction.cancel(e)}},{key:"clone",value:function(){var e=new t(this.ruri,this.ua);return Object.keys(this.headers).forEach(function(t){e.headers[t]=this.headers[t].slice()},this),e.body=this.body,e.extraHeaders=l.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e.transaction=this.transaction,e}}]),t}(),v=function(){function e(){s(this,e),this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null,this.sdp=null}return r(e,[{key:"addHeader",value:function(e,t){var n={raw:t};e=l.headerize(e),this.headers[e]?this.headers[e].push(n):this.headers[e]=[n]}},{key:"getHeader",value:function(e){var t=this.headers[l.headerize(e)];if(t)return t[0]?t[0].raw:void 0}},{key:"getHeaders",value:function(e){var t=this.headers[l.headerize(e)],n=[];if(!t)return[];var r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;n.push(u.raw)}}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}},{key:"hasHeader",value:function(e){return!!this.headers[l.headerize(e)]}},{key:"parseHeader",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(e=l.headerize(e),this.headers[e]){if(!(t>=this.headers[e].length)){var n=this.headers[e][t],r=n.raw;if(n.parsed)return n.parsed;var i=h.parse(r,e.replace(/-/g,"_"));return-1===i?(this.headers[e].splice(t,1),void d('error parsing "'+e+'" header field with value "'+r+'"')):(n.parsed=i,i)}d('not so many "'+e+'" headers present')}else d('header "'+e+'" not present')}},{key:"s",value:function(e,t){return this.parseHeader(e,t)}},{key:"setHeader",value:function(e,t){var n={raw:t};this.headers[l.headerize(e)]=[n]}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=a.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){return this.data}}]),e}(),m=function(e){function t(e){s(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.ua=e,n.headers={},n.ruri=null,n.transport=null,n.server_transaction=null,n}return o(t,v),r(t,[{key:"reply",value:function(e,t,n,r,i,o){var s=[],a=this.getHeader("To");if(t=t||null,!(e=e||null)||e<100||e>699)throw new TypeError("Invalid status_code: "+e);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: "+t);t=t||u.REASON_PHRASE[e]||"",n=l.cloneArray(n);var c="SIP/2.0 "+e+" "+t+"\r\n";if(this.method===u.INVITE&&e>100&&e<=200){var h=this.getHeaders("record-route"),d=!0,f=!1,p=void 0;try{for(var v,m=h[Symbol.iterator]();!(d=(v=m.next()).done);d=!0){c+="Record-Route: "+v.value+"\r\n"}}catch(e){f=!0,p=e}finally{try{!d&&m.return&&m.return()}finally{if(f)throw p}}}var _=this.getHeaders("via"),y=!0,g=!1,T=void 0;try{for(var C,S=_[Symbol.iterator]();!(y=(C=S.next()).done);y=!0){c+="Via: "+C.value+"\r\n"}}catch(e){g=!0,T=e}finally{try{!y&&S.return&&S.return()}finally{if(g)throw T}}!this.to_tag&&e>100?a+=";tag="+l.newTag():this.to_tag&&!this.s("to").hasParam("tag")&&(a+=";tag="+this.to_tag),c+="To: "+a+"\r\n",c+="From: "+this.getHeader("From")+"\r\n",c+="Call-ID: "+this.call_id+"\r\n",c+="CSeq: "+this.cseq+" "+this.method+"\r\n";var b=!0,E=!1,w=void 0;try{for(var R,A=n[Symbol.iterator]();!(b=(R=A.next()).done);b=!0){c+=R.value.trim()+"\r\n"}}catch(e){E=!0,w=e}finally{try{!b&&A.return&&A.return()}finally{if(E)throw w}}switch(this.method){case u.INVITE:this.ua.configuration.session_timers&&s.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&s.push("gruu"),s.push("ice","replaces");break;case u.UPDATE:this.ua.configuration.session_timers&&s.push("timer"),r&&s.push("ice"),s.push("replaces")}(s.push("outbound"),this.method===u.OPTIONS?(c+="Allow: "+u.ALLOWED_METHODS+"\r\n",c+="Accept: "+u.ACCEPTED_BODY_TYPES+"\r\n"):405===e?c+="Allow: "+u.ALLOWED_METHODS+"\r\n":415===e&&(c+="Accept: "+u.ACCEPTED_BODY_TYPES+"\r\n"),c+="Supported: "+s+"\r\n",r)?(c+="Content-Type: application/sdp\r\n",c+="Content-Length: "+l.str_utf8_length(r)+"\r\n\r\n",c+=r):c+="Content-Length: 0\r\n\r\n";this.server_transaction.receiveResponse(e,c,i,o)}},{key:"reply_sl",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.getHeaders("via");if(!e||e<100||e>699)throw new TypeError("Invalid status_code: "+e);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: "+t);var r="SIP/2.0 "+e+" "+(t=t||u.REASON_PHRASE[e]||"")+"\r\n",i=!0,o=!1,s=void 0;try{for(var a,c=n[Symbol.iterator]();!(i=(a=c.next()).done);i=!0){r+="Via: "+a.value+"\r\n"}}catch(e){o=!0,s=e}finally{try{!i&&c.return&&c.return()}finally{if(o)throw s}}var h=this.getHeader("To");!this.to_tag&&e>100?h+=";tag="+l.newTag():this.to_tag&&!this.s("to").hasParam("tag")&&(h+=";tag="+this.to_tag),r+="To: "+h+"\r\n",r+="From: "+this.getHeader("From")+"\r\n",r+="Call-ID: "+this.call_id+"\r\n",r+="CSeq: "+this.cseq+" "+this.method+"\r\n",r+="Content-Length: 0\r\n\r\n",this.transport.send(r)}}]),t}(),_=function(e){function t(){s(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.headers={},e.status_code=null,e.reason_phrase=null,e}return o(t,v),t}();e.exports={OutgoingRequest:f,InitialOutgoingInviteRequest:p,IncomingRequest:m,IncomingResponse:_}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(e){function t(e,n){r(this,t);var o=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.code=1,o.name="CONFIGURATION_ERROR",o.parameter=e,o.value=n,o.message=o.value?"Invalid value "+JSON.stringify(o.value)+' for parameter "'+o.parameter+'"':"Missing parameter: "+o.parameter,o}return o(t,Error),t}(),a=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.code=2,n.name="INVALID_STATE_ERROR",n.status=e,n.message="Invalid status: "+e,n}return o(t,Error),t}(),u=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.code=3,n.name="NOT_SUPPORTED_ERROR",n.message=e,n}return o(t,Error),t}(),l=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.code=4,n.name="NOT_READY_ERROR",n.message=e,n}return o(t,Error),t}();e.exports={ConfigurationError:s,InvalidStateError:a,NotSupportedError:u,NotReadyError:l}},function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,o,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=l(e))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return e}function h(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}.bind(r);return i.listener=n,r.wrapFn=i,i}function d(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):p(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var l=u.length,c=p(u,l);for(n=0;n<l;++n)o(c[n],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,h(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,h(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,i,o,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((n=r[i])===t||n.fn===t){r.splice(i,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){(function(e){var r,i=n(78),o=n(34),s=n(82),a=n(83),u=n(84);e&&e.ArrayBuffer&&(r=n(86));var l="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),c="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),h=l||c;t.protocol=3;var d=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},f=i(d),p={type:"error",data:"parser error"},v=n(87);function m(e,t,n){for(var r=new Array(e.length),i=a(e.length,n),o=function(e,n,i){t(n,function(t,n){r[e]=n,i(t,r)})},s=0;s<e.length;s++)o(s,e[s],i)}t.encodePacket=function(n,r,i,o){"function"==typeof r&&(o=r,r=!1),"function"==typeof i&&(o=i,i=null);var s=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&s instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var i=e.data,o=new Uint8Array(i),s=new Uint8Array(1+i.byteLength);s[0]=d[e.type];for(var a=0;a<o.length;a++)s[a+1]=o[a];return r(s.buffer)}(n,r,o);if(v&&s instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(h)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var i=new FileReader;return i.onload=function(){e.data=i.result,t.encodePacket(e,n,!0,r)},i.readAsArrayBuffer(e.data)}(e,n,r);var i=new Uint8Array(1);i[0]=d[e.type];var o=new v([i.buffer,e.data]);return r(o)}(n,r,o);if(s&&s.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,o);var a=d[n.type];return void 0!==n.data&&(a+=i?u.encode(String(n.data),{strict:!1}):String(n.data)),o(""+a)},t.encodeBase64Packet=function(n,r){var i,o="b"+t.packets[n.type];if(v&&n.data instanceof e.Blob){var s=new FileReader;return s.onload=function(){var e=s.result.split(",")[1];r(o+e)},s.readAsDataURL(n.data)}try{i=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var a=new Uint8Array(n.data),u=new Array(a.length),l=0;l<a.length;l++)u[l]=a[l];i=String.fromCharCode.apply(null,u)}return o+=e.btoa(i),r(o)},t.decodePacket=function(e,n,r){if(void 0===e)return p;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return p;var i=e.charAt(0);return Number(i)==i&&f[i]?e.length>1?{type:f[i],data:e.substring(1)}:{type:f[i]}:p}i=new Uint8Array(e)[0];var o=s(e,1);return v&&"blob"===n&&(o=new v([o])),{type:f[i],data:o}},t.decodeBase64Packet=function(e,t){var n=f[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var i=r.decode(e.substr(1));return"blob"===t&&v&&(i=new v([i])),{type:n,data:i}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var i=o(e);if(n&&i)return v&&!h?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!i&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var i;if("function"==typeof n&&(r=n,n=null),""===e)return r(p,0,1);for(var o,s,a="",u=0,l=e.length;u<l;u++){var c=e.charAt(u);if(":"===c){if(""===a||a!=(o=Number(a)))return r(p,0,1);if(a!=(s=e.substr(u+1,o)).length)return r(p,0,1);if(s.length){if(i=t.decodePacket(s,n,!1),p.type===i.type&&p.data===i.data)return r(p,0,1);if(!1===r(i,u+o,l))return}u+=o,a=""}else a+=c}return""!==a?r(p,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),i=new Uint8Array(r),o=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),s=0;s<e.length;s++)r[s]=e.charCodeAt(s);n=r.buffer}i[o++]=t?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)i[o++]=parseInt(a[s]);i[o++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)i[o++]=r[s]}),n(i.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),i=0;i<e.length;i++)r[i]=e.charCodeAt(i);e=r.buffer,t[0]=0}var o=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),s=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)s[i]=parseInt(o[i]);if(s[o.length]=255,v){var a=new v([t.buffer,s.buffer,e]);n(null,a)}})},function(e,t){return n(new v(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var i=e,o=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],l="",c=1;255!==a[c];c++){if(l.length>310)return r(p,0,1);l+=a[c]}i=s(i,2+l.length),l=parseInt(l);var h=s(i,0,l);if(u)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(e){var d=new Uint8Array(h);h="";for(c=0;c<d.length;c++)h+=String.fromCharCode(d[c])}o.push(h),i=s(i,l)}var f=o.length;o.forEach(function(e,i){r(t.decodePacket(e,n,!0),i,f)})}}).call(this,n(3))},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(2),s=n(5);e.exports=function(){function e(t,n,r,o){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!r)throw new TypeError('missing or invalid "host" parameter');for(var u in this._parameters={},this._headers={},this._scheme=t||i.SIP,this._user=n,this._host=r,this._port=o,s)Object.prototype.hasOwnProperty.call(s,u)&&this.setParam(u,s[u]);for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&this.setHeader(l,a[l])}return r(e,null,[{key:"parse",value:function(e){return-1!==(e=s.parse(e,"SIP_URI"))?e:void 0}}]),r(e,[{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"setHeader",value:function(e,t){this._headers[o.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){if(e)return this._headers[o.headerize(e)]}},{key:"hasHeader",value:function(e){if(e)return!!this._headers.hasOwnProperty(o.headerize(e))}},{key:"deleteHeader",value:function(e){if(e=o.headerize(e),this._headers.hasOwnProperty(e)){var t=this._headers[e];return delete this._headers[e],t}}},{key:"clearHeaders",value:function(){this._headers={}}},{key:"clone",value:function(){return new e(this._scheme,this._user,this._host,this._port,JSON.parse(JSON.stringify(this._parameters)),JSON.parse(JSON.stringify(this._headers)))}},{key:"toString",value:function(){var e=[],t=this._scheme+":";for(var n in this._user&&(t+=o.escapeUser(this._user)+"@"),t+=this._host,(this._port||0===this._port)&&(t+=":"+this._port),this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,n)&&(t+=";"+n,null!==this._parameters[n]&&(t+="="+this._parameters[n]));for(var r in this._headers)if(Object.prototype.hasOwnProperty.call(this._headers,r)){var i=!0,s=!1,a=void 0;try{for(var u,l=this._headers[r][Symbol.iterator]();!(i=(u=l.next()).done);i=!0){var c=u.value;e.push(r+"="+c)}}catch(e){s=!0,a=e}finally{try{!i&&l.return&&l.return()}finally{if(s)throw a}}}return e.length>0&&(t+="?"+e.join("&")),t}},{key:"toAor",value:function(e){var t=this._scheme+":";return this._user&&(t+=o.escapeUser(this._user)+"@"),t+=this._host,e&&(this._port||0===this._port)&&(t+=":"+this._port),t}},{key:"scheme",get:function(){return this._scheme},set:function(e){this._scheme=e.toLowerCase()}},{key:"user",get:function(){return this._user},set:function(e){this._user=e}},{key:"host",get:function(){return this._host},set:function(e){this._host=e.toLowerCase()}},{key:"port",get:function(){return this._port},set:function(e){this._port=0===e?e:parseInt(e,10)||null}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=n(9).EventEmitter,u=n(1),l=n(7),c=n(44),h=n(0)("JsSIP:NonInviteClientTransaction"),d=n(0)("JsSIP:InviteClientTransaction"),f=n(0)("JsSIP:AckClientTransaction"),p=n(0)("JsSIP:NonInviteServerTransaction"),v=n(0)("JsSIP:InviteServerTransaction"),m={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"},_=function(e){function t(e,n,r,s){i(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));a.type=m.NON_INVITE_CLIENT,a.id="z9hG4bK"+Math.floor(1e7*Math.random()),a.ua=e,a.transport=n,a.request=r,a.eventHandlers=s;var u="SIP/2.0/"+n.via_transport;return u+=" "+e.configuration.via_host+";branch="+a.id,a.request.setHeader("via",u),a.ua.newTransaction(a),a}return s(t,a),r(t,[{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(m.STATUS_TRYING),this.F=setTimeout(function(){e.timer_F()},c.TIMER_F),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){h("transport error occurred, deleting transaction "+this.id),clearTimeout(this.F),clearTimeout(this.K),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onTransportError()}},{key:"timer_F",value:function(){h("Timer F expired for transaction "+this.id),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout()}},{key:"timer_K",value:function(){this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"receiveResponse",value:function(e){var t=this,n=e.status_code;if(n<200)switch(this.state){case m.STATUS_TRYING:case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e)}else switch(this.state){case m.STATUS_TRYING:case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_COMPLETED),clearTimeout(this.F),408===n?this.eventHandlers.onRequestTimeout():this.eventHandlers.onReceiveResponse(e),this.K=setTimeout(function(){t.timer_K()},c.TIMER_K);break;case m.STATUS_COMPLETED:}}},{key:"C",get:function(){return m}}]),t}(),y=function(e){function t(e,n,r,s){i(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));a.type=m.INVITE_CLIENT,a.id="z9hG4bK"+Math.floor(1e7*Math.random()),a.ua=e,a.transport=n,a.request=r,a.eventHandlers=s,r.transaction=a;var u="SIP/2.0/"+n.via_transport;return u+=" "+e.configuration.via_host+";branch="+a.id,a.request.setHeader("via",u),a.ua.newTransaction(a),a}return s(t,a),r(t,[{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(m.STATUS_CALLING),this.B=setTimeout(function(){e.timer_B()},c.TIMER_B),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){clearTimeout(this.B),clearTimeout(this.D),clearTimeout(this.M),this.state!==m.STATUS_ACCEPTED&&(d("transport error occurred, deleting transaction "+this.id),this.eventHandlers.onTransportError()),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_M",value:function(){d("Timer M expired for transaction "+this.id),this.state===m.STATUS_ACCEPTED&&(clearTimeout(this.B),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"timer_B",value:function(){d("Timer B expired for transaction "+this.id),this.state===m.STATUS_CALLING&&(this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout())}},{key:"timer_D",value:function(){d("Timer D expired for transaction "+this.id),clearTimeout(this.B),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"sendACK",value:function(e){var t=this,n=new l.OutgoingRequest(u.ACK,this.request.ruri,this.ua,{route_set:this.request.getHeader("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});n.setHeader("from",this.request.getHeader("from")),n.setHeader("via",this.request.getHeader("via")),n.setHeader("to",e.getHeader("to")),this.D=setTimeout(function(){t.timer_D()},c.TIMER_D),this.transport.send(n)}},{key:"cancel",value:function(e){if(this.state===m.STATUS_PROCEEDING){var t=new l.OutgoingRequest(u.CANCEL,this.request.ruri,this.ua,{route_set:this.request.getHeader("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",this.request.getHeader("to")),e&&t.setHeader("reason",e),this.transport.send(t)}}},{key:"receiveResponse",value:function(e){var t=this,n=e.status_code;if(n>=100&&n<=199)switch(this.state){case m.STATUS_CALLING:this.stateChanged(m.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e);break;case m.STATUS_PROCEEDING:this.eventHandlers.onReceiveResponse(e)}else if(n>=200&&n<=299)switch(this.state){case m.STATUS_CALLING:case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_ACCEPTED),this.M=setTimeout(function(){t.timer_M()},c.TIMER_M),this.eventHandlers.onReceiveResponse(e);break;case m.STATUS_ACCEPTED:this.eventHandlers.onReceiveResponse(e)}else if(n>=300&&n<=699)switch(this.state){case m.STATUS_CALLING:case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_COMPLETED),this.sendACK(e),this.eventHandlers.onReceiveResponse(e);break;case m.STATUS_COMPLETED:this.sendACK(e)}}},{key:"C",get:function(){return m}}]),t}(),g=function(e){function t(e,n,r,s){i(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));a.id="z9hG4bK"+Math.floor(1e7*Math.random()),a.transport=n,a.request=r,a.eventHandlers=s;var u="SIP/2.0/"+n.via_transport;return u+=" "+e.configuration.via_host+";branch="+a.id,a.request.setHeader("via",u),a}return s(t,a),r(t,[{key:"send",value:function(){this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){f("transport error occurred for transaction "+this.id),this.eventHandlers.onTransportError()}},{key:"C",get:function(){return m}}]),t}(),T=function(e){function t(e,n,r){i(this,t);var s=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return s.type=m.NON_INVITE_SERVER,s.id=r.via_branch,s.ua=e,s.transport=n,s.request=r,s.last_response="",r.server_transaction=s,s.state=m.STATUS_TRYING,e.newTransaction(s),s}return s(t,a),r(t,[{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_J",value:function(){p("Timer J expired for transaction "+this.id),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,p("transport error occurred, deleting transaction "+this.id),clearTimeout(this.J),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"receiveResponse",value:function(e,t,n,r){var i=this;if(100===e)switch(this.state){case m.STATUS_TRYING:this.stateChanged(m.STATUS_PROCEEDING),this.transport.send(t)||this.onTransportError();break;case m.STATUS_PROCEEDING:this.last_response=t,this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=200&&e<=699)switch(this.state){case m.STATUS_TRYING:case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_COMPLETED),this.last_response=t,this.J=setTimeout(function(){i.timer_J()},c.TIMER_J),this.transport.send(t)?n&&n():(this.onTransportError(),r&&r());break;case m.STATUS_COMPLETED:}}},{key:"C",get:function(){return m}}]),t}(),C=function(e){function t(e,n,r){i(this,t);var s=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return s.type=m.INVITE_SERVER,s.id=r.via_branch,s.ua=e,s.transport=n,s.request=r,s.last_response="",r.server_transaction=s,s.state=m.STATUS_PROCEEDING,e.newTransaction(s),s.resendProvisionalTimer=null,r.reply(100),s}return s(t,a),r(t,[{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_H",value:function(){v("Timer H expired for transaction "+this.id),this.state===m.STATUS_COMPLETED&&v("ACK not received, dialog will be terminated"),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_I",value:function(){this.stateChanged(m.STATUS_TERMINATED)}},{key:"timer_L",value:function(){v("Timer L expired for transaction "+this.id),this.state===m.STATUS_ACCEPTED&&(this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,v("transport error occurred, deleting transaction "+this.id),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),clearTimeout(this.L),clearTimeout(this.H),clearTimeout(this.I),this.stateChanged(m.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"resend_provisional",value:function(){this.transport.send(this.last_response)||this.onTransportError()}},{key:"receiveResponse",value:function(e,t,n,r){var i=this;if(e>=100&&e<=199)switch(this.state){case m.STATUS_PROCEEDING:this.transport.send(t)||this.onTransportError(),this.last_response=t}if(e>100&&e<=199&&this.state===m.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=setInterval(function(){i.resend_provisional()},c.PROVISIONAL_RESPONSE_INTERVAL));else if(e>=200&&e<=299)switch(this.state){case m.STATUS_PROCEEDING:this.stateChanged(m.STATUS_ACCEPTED),this.last_response=t,this.L=setTimeout(function(){i.timer_L()},c.TIMER_L),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case m.STATUS_ACCEPTED:this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=300&&e<=699)switch(this.state){case m.STATUS_PROCEEDING:null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(t)?(this.stateChanged(m.STATUS_COMPLETED),this.H=setTimeout(function(){i.timer_H()},c.TIMER_H),n&&n()):(this.onTransportError(),r&&r())}}},{key:"C",get:function(){return m}}]),t}();e.exports={C:m,NonInviteClientTransaction:_,InviteClientTransaction:y,AckClientTransaction:g,NonInviteServerTransaction:T,InviteServerTransaction:C,checkTransaction:function(e,t){var n=e._transactions,r=void 0;switch(t.method){case u.INVITE:if(r=n.ist[t.via_branch]){switch(r.state){case m.STATUS_PROCEEDING:r.transport.send(r.last_response);break;case m.STATUS_ACCEPTED:}return!0}break;case u.ACK:if(!(r=n.ist[t.via_branch]))return!1;if(r.state===m.STATUS_ACCEPTED)return!1;if(r.state===m.STATUS_COMPLETED)return r.state=m.STATUS_CONFIRMED,r.I=setTimeout(function(){r.timer_I()},c.TIMER_I),!0;break;case u.CANCEL:return(r=n.ist[t.via_branch])?(t.reply_sl(200),r.state!==m.STATUS_PROCEEDING):(t.reply_sl(481),!0);default:if(r=n.nist[t.via_branch]){switch(r.state){case m.STATUS_TRYING:break;case m.STATUS_PROCEEDING:case m.STATUS_COMPLETED:r.transport.send(r.last_response)}return!0}}}}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,i=n.length;r<i;r++){var o=n[r].split("=");t[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(114),s=n(13),a=n(0)("JsSIP:RequestSender"),u={onRequestTimeout:function(){},onTransportError:function(){},onReceiveResponse:function(){},onAuthenticated:function(){}};e.exports=function(){function e(t,n,r){for(var o in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ua=t,this._eventHandlers=r,this._method=n.method,this._request=n,this._auth=null,this._challenged=!1,this._staled=!1,u)Object.prototype.hasOwnProperty.call(u,o)&&(this._eventHandlers[o]||(this._eventHandlers[o]=u[o]));t.status!==t.C.STATUS_USER_CLOSED||this._method===i.BYE&&this._method===i.ACK||this._eventHandlers.onTransportError()}return r(e,[{key:"send",value:function(){var e=this,t={onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onReceiveResponse:function(t){e._receiveResponse(t)}};switch(this._method){case"INVITE":this.clientTransaction=new s.InviteClientTransaction(this._ua,this._ua.transport,this._request,t);break;case"ACK":this.clientTransaction=new s.AckClientTransaction(this._ua,this._ua.transport,this._request,t);break;default:this.clientTransaction=new s.NonInviteClientTransaction(this._ua,this._ua.transport,this._request,t)}this.clientTransaction.send()}},{key:"_receiveResponse",value:function(e){var t=void 0,n=void 0,r=e.status_code;if(401!==r&&407!==r||null===this._ua.configuration.password&&null===this._ua.configuration.ha1)this._eventHandlers.onReceiveResponse(e);else{if(401===e.status_code?(t=e.parseHeader("www-authenticate"),n="authorization"):(t=e.parseHeader("proxy-authenticate"),n="proxy-authorization"),!t)return a(e.status_code+" with wrong or missing challenge, cannot authenticate"),void this._eventHandlers.onReceiveResponse(e);if(!this._challenged||!this._staled&&!0===t.stale){if(this._auth||(this._auth=new o({username:this._ua.configuration.authorization_user,password:this._ua.configuration.password,realm:this._ua.configuration.realm,ha1:this._ua.configuration.ha1})),!this._auth.authenticate(this._request,t))return void this._eventHandlers.onReceiveResponse(e);this._challenged=!0,this._ua.set("realm",this._auth.get("realm")),this._ua.set("ha1",this._auth.get("ha1")),t.stale&&(this._staled=!0),this._request=this._request.clone(),this._request.cseq+=1,this._request.setHeader("cseq",this._request.cseq+" "+this._method),this._request.setHeader(n,this._auth.toString()),this._eventHandlers.onAuthenticated(this._request),this.send()}else this._eventHandlers.onReceiveResponse(e)}}}]),e}()},function(e,t,n){"use strict";(function(t){var r=n(4),i=n(53),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=n(25):void 0!==t&&(a=n(25)),a),transformRequest:[function(e,t){return i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(o)}),e.exports=u}).call(this,n(24))},function(e,t,n){var r=n(0)("socket.io-parser"),i=n(10),o=n(73),s=n(14),a=n(30);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=h;var l=t.ERROR+'"encode error"';function c(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var i=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===i)return l;n+=i}return r("encoded %j as %s",e,n),n}function h(){this.reconstructor=null}function d(e){this.reconPack=e,this.buffers=[]}function f(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){o.removeBlobs(e,function(e){var n=o.deconstructPacket(e),r=c(n.packet),i=n.buffers;i.unshift(r),t(i)})}(e,n):n([c(e)])},i(h.prototype),h.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,i={type:Number(e.charAt(0))};if(null==t.types[i.type])return f("unknown packet type "+i.type);if(t.BINARY_EVENT===i.type||t.BINARY_ACK===i.type){for(var o="";"-"!==e.charAt(++n)&&(o+=e.charAt(n),n!=e.length););if(o!=Number(o)||"-"!==e.charAt(n))throw new Error("Illegal attachments");i.attachments=Number(o)}if("/"===e.charAt(n+1))for(i.nsp="";++n;){var a=e.charAt(n);if(","===a)break;if(i.nsp+=a,n===e.length)break}else i.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(i.id="";++n;){var a=e.charAt(n);if(null==a||Number(a)!=a){--n;break}if(i.id+=e.charAt(n),n===e.length)break}i.id=Number(i.id)}if(e.charAt(++n)){var l=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),c=!1!==l&&(i.type===t.ERROR||s(l));if(!c)return f("invalid payload");i.data=l}return r("decoded %s as %j",e,i),i}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new d(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},h.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},d.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},d.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){(function(t){var r=n(76);e.exports=function(e){var n=e.xdomain,i=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!i&&o)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(3))},function(e,t,n){var r=n(11),i=n(10);function o(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=o,i(o.prototype),o.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},o.prototype.onPacket=function(e){this.emit("packet",e)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(12),o=n(5);e.exports=function(){function e(t,n,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t&&t instanceof i))throw new TypeError('missing or invalid "uri" parameter');for(var o in this._uri=t,this._parameters={},this._display_name=n,r)Object.prototype.hasOwnProperty.call(r,o)&&this.setParam(o,r[o])}return r(e,null,[{key:"parse",value:function(e){return-1!==(e=o.parse(e,"Name_Addr_Header"))?e:void 0}}]),r(e,[{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"clone",value:function(){return new e(this._uri.clone(),this._display_name,JSON.parse(JSON.stringify(this._parameters)))}},{key:"toString",value:function(){var e=this._display_name||0===this._display_name?'"'+this._display_name+'" ':"";for(var t in e+="<"+this._uri.toString()+">",this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,t)&&(e+=";"+t,null!==this._parameters[t]&&(e+="="+this._parameters[t]));return e}},{key:"uri",get:function(){return this._uri}},{key:"display_name",get:function(){return this._display_name},set:function(e){this._display_name=0===e?"0":e}}]),e}()},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,l=[],c=!1,h=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&f())}function f(){if(!c){var e=a(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++h<t;)u&&u[h].run();h=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||c||a(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(4),i=n(54),o=n(56),s=n(57),a=n(58),u=n(26),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(59);e.exports=function(e){return new Promise(function(t,c){var h=e.data,d=e.headers;r.isFormData(h)&&delete d["Content-Type"];var f=new XMLHttpRequest,p="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in f||a(e.url)||(f=new window.XDomainRequest,p="onload",v=!0,f.onprogress=function(){},f.ontimeout=function(){}),e.auth){var m=e.auth.username||"",_=e.auth.password||"";d.Authorization="Basic "+l(m+":"+_)}if(f.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f[p]=function(){if(f&&(4===f.readyState||v)&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?s(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:1223===f.status?204:f.status,statusText:1223===f.status?"No Content":f.statusText,headers:n,config:e,request:f};i(t,c,r),f=null}},f.onerror=function(){c(u("Network Error",e,null,f)),f=null},f.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var y=n(60),g=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in f&&r.forEach(d,function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete d[t]:f.setRequestHeader(t,e)}),e.withCredentials&&(f.withCredentials=!0),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){f&&(f.abort(),c(e),f=null)}),void 0===h&&(h=null),f.send(h)})}},function(e,t,n){"use strict";var r=n(55);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,i=e.indexOf("["),o=e.indexOf("]");-1!=i&&-1!=o&&(e=e.substring(0,i)+e.substring(i,o).replace(/:/g,";")+e.substring(o,e.length));for(var s=n.exec(e||""),a={},u=14;u--;)a[r[u]]=s[u]||"";return-1!=i&&-1!=o&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||i(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,i=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(3))},function(e,t,n){var r=n(74),i=n(37),o=n(10),s=n(19),a=n(38),u=n(39),l=n(0)("socket.io-client:manager"),c=n(36),h=n(92),d=Object.prototype.hasOwnProperty;function f(e,t){if(!(this instanceof f))return new f(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=f,f.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)d.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},f.prototype.updateSocketIds=function(){for(var e in this.nsps)d.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},f.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},o(f.prototype),f.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},f.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},f.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},f.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},f.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},f.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},f.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},f.prototype.open=f.prototype.connect=function(e,t){if(l("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var o=a(n,"open",function(){i.onopen(),e&&e()}),s=a(n,"error",function(t){if(l("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else i.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;l("connect attempt will timeout after %d",u);var c=setTimeout(function(){l("connect attempt timed out after %d",u),o.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(o),this.subs.push(s),this},f.prototype.onopen=function(){l("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(a(e,"data",u(this,"ondata"))),this.subs.push(a(e,"ping",u(this,"onping"))),this.subs.push(a(e,"pong",u(this,"onpong"))),this.subs.push(a(e,"error",u(this,"onerror"))),this.subs.push(a(e,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},f.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},f.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},f.prototype.ondata=function(e){this.decoder.add(e)},f.prototype.ondecoded=function(e){this.emit("packet",e)},f.prototype.onerror=function(e){l("error",e),this.emitAll("error",e)},f.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new i(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",o),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&o()}function o(){~c(r.connecting,n)||r.connecting.push(n)}return n},f.prototype.destroy=function(e){var t=c(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},f.prototype.packet=function(e){l("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},f.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},f.prototype.cleanup=function(){l("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},f.prototype.close=f.prototype.disconnect=function(){l("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},f.prototype.onclose=function(e){l("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},f.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();l("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(l("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(l("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(l("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},f.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(e){var r=n(20),i=n(77),o=n(88),s=n(89);t.polling=function(t){var n=!1,s=!1,a=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,l=location.port;l||(l=u?443:80),n=t.hostname!==location.hostname||l!==t.port,s=t.secure!==u}if(t.xdomain=n,t.xscheme=s,"open"in new r(t)&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new o(t)},t.websocket=s}).call(this,n(3))},function(e,t,n){var r=n(21),i=n(15),o=n(11),s=n(16),a=n(35),u=n(0)("engine.io-client:polling");e.exports=c;var l=null!=new(n(20))({xdomain:!1}).responseType;function c(e){var t=e&&e.forceBase64;l&&!t||(this.supportsBinary=!1),r.call(this,e)}s(c,r),c.prototype.name="polling",c.prototype.doOpen=function(){this.poll()},c.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},c.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},c.prototype.onData=function(e){var t=this;u("polling got data %s",e);o.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},c.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},c.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};o.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},c.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=a()),this.supportsBinary||e.sid||(e.b64=1),e=i.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(t){var r=n(14),i=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var i=0,a=n.length;i<a;i++)if(e(n[i]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||o&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(79).Buffer)},function(e,t,n){"use strict";var r,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),o=64,s={},a=0,u=0;function l(e){var t="";do{t=i[e%o]+t,e=Math.floor(e/o)}while(e>0);return t}function c(){var e=l(+new Date);return e!==r?(a=0,r=e):e+"."+l(a++)}for(;u<o;u++)s[i[u]]=u;c.encode=l,c.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*o+s[e.charAt(u)];return t},e.exports=c},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(19),i=n(10),o=n(91),s=n(38),a=n(39),u=n(0)("socket.io-client:socket"),l=n(15),c=n(34);e.exports=f;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=i.prototype.emit;function f(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(f.prototype),f.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",a(this,"onopen")),s(e,"packet",a(this,"onpacket")),s(e,"close",a(this,"onclose"))]}},f.prototype.open=f.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},f.prototype.send=function(){var e=o(arguments);return e.unshift("message"),this.emit.apply(this,e),this},f.prototype.emit=function(e){if(h.hasOwnProperty(e))return d.apply(this,arguments),this;var t=o(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:c(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},f.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},f.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?l.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},f.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},f.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},f.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?d.apply(this,t):this.receiveBuffer.push(t)},f.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var i=o(arguments);u("sending ack %j",i),t.packet({type:c(i)?r.BINARY_ACK:r.ACK,id:e,data:i})}}},f.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},f.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},f.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)d.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},f.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},f.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},f.prototype.close=f.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},f.prototype.compress=function(e){return this.flags.compress=e,this},f.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t,n){"use strict";var r={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};r.localCName=r.generateIdentifier(),r.splitLines=function(e){return e.trim().split("\n").map(function(e){return e.trim()})},r.splitSections=function(e){return e.split("\nm=").map(function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"})},r.getDescription=function(e){var t=r.splitSections(e);return t&&t[0]},r.getMediaSections=function(e){var t=r.splitSections(e);return t.shift(),t},r.matchPrefix=function(e,t){return r.splitLines(e).filter(function(e){return 0===e.indexOf(t)})},r.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},r.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},r.parseIceOptions=function(e){return e.substr(14).split(" ")},r.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},r.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},r.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},r.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},r.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),i=0;i<r.length;i++)n[(t=r[i].trim().split("="))[0].trim()]=t[1];return n},r.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach(function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)}),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},r.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},r.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach(function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"}),t},r.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},r.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map(function(e){return parseInt(e,10)})}},r.getMid=function(e){var t=r.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},r.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},r.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:r.matchPrefix(e+t,"a=fingerprint:").map(r.parseFingerprint)}},r.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach(function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"}),n},r.getIceParameters=function(e,t){var n=r.splitLines(e);return{usernameFragment:(n=n.concat(r.splitLines(t))).filter(function(e){return 0===e.indexOf("a=ice-ufrag:")})[0].substr(12),password:n.filter(function(e){return 0===e.indexOf("a=ice-pwd:")})[0].substr(10)}},r.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},r.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},n=r.splitLines(e)[0].split(" "),i=3;i<n.length;i++){var o=n[i],s=r.matchPrefix(e,"a=rtpmap:"+o+" ")[0];if(s){var a=r.parseRtpMap(s),u=r.matchPrefix(e,"a=fmtp:"+o+" ");switch(a.parameters=u.length?r.parseFmtp(u[0]):{},a.rtcpFeedback=r.matchPrefix(e,"a=rtcp-fb:"+o+" ").map(r.parseRtcpFb),t.codecs.push(a),a.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(a.name.toUpperCase())}}}return r.matchPrefix(e,"a=extmap:").forEach(function(e){t.headerExtensions.push(r.parseExtmap(e))}),t},r.writeRtpDescription=function(e,t){var n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" UDP/TLS/RTP/SAVPF ",n+=t.codecs.map(function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType}).join(" ")+"\r\n",n+="c=IN IP4 0.0.0.0\r\n",n+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach(function(e){n+=r.writeRtpMap(e),n+=r.writeFmtp(e),n+=r.writeRtcpFb(e)});var i=0;return t.codecs.forEach(function(e){e.maxptime>i&&(i=e.maxptime)}),i>0&&(n+="a=maxptime:"+i+"\r\n"),n+="a=rtcp-mux\r\n",t.headerExtensions&&t.headerExtensions.forEach(function(e){n+=r.writeExtmap(e)}),n},r.parseRtpEncodingParameters=function(e){var t,n=[],i=r.parseRtpParameters(e),o=-1!==i.fecMechanisms.indexOf("RED"),s=-1!==i.fecMechanisms.indexOf("ULPFEC"),a=r.matchPrefix(e,"a=ssrc:").map(function(e){return r.parseSsrcMedia(e)}).filter(function(e){return"cname"===e.attribute}),u=a.length>0&&a[0].ssrc,l=r.matchPrefix(e,"a=ssrc-group:FID").map(function(e){return e.substr(17).split(" ").map(function(e){return parseInt(e,10)})});l.length>0&&l[0].length>1&&l[0][0]===u&&(t=l[0][1]),i.codecs.forEach(function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var r={ssrc:u,codecPayloadType:parseInt(e.parameters.apt,10)};u&&t&&(r.rtx={ssrc:t}),n.push(r),o&&((r=JSON.parse(JSON.stringify(r))).fec={ssrc:u,mechanism:s?"red+ulpfec":"red"},n.push(r))}}),0===n.length&&u&&n.push({ssrc:u});var c=r.matchPrefix(e,"b=");return c.length&&(c=0===c[0].indexOf("b=TIAS:")?parseInt(c[0].substr(7),10):0===c[0].indexOf("b=AS:")?1e3*parseInt(c[0].substr(5),10)*.95-16e3:void 0,n.forEach(function(e){e.maxBitrate=c})),n},r.parseRtcpParameters=function(e){var t={},n=r.matchPrefix(e,"a=ssrc:").map(function(e){return r.parseSsrcMedia(e)}).filter(function(e){return"cname"===e.attribute})[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);var i=r.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=i.length>0,t.compound=0===i.length;var o=r.matchPrefix(e,"a=rtcp-mux");return t.mux=o.length>0,t},r.parseMsid=function(e){var t,n=r.matchPrefix(e,"a=msid:");if(1===n.length)return{stream:(t=n[0].substr(7).split(" "))[0],track:t[1]};var i=r.matchPrefix(e,"a=ssrc:").map(function(e){return r.parseSsrcMedia(e)}).filter(function(e){return"msid"===e.attribute});return i.length>0?{stream:(t=i[0].value.split(" "))[0],track:t[1]}:void 0},r.generateSessionId=function(){return Math.random().toString().substr(2,21)},r.writeSessionBoilerplate=function(e,t,n){var i=void 0!==t?t:2;return"v=0\r\no="+(n||"thisisadapterortc")+" "+(e||r.generateSessionId())+" "+i+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},r.writeMediaSection=function(e,t,n,i){var o=r.writeRtpDescription(e.kind,t);if(o+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),o+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":"active"),o+="a=mid:"+e.mid+"\r\n",e.direction?o+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?o+="a=sendrecv\r\n":e.rtpSender?o+="a=sendonly\r\n":e.rtpReceiver?o+="a=recvonly\r\n":o+="a=inactive\r\n",e.rtpSender){var s="msid:"+i.id+" "+e.rtpSender.track.id+"\r\n";o+="a="+s,o+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(o+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,o+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return o+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(o+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),o},r.getDirection=function(e,t){for(var n=r.splitLines(e),i=0;i<n.length;i++)switch(n[i]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[i].substr(2)}return t?r.getDirection(t):"sendrecv"},r.getKind=function(e){return r.splitLines(e)[0].split(" ")[0].substr(2)},r.isRejected=function(e){return"0"===e.split(" ",2)[1]},r.parseMLine=function(e){var t=r.splitLines(e)[0].substr(2).split(" ");return{kind:t[0],port:parseInt(t[1],10),protocol:t[2],fmt:t.slice(3).join(" ")}},r.parseOLine=function(e){var t=r.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:t[0],sessionId:t[1],sessionVersion:parseInt(t[2],10),netType:t[3],addressType:t[4],address:t[5]}},r.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var t=r.splitLines(e),n=0;n<t.length;n++)if(t[n].length<2||"="!==t[n].charAt(1))return!1;return!0},e.exports=r},function(e){e.exports={name:"jssip",title:"JsSIP",description:"the Javascript SIP library",version:"3.2.12",homepage:"http://jssip.net",author:"José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)",contributors:["Iñaki Baz Castillo <ibc@aliax.net> (https://github.com/ibc)","Saúl Ibarra Corretgé <saghul@gmail.com> (https://github.com/saghul)"],main:"lib-es5/JsSIP.js",keywords:["sip","websocket","webrtc","node","browser","library"],license:"MIT",repository:{type:"git",url:"https://github.com/versatica/JsSIP.git"},bugs:{url:"https://github.com/versatica/JsSIP/issues"},dependencies:{debug:"^3.1.0",events:"^3.0.0","sdp-transform":"^2.4.1","webrtc-adapter":"^6.3.2"},devDependencies:{"ansi-colors":"^3.0.5","babel-core":"^6.26.3","babel-preset-env":"^1.7.0",browserify:"^16.2.2",eslint:"^5.6.0","fancy-log":"^1.3.2",gulp:"^4.0.0","gulp-babel":"^7.0.1","gulp-eslint":"^5.0.0","gulp-expect-file":"^1.0.0","gulp-header":"^2.0.5","gulp-nodeunit-runner":"^0.2.2","gulp-plumber":"^1.2.0","gulp-rename":"^1.4.0","gulp-uglify":"^3.0.1",pegjs:"^0.7.0","vinyl-buffer":"^1.0.1","vinyl-source-stream":"^2.0.0"},scripts:{test:"gulp test",prepublishOnly:"gulp babel"}}},function(e,t,n){var r=n(112),i=n(113);t.write=i,t.parse=r.parse,t.parseFmtpConfig=r.parseFmtpConfig,t.parseParams=r.parseParams,t.parsePayloads=r.parsePayloads,t.parseRemoteCandidates=r.parseRemoteCandidates,t.parseImageAttributes=r.parseImageAttributes,t.parseSimulcastStreamList=r.parseSimulcastStreamList},function(e,t){var n=e.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%d trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/,names:["value","direction","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+" %s"+(e.config?" %s":"")}},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),t+=null!=e["network-id"]?" network-id %d":"%v",t+=null!=e["network-cost"]?" network-cost %d":"%v"}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{push:"invalid",names:["value"]}]};Object.keys(n).forEach(function(e){n[e].forEach(function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")})})},function(e,t,n){"use strict";var r=500;e.exports={T1:r,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=n(9).EventEmitter,s=n(42),a=n(1),u=n(8),l=n(13),c=n(2),h=n(44),d=n(7),f=n(115),p=n(17),v=n(117),m=n(118),_=n(119),y=n(120),g=n(0)("JsSIP:RTCSession"),T=n(0)("JsSIP:ERROR:RTCSession");T.log=console.warn.bind(console);var C={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_ACK:6,STATUS_CANCELED:7,STATUS_TERMINATED:8,STATUS_CONFIRMED:9},S=["audio","video"];e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),g("new");var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._id=null,n._ua=e,n._status=C.STATUS_NULL,n._dialog=null,n._earlyDialogs={},n._contact=null,n._from_tag=null,n._to_tag=null,n._connection=null,n._connectionPromiseQueue=Promise.resolve(),n._request=null,n._is_canceled=!1,n._cancel_reason="",n._is_confirmed=!1,n._late_sdp=!1,n._rtcOfferConstraints=null,n._rtcAnswerConstraints=null,n._localMediaStream=null,n._localMediaStreamLocallyGenerated=!1,n._rtcReady=!0,n._timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null},n._direction=null,n._local_identity=null,n._remote_identity=null,n._start_time=null,n._end_time=null,n._tones=null,n._audioMuted=!1,n._videoMuted=!1,n._localHold=!1,n._remoteHold=!1,n._sessionTimers={enabled:n._ua.configuration.session_timers,refreshMethod:n._ua.configuration.session_timers_refresh_method,defaultExpires:a.SESSION_EXPIRES,currentExpires:null,running:!1,refresher:!1,timer:null},n._referSubscribers={},n._data={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o),i(t,null,[{key:"C",get:function(){return C}}]),i(t,[{key:"isInProgress",value:function(){switch(this._status){case C.STATUS_NULL:case C.STATUS_INVITE_SENT:case C.STATUS_1XX_RECEIVED:case C.STATUS_INVITE_RECEIVED:case C.STATUS_WAITING_FOR_ANSWER:return!0;default:return!1}}},{key:"isEstablished",value:function(){switch(this._status){case C.STATUS_ANSWERED:case C.STATUS_WAITING_FOR_ACK:case C.STATUS_CONFIRMED:return!0;default:return!1}}},{key:"isEnded",value:function(){switch(this._status){case C.STATUS_CANCELED:case C.STATUS_TERMINATED:return!0;default:return!1}}},{key:"isMuted",value:function(){return{audio:this._audioMuted,video:this._videoMuted}}},{key:"isOnHold",value:function(){return{local:this._localHold,remote:this._remoteHold}}},{key:"connect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];g("connect()");var r=e,i=t.eventHandlers||{},o=c.cloneArray(t.extraHeaders),s=t.mediaConstraints||{audio:!0,video:!0},l=t.mediaStream||null,h=t.pcConfig||{iceServers:[]},f=t.rtcConstraints||null,p=t.rtcOfferConstraints||null;if(this._rtcOfferConstraints=p,this._rtcAnswerConstraints=t.rtcAnswerConstraints||null,this._data=t.data||this._data,void 0===e)throw new TypeError("Not enough arguments");if(this._status!==C.STATUS_NULL)throw new u.InvalidStateError(this._status);if(!window.RTCPeerConnection)throw new u.NotSupportedError("WebRTC not supported");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: "+r);for(var v in this._sessionTimers.enabled&&c.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=a.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=a.SESSION_EXPIRES),i)Object.prototype.hasOwnProperty.call(i,v)&&this.on(v,i[v]);this._from_tag=c.newTag();var m=t.anonymous||!1,_={from_tag:this._from_tag};this._contact=this._ua.contact.toString({anonymous:m,outbound:!0}),m&&(_.from_display_name="Anonymous",_.from_uri="sip:anonymous@anonymous.invalid",o.push("P-Preferred-Identity: "+this._ua.configuration.uri.toString()),o.push("Privacy: id")),o.push("Contact: "+this._contact),o.push("Content-Type: application/sdp"),this._sessionTimers.enabled&&o.push("Session-Expires: "+this._sessionTimers.defaultExpires),this._request=new d.InitialOutgoingInviteRequest(e,this._ua,_,o),this._id=this._request.call_id+this._from_tag,this._createRTCConnection(h,f),this._direction="outgoing",this._local_identity=this._request.from,this._remote_identity=this._request.to,n&&n(this),this._newRTCSession("local",this._request),this._sendInitialRequest(s,p,l)}},{key:"init_incoming",value:function(e,t){var n=this;g("init_incoming()");var r=void 0,i=e.getHeader("Content-Type");e.body&&"application/sdp"!==i?e.reply(415):(this._status=C.STATUS_INVITE_RECEIVED,this._from_tag=e.from_tag,this._id=e.call_id+this._from_tag,this._request=e,this._contact=this._ua.contact.toString(),e.hasHeader("expires")&&(r=1e3*e.getHeader("expires")),e.to_tag=c.newTag(),this._createDialog(e,"UAS",!0)?(e.body?this._late_sdp=!1:this._late_sdp=!0,this._status=C.STATUS_WAITING_FOR_ANSWER,this._timers.userNoAnswerTimer=setTimeout(function(){e.reply(408),n._failed("local",null,a.causes.NO_ANSWER)},this._ua.configuration.no_answer_timeout),r&&(this._timers.expiresTimer=setTimeout(function(){n._status===C.STATUS_WAITING_FOR_ANSWER&&(e.reply(487),n._failed("system",null,a.causes.EXPIRES))},r)),this._direction="incoming",this._local_identity=e.to,this._remote_identity=e.from,t&&t(this),this._newRTCSession("remote",e),this._status!==C.STATUS_TERMINATED&&(e.reply(180,null,["Contact: "+this._contact]),this._progress("local",null))):e.reply(500,"Missing Contact header field"))}},{key:"answer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g("answer()");var n=this._request,r=c.cloneArray(t.extraHeaders),i=t.mediaConstraints||{},o=t.mediaStream||null,s=t.pcConfig||{iceServers:[]},l=t.rtcConstraints||null,h=t.rtcAnswerConstraints||null,d=void 0,f=!1,p=!1,v=!1,m=!1;if(this._rtcAnswerConstraints=h,this._rtcOfferConstraints=t.rtcOfferConstraints||null,this._data=t.data||this._data,"incoming"!==this._direction)throw new u.NotSupportedError('"answer" not supported for outgoing RTCSession');if(this._status!==C.STATUS_WAITING_FOR_ANSWER)throw new u.InvalidStateError(this._status);if(this._sessionTimers.enabled&&c.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=a.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=a.SESSION_EXPIRES),this._status=C.STATUS_ANSWERED,this._createDialog(n,"UAS")){clearTimeout(this._timers.userNoAnswerTimer),r.unshift("Contact: "+this._contact);var _=n.parseSDP();Array.isArray(_.media)||(_.media=[_.media]);var y=!0,S=!1,b=void 0;try{for(var E,w=_.media[Symbol.iterator]();!(y=(E=w.next()).done);y=!0){var R=E.value;"audio"===R.type&&(f=!0,R.direction&&"sendrecv"!==R.direction||(v=!0)),"video"===R.type&&(p=!0,R.direction&&"sendrecv"!==R.direction||(m=!0))}}catch(e){S=!0,b=e}finally{try{!y&&w.return&&w.return()}finally{if(S)throw b}}if(o&&!1===i.audio){d=o.getAudioTracks();var A=!0,k=!1,I=void 0;try{for(var P,O=d[Symbol.iterator]();!(A=(P=O.next()).done);A=!0){var x=P.value;o.removeTrack(x)}}catch(e){k=!0,I=e}finally{try{!A&&O.return&&O.return()}finally{if(k)throw I}}}if(o&&!1===i.video){d=o.getVideoTracks();var D=!0,N=!1,U=void 0;try{for(var M,L=d[Symbol.iterator]();!(D=(M=L.next()).done);D=!0){var q=M.value;o.removeTrack(q)}}catch(e){N=!0,U=e}finally{try{!D&&L.return&&L.return()}finally{if(N)throw U}}}o||void 0!==i.audio||(i.audio=v),o||void 0!==i.video||(i.video=m),o||f||(i.audio=!1),o||p||(i.video=!1),this._createRTCConnection(s,l),Promise.resolve().then(function(){return o||(i.audio||i.video?(e._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(i).catch(function(t){if(e._status===C.STATUS_TERMINATED)throw new Error("terminated");throw n.reply(480),e._failed("local",null,a.causes.USER_DENIED_MEDIA_ACCESS),T('emit "getusermediafailed" [error:%o]',t),e.emit("getusermediafailed",t),new Error("getUserMedia() failed")})):void 0)}).then(function(t){if(e._status===C.STATUS_TERMINATED)throw new Error("terminated");e._localMediaStream=t,t&&e._connection.addStream(t)}).then(function(){if(!e._late_sdp){var t={originator:"remote",type:"offer",sdp:n.body};g('emit "sdp"'),e.emit("sdp",t);var r=new RTCSessionDescription({type:"offer",sdp:t.sdp});return e._connectionPromiseQueue=e._connectionPromiseQueue.then(function(){return e._connection.setRemoteDescription(r)}).catch(function(t){throw n.reply(488),e._failed("system",null,a.causes.WEBRTC_ERROR),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),e.emit("peerconnection:setremotedescriptionfailed",t),new Error("peerconnection.setRemoteDescription() failed")}),e._connectionPromiseQueue}}).then(function(){if(e._status===C.STATUS_TERMINATED)throw new Error("terminated");return e._connecting(n),e._late_sdp?e._createLocalDescription("offer",e._rtcOfferConstraints).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")}):e._createLocalDescription("answer",h).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")})}).then(function(t){if(e._status===C.STATUS_TERMINATED)throw new Error("terminated");e._handleSessionTimersInIncomingRequest(n,r),n.reply(200,null,r,t,function(){e._status=C.STATUS_WAITING_FOR_ACK,e._setInvite2xxTimer(n,t),e._setACKTimer(),e._accepted("local")},function(){e._failed("system",null,a.causes.CONNECTION_ERROR)})}).catch(function(t){e._status!==C.STATUS_TERMINATED&&T(t)})}else n.reply(500,"Error creating dialog")}},{key:"terminate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g("terminate()");var n=t.cause||a.causes.BYE,r=c.cloneArray(t.extraHeaders),i=t.body,o=void 0,s=t.status_code,h=t.reason_phrase;if(this._status===C.STATUS_TERMINATED)throw new u.InvalidStateError(this._status);switch(this._status){case C.STATUS_NULL:case C.STATUS_INVITE_SENT:case C.STATUS_1XX_RECEIVED:if(g("canceling session"),s&&(s<200||s>=700))throw new TypeError("Invalid status_code: "+s);s&&(o="SIP ;cause="+s+' ;text="'+(h=h||a.REASON_PHRASE[s]||"")+'"'),this._status===C.STATUS_NULL||this._status===C.STATUS_INVITE_SENT?(this._is_canceled=!0,this._cancel_reason=o):this._status===C.STATUS_1XX_RECEIVED&&this._request.cancel(o),this._status=C.STATUS_CANCELED,this._failed("local",null,a.causes.CANCELED);break;case C.STATUS_WAITING_FOR_ANSWER:case C.STATUS_ANSWERED:if(g("rejecting session"),(s=s||480)<300||s>=700)throw new TypeError("Invalid status_code: "+s);this._request.reply(s,h,r,i),this._failed("local",null,a.causes.REJECTED);break;case C.STATUS_WAITING_FOR_ACK:case C.STATUS_CONFIRMED:if(g("terminating session"),h=t.reason_phrase||a.REASON_PHRASE[s]||"",s&&(s<200||s>=700))throw new TypeError("Invalid status_code: "+s);if(s&&r.push("Reason: SIP ;cause="+s+'; text="'+h+'"'),this._status===C.STATUS_WAITING_FOR_ACK&&"incoming"===this._direction&&this._request.server_transaction.state!==l.C.STATUS_TERMINATED){var d=this._dialog;this.receiveRequest=function(t){t.method===a.ACK&&(e.sendRequest(a.BYE,{extraHeaders:r,body:i}),d.terminate())},this._request.server_transaction.on("stateChanged",function(){e._request.server_transaction.state===l.C.STATUS_TERMINATED&&(e.sendRequest(a.BYE,{extraHeaders:r,body:i}),d.terminate())}),this._ended("local",null,n),this._dialog=d,this._ua.newDialog(d)}else this.sendRequest(a.BYE,{extraHeaders:r,body:i}),this._ended("local",null,n)}}},{key:"sendDTMF",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};g("sendDTMF() | tones: %s",e);var n=0,r=t.duration||null,i=t.interToneGap||null;if(void 0===e)throw new TypeError("Not enough arguments");if(this._status!==C.STATUS_CONFIRMED&&this._status!==C.STATUS_WAITING_FOR_ACK)throw new u.InvalidStateError(this._status);if("number"==typeof e&&(e=e.toString()),!e||"string"!=typeof e||!e.match(/^[0-9A-DR#*,]+$/i))throw new TypeError("Invalid tones: "+e);if(r&&!c.isDecimal(r))throw new TypeError("Invalid tone duration: "+r);if(r?r<v.C.MIN_DURATION?(g('"duration" value is lower than the minimum allowed, setting it to '+v.C.MIN_DURATION+" milliseconds"),r=v.C.MIN_DURATION):r>v.C.MAX_DURATION?(g('"duration" value is greater than the maximum allowed, setting it to '+v.C.MAX_DURATION+" milliseconds"),r=v.C.MAX_DURATION):r=Math.abs(r):r=v.C.DEFAULT_DURATION,t.duration=r,i&&!c.isDecimal(i))throw new TypeError("Invalid interToneGap: "+i);i?i<v.C.MIN_INTER_TONE_GAP?(g('"interToneGap" value is lower than the minimum allowed, setting it to '+v.C.MIN_INTER_TONE_GAP+" milliseconds"),i=v.C.MIN_INTER_TONE_GAP):i=Math.abs(i):i=v.C.DEFAULT_INTER_TONE_GAP,this._tones?this._tones+=e:(this._tones=e,function e(){var o=this;var s=void 0;if(this._status===C.STATUS_TERMINATED||!this._tones||n>=this._tones.length)return void(this._tones=null);var a=this._tones[n];n+=1;if(","===a)s=2e3;else{var u=new v(this);t.eventHandlers={onFailed:function(){o._tones=null}},u.send(a,t),s=r+i}setTimeout(e.bind(this),s)}.call(this))}},{key:"sendInfo",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(g("sendInfo()"),this._status!==C.STATUS_CONFIRMED&&this._status!==C.STATUS_WAITING_FOR_ACK)throw new u.InvalidStateError(this._status);new m(this).send(e,t,n)}},{key:"mute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!1};g("mute()");var t=!1,n=!1;!1===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!0,this._toogleMuteAudio(!0)),!1===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!0,this._toogleMuteVideo(!0)),!0!==t&&!0!==n||this._onmute({audio:t,video:n})}},{key:"unmute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!0};g("unmute()");var t=!1,n=!1;!0===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!1,!1===this._localHold&&this._toogleMuteAudio(!1)),!0===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!1,!1===this._localHold&&this._toogleMuteVideo(!1)),!0!==t&&!0!==n||this._onunmute({audio:t,video:n})}},{key:"hold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];if(g("hold()"),this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!0===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!0,this._onhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:a.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Hold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"unhold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];if(g("unhold()"),this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!1===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!1,this._onunhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:a.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Unhold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"renegotiate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];g("renegotiate()");var r=t.rtcOfferConstraints||null;if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!this._isReadyToReOffer())return!1;var i={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:a.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Media Renegotiation Failed"})}};return this._setLocalMediaStatus(),t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:i,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:i,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}),!0}},{key:"refer",value:function(e,t){var n=this;g("refer()");var r=e;if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: "+r);var i=new y(this);i.sendRefer(e,t);var o=i.id;return this._referSubscribers[o]=i,i.on("requestFailed",function(){delete n._referSubscribers[o]}),i.on("accepted",function(){delete n._referSubscribers[o]}),i.on("failed",function(){delete n._referSubscribers[o]}),i}},{key:"sendRequest",value:function(e,t){return g("sendRequest()"),this._dialog.sendRequest(e,t)}},{key:"receiveRequest",value:function(e){var t=this;if(g("receiveRequest()"),e.method===a.CANCEL)this._status!==C.STATUS_WAITING_FOR_ANSWER&&this._status!==C.STATUS_ANSWERED||(this._status=C.STATUS_CANCELED,this._request.reply(487),this._failed("remote",e,a.causes.CANCELED));else switch(e.method){case a.ACK:if(this._status!==C.STATUS_WAITING_FOR_ACK)return;if(this._status=C.STATUS_CONFIRMED,clearTimeout(this._timers.ackTimer),clearTimeout(this._timers.invite2xxTimer),this._late_sdp){if(!e.body){this.terminate({cause:a.causes.MISSING_SDP,status_code:400});break}var n={originator:"remote",type:"answer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",n);var r=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(r)}).then(function(){t._is_confirmed||t._confirmed("remote",e)}).catch(function(e){t.terminate({cause:a.causes.BAD_MEDIA_DESCRIPTION,status_code:488}),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else this._is_confirmed||this._confirmed("remote",e);break;case a.BYE:this._status===C.STATUS_CONFIRMED?(e.reply(200),this._ended("remote",e,a.causes.BYE)):this._status===C.STATUS_INVITE_RECEIVED?(e.reply(200),this._request.reply(487,"BYE Received"),this._ended("remote",e,a.causes.BYE)):e.reply(403,"Wrong Status");break;case a.INVITE:this._status===C.STATUS_CONFIRMED?e.hasHeader("replaces")?this._receiveReplaces(e):this._receiveReinvite(e):e.reply(403,"Wrong Status");break;case a.INFO:if(this._status===C.STATUS_1XX_RECEIVED||this._status===C.STATUS_WAITING_FOR_ANSWER||this._status===C.STATUS_ANSWERED||this._status===C.STATUS_WAITING_FOR_ACK||this._status===C.STATUS_CONFIRMED){var i=e.getHeader("content-type");i&&i.match(/^application\/dtmf-relay/i)?new v(this).init_incoming(e):void 0!==i?new m(this).init_incoming(e):e.reply(415)}else e.reply(403,"Wrong Status");break;case a.UPDATE:this._status===C.STATUS_CONFIRMED?this._receiveUpdate(e):e.reply(403,"Wrong Status");break;case a.REFER:this._status===C.STATUS_CONFIRMED?this._receiveRefer(e):e.reply(403,"Wrong Status");break;case a.NOTIFY:this._status===C.STATUS_CONFIRMED?this._receiveNotify(e):e.reply(403,"Wrong Status");break;default:e.reply(501)}}},{key:"onTransportError",value:function(){T("onTransportError()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:a.causes.CONNECTION_ERROR,cause:a.causes.CONNECTION_ERROR})}},{key:"onRequestTimeout",value:function(){T("onRequestTimeout()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:408,reason_phrase:a.causes.REQUEST_TIMEOUT,cause:a.causes.REQUEST_TIMEOUT})}},{key:"onDialogError",value:function(){T("onDialogError()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:a.causes.DIALOG_ERROR,cause:a.causes.DIALOG_ERROR})}},{key:"newDTMF",value:function(e){g("newDTMF()"),this.emit("newDTMF",e)}},{key:"newInfo",value:function(e){g("newInfo()"),this.emit("newInfo",e)}},{key:"_isReadyToReOffer",value:function(){return this._rtcReady?this._dialog?!0!==this._dialog.uac_pending_reply&&!0!==this._dialog.uas_pending_reply||(g("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress"),!1):(g("_isReadyToReOffer() | session not established yet"),!1):(g("_isReadyToReOffer() | internal WebRTC status not ready"),!1)}},{key:"_close",value:function(){if(g("close()"),this._status!==C.STATUS_TERMINATED){if(this._status=C.STATUS_TERMINATED,this._connection)try{this._connection.close()}catch(e){T("close() | error closing the RTCPeerConnection: %o",e)}for(var e in this._localMediaStream&&this._localMediaStreamLocallyGenerated&&(g("close() | closing local MediaStream"),c.closeMediaStream(this._localMediaStream)),this._timers)Object.prototype.hasOwnProperty.call(this._timers,e)&&clearTimeout(this._timers[e]);for(var t in clearTimeout(this._sessionTimers.timer),this._dialog&&(this._dialog.terminate(),delete this._dialog),this._earlyDialogs)Object.prototype.hasOwnProperty.call(this._earlyDialogs,t)&&(this._earlyDialogs[t].terminate(),delete this._earlyDialogs[t]);for(var n in this._referSubscribers)Object.prototype.hasOwnProperty.call(this._referSubscribers,n)&&delete this._referSubscribers[n];this._ua.destroyRTCSession(this)}}},{key:"_setInvite2xxTimer",value:function(e,t){var n=h.T1;this._timers.invite2xxTimer=setTimeout(function r(){this._status===C.STATUS_WAITING_FOR_ACK&&(e.reply(200,null,["Contact: "+this._contact],t),n<h.T2&&(n*=2)>h.T2&&(n=h.T2),this._timers.invite2xxTimer=setTimeout(r.bind(this),n))}.bind(this),n)}},{key:"_setACKTimer",value:function(){var e=this;this._timers.ackTimer=setTimeout(function(){e._status===C.STATUS_WAITING_FOR_ACK&&(g("no ACK received, terminating the session"),clearTimeout(e._timers.invite2xxTimer),e.sendRequest(a.BYE),e._ended("remote",null,a.causes.NO_ACK))},h.TIMER_H)}},{key:"_createRTCConnection",value:function(e,t){var n=this;this._connection=new RTCPeerConnection(e,t),this._connection.addEventListener("iceconnectionstatechange",function(){"failed"===n._connection.iceConnectionState&&n.terminate({cause:a.causes.RTP_TIMEOUT,status_code:408,reason_phrase:a.causes.RTP_TIMEOUT})}),g('emit "peerconnection"'),this.emit("peerconnection",{peerconnection:this._connection})}},{key:"_createLocalDescription",value:function(e,t){var n=this;if(g("createLocalDescription()"),"offer"!==e&&"answer"!==e)throw new Error('createLocalDescription() | invalid type "'+e+'"');var r=this._connection;return this._rtcReady=!1,Promise.resolve().then(function(){return"offer"===e?r.createOffer(t).catch(function(e){return T('emit "peerconnection:createofferfailed" [error:%o]',e),n.emit("peerconnection:createofferfailed",e),Promise.reject(e)}):r.createAnswer(t).catch(function(e){return T('emit "peerconnection:createanswerfailed" [error:%o]',e),n.emit("peerconnection:createanswerfailed",e),Promise.reject(e)})}).then(function(e){return r.setLocalDescription(e).catch(function(e){return n._rtcReady=!0,T('emit "peerconnection:setlocaldescriptionfailed" [error:%o]',e),n.emit("peerconnection:setlocaldescriptionfailed",e),Promise.reject(e)})}).then(function(){if("complete"===r.iceGatheringState){n._rtcReady=!0;var t={originator:"local",type:e,sdp:r.localDescription.sdp};return g('emit "sdp"'),n.emit("sdp",t),Promise.resolve(t.sdp)}return new Promise(function(t){var i=!1,o=void 0,s=function(){r.removeEventListener("icecandidate",o),i=!0,n._rtcReady=!0;var s={originator:"local",type:e,sdp:r.localDescription.sdp};g('emit "sdp"'),n.emit("sdp",s),t(s.sdp)};r.addEventListener("icecandidate",o=function(e){var t=e.candidate;t?n.emit("icecandidate",{candidate:t,ready:s}):i||s()})})})}},{key:"_createDialog",value:function(e,t,n){var r="UAS"===t?e.to_tag:e.from_tag,i="UAS"===t?e.from_tag:e.to_tag,o=e.call_id+r+i,s=this._earlyDialogs[o];if(n)return!!s||((s=new f(this,e,t,f.C.STATUS_EARLY)).error?(g(s.error),this._failed("remote",e,a.causes.INTERNAL_ERROR),!1):(this._earlyDialogs[o]=s,!0));if(this._from_tag=e.from_tag,this._to_tag=e.to_tag,s)return s.update(e,t),this._dialog=s,delete this._earlyDialogs[o],!0;var u=new f(this,e,t);return u.error?(g(u.error),this._failed("remote",e,a.causes.INTERNAL_ERROR),!1):(this._dialog=u,!0)}},{key:"_receiveReinvite",value:function(e){var t=this;g("receiveReinvite()");var n=e.getHeader("Content-Type"),r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i=!0;var n=t.status_code||403,r=t.reason_phrase||"",o=c.cloneArray(t.extraHeaders);if(this._status!==C.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: "+n);e.reply(n,r,o)}.bind(this)},i=!1;if(this.emit("reinvite",r),!i){if(this._late_sdp=!1,!e.body)return this._late_sdp=!0,void(this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._createLocalDescription("offer",t._rtcOfferConstraints)}).then(function(e){o.call(t,e)}).catch(function(){e.reply(500)}));if("application/sdp"!==n)return g("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==C.STATUS_TERMINATED&&o.call(t,e)}).catch(function(e){T(e)})}function o(t){var n=this,i=["Contact: "+this._contact];this._handleSessionTimersInIncomingRequest(e,i),this._late_sdp&&(t=this._mangleOffer(t)),e.reply(200,null,i,t,function(){n._status=C.STATUS_WAITING_FOR_ACK,n._setInvite2xxTimer(e,t),n._setACKTimer()}),"function"==typeof r.callback&&r.callback()}}},{key:"_receiveUpdate",value:function(e){var t=this;g("receiveUpdate()");var n=e.getHeader("Content-Type"),r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i=!0;var n=t.status_code||403,r=t.reason_phrase||"",o=c.cloneArray(t.extraHeaders);if(this._status!==C.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: "+n);e.reply(n,r,o)}.bind(this)},i=!1;if(this.emit("update",r),!i)if(e.body){if("application/sdp"!==n)return g("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==C.STATUS_TERMINATED&&o.call(t,e)}).catch(function(e){T(e)})}else o.call(this,null);function o(t){var n=["Contact: "+this._contact];this._handleSessionTimersInIncomingRequest(e,n),e.reply(200,null,n,t),"function"==typeof r.callback&&r.callback()}}},{key:"_processInDialogSdpOffer",value:function(e){var t=this;g("_processInDialogSdpOffer()");var n=e.parseSDP(),r=!1,i=!0,o=!1,s=void 0;try{for(var a,u=n.media[Symbol.iterator]();!(i=(a=u.next()).done);i=!0){var l=a.value;if(-1!==S.indexOf(l.type)){var c=l.direction||n.direction||"sendrecv";if("sendonly"!==c&&"inactive"!==c){r=!1;break}r=!0}}}catch(e){o=!0,s=e}finally{try{!i&&u.return&&u.return()}finally{if(o)throw s}}var h={originator:"remote",type:"offer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",h);var d=new RTCSessionDescription({type:"offer",sdp:h.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if(t._status===C.STATUS_TERMINATED)throw new Error("terminated");return t._connection.setRemoteDescription(d).catch(function(n){throw e.reply(488),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n),new Error("peerconnection.setRemoteDescription() failed")})}).then(function(){if(t._status===C.STATUS_TERMINATED)throw new Error("terminated");!0===t._remoteHold&&!1===r?(t._remoteHold=!1,t._onunhold("remote")):!1===t._remoteHold&&!0===r&&(t._remoteHold=!0,t._onhold("remote"))}).then(function(){if(t._status===C.STATUS_TERMINATED)throw new Error("terminated");return t._createLocalDescription("answer",t._rtcAnswerConstraints).catch(function(){throw e.reply(500),new Error("_createLocalDescription() failed")})}),this._connectionPromiseQueue}},{key:"_receiveRefer",value:function(e){var n=this;if(g("receiveRefer()"),void 0===r(e.refer_to))return g("no Refer-To header field present in REFER"),void e.reply(400);if(e.refer_to.uri.scheme!==a.SIP)return g("Refer-To header field points to a non-SIP URI scheme"),void e.reply(416);e.reply(202);var i=new _(this,e.cseq);g('emit "refer"'),this.emit("refer",{request:e,accept:function(r,o){(function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n="function"==typeof n?n:null,this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;var o=new t(this._ua);if(o.on("progress",function(e){var t=e.response;i.notify(t.status_code,t.reason_phrase)}),o.on("accepted",function(e){var t=e.response;i.notify(t.status_code,t.reason_phrase)}),o.on("failed",function(e){var t=e.message,n=e.cause;t?i.notify(t.status_code,t.reason_phrase):i.notify(487,n)}),e.refer_to.uri.hasHeader("replaces")){var s=decodeURIComponent(e.refer_to.uri.getHeader("replaces"));r.extraHeaders=c.cloneArray(r.extraHeaders),r.extraHeaders.push("Replaces: "+s)}o.connect(e.refer_to.uri.toAor(),r,n)}).call(n,r,o)},reject:function(){(function(){i.notify(603)}).call(n)}})}},{key:"_receiveNotify",value:function(e){switch(g("receiveNotify()"),void 0===r(e.event)&&e.reply(400),e.event.event){case"refer":var t=void 0,n=void 0;if(e.event.params&&e.event.params.id)t=e.event.params.id,n=this._referSubscribers[t];else{if(1!==Object.keys(this._referSubscribers).length)return void e.reply(400,"Missing event id parameter");n=this._referSubscribers[Object.keys(this._referSubscribers)[0]]}if(!n)return void e.reply(481,"Subscription does not exist");n.receiveNotify(e),e.reply(200);break;default:e.reply(489)}}},{key:"_receiveReplaces",value:function(e){var n=this;g("receiveReplaces()"),this.emit("replaces",{request:e,accept:function(r){(function(n){var r=this;if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;var i=new t(this._ua);i.on("confirmed",function(){r.terminate()}),i.init_incoming(e,n)}).call(n,r)},reject:function(){(function(){g("Replaced INVITE rejected by the user"),e.reply(486)}).call(n)}})}},{key:"_sendInitialRequest",value:function(e,t,n){var r=this,i=new p(this._ua,this._request,{onRequestTimeout:function(){r.onRequestTimeout()},onTransportError:function(){r.onTransportError()},onAuthenticated:function(e){r._request=e},onReceiveResponse:function(e){r._receiveInviteResponse(e)}});Promise.resolve().then(function(){return n||(e.audio||e.video?(r._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(e).catch(function(e){if(r._status===C.STATUS_TERMINATED)throw new Error("terminated");throw r._failed("local",null,a.causes.USER_DENIED_MEDIA_ACCESS),T('emit "getusermediafailed" [error:%o]',e),r.emit("getusermediafailed",e),e})):void 0)}).then(function(e){if(r._status===C.STATUS_TERMINATED)throw new Error("terminated");return r._localMediaStream=e,e&&r._connection.addStream(e),r._connecting(r._request),r._createLocalDescription("offer",t).catch(function(e){throw r._failed("local",null,a.causes.WEBRTC_ERROR),e})}).then(function(e){if(r._is_canceled||r._status===C.STATUS_TERMINATED)throw new Error("terminated");r._request.body=e,r._status=C.STATUS_INVITE_SENT,g('emit "sending" [request:%o]',r._request),r.emit("sending",{request:r._request}),i.send()}).catch(function(e){r._status!==C.STATUS_TERMINATED&&T(e)})}},{key:"_receiveInviteResponse",value:function(e){var t=this;if(g("receiveInviteResponse()"),this._dialog&&e.status_code>=200&&e.status_code<=299){if(this._dialog.id.call_id===e.call_id&&this._dialog.id.local_tag===e.from_tag&&this._dialog.id.remote_tag===e.to_tag)return void this.sendRequest(a.ACK);var n=new f(this,e,"UAC");return void 0!==n.error?void g(n.error):(this.sendRequest(a.ACK),void this.sendRequest(a.BYE))}if(this._is_canceled)e.status_code>=100&&e.status_code<200?this._request.cancel(this._cancel_reason):e.status_code>=200&&e.status_code<299&&this._acceptAndTerminate(e);else if(this._status===C.STATUS_INVITE_SENT||this._status===C.STATUS_1XX_RECEIVED)switch(!0){case/^100$/.test(e.status_code):this._status=C.STATUS_1XX_RECEIVED;break;case/^1[0-9]{2}$/.test(e.status_code):if(!e.to_tag){g("1xx response received without to tag");break}if(e.hasHeader("contact")&&!this._createDialog(e,"UAC",!0))break;if(this._status=C.STATUS_1XX_RECEIVED,this._progress("remote",e),!e.body)break;var r={originator:"remote",type:"answer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",r);var i=new RTCSessionDescription({type:"answer",sdp:r.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).catch(function(e){T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)});break;case/^2[0-9]{2}$/.test(e.status_code):if(this._status=C.STATUS_CONFIRMED,!e.body){this._acceptAndTerminate(e,400,a.causes.MISSING_SDP),this._failed("remote",e,a.causes.BAD_MEDIA_DESCRIPTION);break}if(!this._createDialog(e,"UAC"))break;var o={originator:"remote",type:"answer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",o);var s=new RTCSessionDescription({type:"answer",sdp:o.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if("stable"===t._connection.signalingState)return t._connection.createOffer().then(function(e){return t._connection.setLocalDescription(e)}).catch(function(n){t._acceptAndTerminate(e,500,n.toString()),t._failed("local",e,a.causes.WEBRTC_ERROR)})}).then(function(){t._connection.setRemoteDescription(s).then(function(){t._handleSessionTimersInIncomingResponse(e),t._accepted("remote",e),t.sendRequest(a.ACK),t._confirmed("local",null)}).catch(function(n){t._acceptAndTerminate(e,488,"Not Acceptable Here"),t._failed("remote",e,a.causes.BAD_MEDIA_DESCRIPTION),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n)})});break;default:var u=c.sipErrorCause(e.status_code);this._failed("remote",e,u)}}},{key:"_sendReinvite",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g("sendReinvite()");var n=c.cloneArray(t.extraHeaders),r=t.eventHandlers||{},i=t.rtcOfferConstraints||this._rtcOfferConstraints||null,o=!1;function s(e){r.failed&&r.failed(e)}n.push("Contact: "+this._contact),n.push("Content-Type: application/sdp"),this._sessionTimers.running&&n.push("Session-Expires: "+this._sessionTimers.currentExpires+";refresher="+(this._sessionTimers.refresher?"uac":"uas")),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",i)}).then(function(t){t=e._mangleOffer(t),e.sendRequest(a.INVITE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){(function(e){var t=this;if(this._status===C.STATUS_TERMINATED)return;if(this.sendRequest(a.ACK),o)return;if(this._handleSessionTimersInIncomingResponse(e),!e.body)return void s.call(this);if("application/sdp"!==e.getHeader("Content-Type"))return void s.call(this);var n={originator:"remote",type:"answer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",n);var i=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){s.call(t),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}).call(e,t),o=!0},onErrorResponse:function(t){s.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){s()})}},{key:"_sendUpdate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g("sendUpdate()");var n=c.cloneArray(t.extraHeaders),r=t.eventHandlers||{},i=t.rtcOfferConstraints||this._rtcOfferConstraints||null,o=t.sdpOffer||!1,s=!1;function u(e){var t=this;if(this._status!==C.STATUS_TERMINATED&&!s)if(this._handleSessionTimersInIncomingResponse(e),o){if(!e.body)return void l.call(this);if("application/sdp"!==e.getHeader("Content-Type"))return void l.call(this);var n={originator:"remote",type:"answer",sdp:e.body};g('emit "sdp"'),this.emit("sdp",n);var i=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){l.call(t),T('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else r.succeeded&&r.succeeded(e)}function l(e){r.failed&&r.failed(e)}n.push("Contact: "+this._contact),this._sessionTimers.running&&n.push("Session-Expires: "+this._sessionTimers.currentExpires+";refresher="+(this._sessionTimers.refresher?"uac":"uas")),o?(n.push("Content-Type: application/sdp"),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",i)}).then(function(t){t=e._mangleOffer(t),e.sendRequest(a.UPDATE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){u.call(e,t),s=!0},onErrorResponse:function(t){l.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){l.call(e)})):this.sendRequest(a.UPDATE,{extraHeaders:n,eventHandlers:{onSuccessResponse:function(t){u.call(e,t)},onErrorResponse:function(t){l.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}},{key:"_acceptAndTerminate",value:function(e,t,n){g("acceptAndTerminate()");var r=[];t&&(n=n||a.REASON_PHRASE[t]||"",r.push("Reason: SIP ;cause="+t+'; text="'+n+'"')),(this._dialog||this._createDialog(e,"UAC"))&&(this.sendRequest(a.ACK),this.sendRequest(a.BYE,{extraHeaders:r})),this._status=C.STATUS_TERMINATED}},{key:"_mangleOffer",value:function(e){if(!this._localHold&&!this._remoteHold)return e;if(e=s.parse(e),this._localHold&&!this._remoteHold){g("mangleOffer() | me on hold, mangling offer");var t=!0,n=!1,r=void 0;try{for(var i,o=e.media[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var a=i.value;-1!==S.indexOf(a.type)&&(a.direction?"sendrecv"===a.direction?a.direction="sendonly":"recvonly"===a.direction&&(a.direction="inactive"):a.direction="sendonly")}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}}else if(this._localHold&&this._remoteHold){g("mangleOffer() | both on hold, mangling offer");var u=!0,l=!1,c=void 0;try{for(var h,d=e.media[Symbol.iterator]();!(u=(h=d.next()).done);u=!0){var f=h.value;-1!==S.indexOf(f.type)&&(f.direction="inactive")}}catch(e){l=!0,c=e}finally{try{!u&&d.return&&d.return()}finally{if(l)throw c}}}else if(this._remoteHold){g("mangleOffer() | remote on hold, mangling offer");var p=!0,v=!1,m=void 0;try{for(var _,y=e.media[Symbol.iterator]();!(p=(_=y.next()).done);p=!0){var T=_.value;-1!==S.indexOf(T.type)&&(T.direction?"sendrecv"===T.direction?T.direction="recvonly":"recvonly"===T.direction&&(T.direction="inactive"):T.direction="recvonly")}}catch(e){v=!0,m=e}finally{try{!p&&y.return&&y.return()}finally{if(v)throw m}}}return s.write(e)}},{key:"_setLocalMediaStatus",value:function(){var e=!0,t=!0;(this._localHold||this._remoteHold)&&(e=!1,t=!1),this._audioMuted&&(e=!1),this._videoMuted&&(t=!1),this._toogleMuteAudio(!e),this._toogleMuteVideo(!t)}},{key:"_handleSessionTimersInIncomingRequest",value:function(e,t){if(this._sessionTimers.enabled){var n=void 0;e.session_expires&&e.session_expires>=a.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,n=e.session_expires_refresher||"uas"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,n="uas"),t.push("Session-Expires: "+this._sessionTimers.currentExpires+";refresher="+n),this._sessionTimers.refresher="uas"===n,this._runSessionTimer()}}},{key:"_handleSessionTimersInIncomingResponse",value:function(e){if(this._sessionTimers.enabled){var t=void 0;e.session_expires&&e.session_expires>=a.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,t=e.session_expires_refresher||"uac"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,t="uac"),this._sessionTimers.refresher="uac"===t,this._runSessionTimer()}}},{key:"_runSessionTimer",value:function(){var e=this,t=this._sessionTimers.currentExpires;this._sessionTimers.running=!0,clearTimeout(this._sessionTimers.timer),this._sessionTimers.refresher?this._sessionTimers.timer=setTimeout(function(){e._status!==C.STATUS_TERMINATED&&(g("runSessionTimer() | sending session refresh request"),e._sessionTimers.refreshMethod===a.UPDATE?e._sendUpdate():e._sendReinvite())},500*t):this._sessionTimers.timer=setTimeout(function(){e._status!==C.STATUS_TERMINATED&&(T("runSessionTimer() | timer expired, terminating the session"),e.terminate({cause:a.causes.REQUEST_TIMEOUT,status_code:408,reason_phrase:"Session Timer Expired"}))},1100*t)}},{key:"_toogleMuteAudio",value:function(e){var t=this._connection.getLocalStreams(),n=!0,r=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value.getAudioTracks(),u=!0,l=!1,c=void 0;try{for(var h,d=a[Symbol.iterator]();!(u=(h=d.next()).done);u=!0){h.value.enabled=!e}}catch(e){l=!0,c=e}finally{try{!u&&d.return&&d.return()}finally{if(l)throw c}}}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}}},{key:"_toogleMuteVideo",value:function(e){var t=this._connection.getLocalStreams(),n=!0,r=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value.getVideoTracks(),u=!0,l=!1,c=void 0;try{for(var h,d=a[Symbol.iterator]();!(u=(h=d.next()).done);u=!0){h.value.enabled=!e}}catch(e){l=!0,c=e}finally{try{!u&&d.return&&d.return()}finally{if(l)throw c}}}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}}},{key:"_newRTCSession",value:function(e,t){g("newRTCSession()"),this._ua.newRTCSession(this,{originator:e,session:this,request:t})}},{key:"_connecting",value:function(e){g("session connecting"),g('emit "connecting"'),this.emit("connecting",{request:e})}},{key:"_progress",value:function(e,t){g("session progress"),g('emit "progress"'),this.emit("progress",{originator:e,response:t||null})}},{key:"_accepted",value:function(e,t){g("session accepted"),this._start_time=new Date,g('emit "accepted"'),this.emit("accepted",{originator:e,response:t||null})}},{key:"_confirmed",value:function(e,t){g("session confirmed"),this._is_confirmed=!0,g('emit "confirmed"'),this.emit("confirmed",{originator:e,ack:t||null})}},{key:"_ended",value:function(e,t,n){g("session ended"),this._end_time=new Date,this._close(),g('emit "ended"'),this.emit("ended",{originator:e,message:t||null,cause:n})}},{key:"_failed",value:function(e,t,n){g("session failed"),this._close(),g('emit "failed"'),this.emit("failed",{originator:e,message:t||null,cause:n})}},{key:"_onhold",value:function(e){g("session onhold"),this._setLocalMediaStatus(),g('emit "hold"'),this.emit("hold",{originator:e})}},{key:"_onunhold",value:function(e){g("session onunhold"),this._setLocalMediaStatus(),g('emit "unhold"'),this.emit("unhold",{originator:e})}},{key:"_onmute",value:function(e){var t=e.audio,n=e.video;g("session onmute"),this._setLocalMediaStatus(),g('emit "muted"'),this.emit("muted",{audio:t,video:n})}},{key:"_onunmute",value:function(e){var t=e.audio,n=e.video;g("session onunmute"),this._setLocalMediaStatus(),g('emit "unmuted"'),this.emit("unmuted",{audio:t,video:n})}},{key:"C",get:function(){return C}},{key:"causes",get:function(){return a.causes}},{key:"id",get:function(){return this._id}},{key:"connection",get:function(){return this._connection}},{key:"contact",get:function(){return this._contact}},{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"start_time",get:function(){return this._start_time}},{key:"end_time",get:function(){return this._end_time}},{key:"data",get:function(){return this._data},set:function(e){this._data=e}},{key:"status",get:function(){return this._status}}]),t}()},function(e,t,n){"use strict";var r=n(2),i=n(5),o=n(0)("JsSIP:ERROR:Socket");o.log=console.warn.bind(console),t.isSocket=function(e){if(Array.isArray(e))return!1;if(void 0===e)return o("undefined JsSIP.Socket instance"),!1;try{if(!r.isString(e.url))throw o("missing or invalid JsSIP.Socket url property"),new Error;if(!r.isString(e.via_transport))throw o("missing or invalid JsSIP.Socket via_transport property"),new Error;if(-1===i.parse(e.sip_uri,"SIP_URI"))throw o("missing or invalid JsSIP.Socket sip_uri property"),new Error}catch(e){return!1}try{["connect","disconnect","send"].forEach(function(t){if(!r.isFunction(e[t]))throw o("missing or invalid JsSIP.Socket method: "+t),new Error})}catch(e){return!1}return!0}},function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=n(48),u=n(68),l=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).client.defaults.baseURL+="/api",n}var n,r,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,a),n=t,(r=[{key:"v1",value:function(){return new u(this.client)}}])&&i(n.prototype,r),l&&i(n,l),t}();e.exports=l},function(e,t,n){var r=n(49);e.exports=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=r.create(t)}},function(e,t,n){e.exports=n(50)},function(e,t,n){"use strict";var r=n(4),i=n(23),o=n(52),s=n(18);function a(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var u=a(s);u.Axios=o,u.create=function(e){return a(r.merge(s,e))},u.Cancel=n(28),u.CancelToken=n(66),u.isCancel=n(27),u.all=function(e){return Promise.all(e)},u.spread=n(67),e.exports=u,e.exports.default=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(18),i=n(4),o=n(61),s=n(62);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e}},function(e,t,n){"use strict";var r=n(4);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),o=s.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(4),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),s="",a=0,u=r;o.charAt(0|a)||(u="=",a%1);s+=u.charAt(63&t>>8-a%1*8)){if((n=o.charCodeAt(a+=.75))>255)throw new i;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(4);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";var r=n(4),i=n(63),o=n(27),s=n(18),a=n(64),u=n(65);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return l(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(l(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(28);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(69),o=n(93),s=n(94),a=n(95),u=n(96),l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t,this.client.defaults.baseURL+="/v1"}var t,n,l;return t=e,(n=[{key:"withAuth",value:function(e){return this.token=e,this.client.defaults.headers.common.Authorization="Bearer ".concat(e),this}},{key:"socket",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.socketio=i(e,{transports:["websocket"],query:{token:this.token,extension:t}}),this}},{key:"isJwtToken",value:function(e){return 60!==e.length}},{key:"agent",value:function(){return new o(this.client)}},{key:"user",value:function(){return new s(this.client)}},{key:"call",value:function(){return new a(this.client)}},{key:"realtime",value:function(){return new u(this.socketio)}}])&&r(t.prototype,n),l&&r(t,l),e}();e.exports=l},function(e,t,n){var r=n(70),i=n(19),o=n(31),s=n(0)("socket.io-client");e.exports=t=u;var a=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i=r(e),u=i.source,l=i.id,c=i.path,h=a[l]&&c in a[l].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||h?(s("ignoring socket cache for %s",u),n=o(u,t)):(a[l]||(s("new io instance for %s",u),a[l]=o(u,t)),n=a[l]),i.query&&!t.query&&(t.query=i.query),n.socket(i.path,t)}t.protocol=i.protocol,t.connect=u,t.Manager=n(31),t.Socket=n(37)},function(e,t,n){(function(t){var r=n(29),i=n(0)("socket.io-client:url");e.exports=function(e,n){var o=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),o=r(e));o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443"));o.path=o.path||"/";var s=-1!==o.host.indexOf(":")?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port,o.href=o.protocol+"://"+s+(n&&n.port===o.port?"":":"+o.port),o}}).call(this,n(3))},function(e,t,n){var r;function i(e){function n(){if(n.enabled){var e=n,i=+new Date,o=i-(r||i);e.diff=o,e.prev=r,e.curr=i,r=i;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var i=t.formatters[r];if("function"==typeof i){var o=s[u];n=i.call(e,o),s.splice(u,1),u--}return n}),t.formatArgs.call(e,s),(n.log||t.log||console.log.bind(console)).apply(e,s)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),"function"==typeof t.init&&t.init(n),n}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length,i=0;i<r;i++)n[i]&&("-"===(e=n[i].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(72),t.names=[],t.skips=[],t.formatters={}},function(e,t){var n=1e3,r=60*n,i=60*r,o=24*i,s=365.25*o;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,l=typeof e;if("string"===l&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===l&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,i,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=i)return Math.round(e/i)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){(function(e){var r=n(14),i=n(30),o=Object.prototype.toString,s="function"==typeof e.Blob||"[object BlobConstructor]"===o.call(e.Blob),a="function"==typeof e.File||"[object FileConstructor]"===o.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,o=e;return o.data=function e(t,n){if(!t)return t;if(i(t)){var o={_placeholder:!0,num:n.length};return n.push(t),o}if(r(t)){for(var s=new Array(t.length),a=0;a<t.length;a++)s[a]=e(t[a],n);return s}if("object"==typeof t&&!(t instanceof Date)){var s={};for(var u in t)s[u]=e(t[u],n);return s}return t}(n,t),o.attachments=t.length,{packet:o,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var i=0;i<t.length;i++)t[i]=e(t[i],n);else if("object"==typeof t)for(var o in t)t[o]=e(t[o],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,o=e;!function e(u,l,c){if(!u)return u;if(s&&u instanceof Blob||a&&u instanceof File){n++;var h=new FileReader;h.onload=function(){c?c[l]=this.result:o=this.result,--n||t(o)},h.readAsArrayBuffer(u)}else if(r(u))for(var d=0;d<u.length;d++)e(u[d],d,u);else if("object"==typeof u&&!i(u))for(var f in u)e(u[f],f,u)}(o),n||t(o)}}).call(this,n(3))},function(e,t,n){e.exports=n(75),e.exports.parser=n(11)},function(e,t,n){(function(t){var r=n(32),i=n(10),o=n(0)("engine.io-client:socket"),s=n(36),a=n(11),u=n(29),l=n(15);function c(e,n){if(!(this instanceof c))return new c(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=l.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=c,c.priorWebsocketSuccess=!1,i(c.prototype),c.protocol=a.protocol,c.Socket=c,c.Transport=n(21),c.transports=n(32),c.parser=n(11),c.prototype.createTransport=function(e){o('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=a.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},c.prototype.open=function(){var e;if(this.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},c.prototype.setTransport=function(e){o("setting transport %s",e.name);var t=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},c.prototype.probe=function(e){o('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function i(){if(r.onlyBinaryUpgrades){var i=!this.supportsBinary&&r.transport.supportsBinary;n=n||i}n||(o('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;c.priorWebsocketSuccess="websocket"===t.name,o('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(o("changing transport and sending upgrade packet"),d(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{o('probe transport "%s" failed',e);var s=new Error("probe error");s.transport=t.name,r.emit("upgradeError",s)}}))}function s(){n||(n=!0,d(),t.close(),t=null)}function a(n){var i=new Error("probe error: "+n);i.transport=t.name,s(),o('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",i)}function u(){a("transport closed")}function l(){a("socket closed")}function h(e){t&&e.name!==t.name&&(o('"%s" works - aborting "%s"',e.name,t.name),s())}function d(){t.removeListener("open",i),t.removeListener("error",a),t.removeListener("close",u),r.removeListener("close",l),r.removeListener("upgrading",h)}c.priorWebsocketSuccess=!1,t.once("open",i),t.once("error",a),t.once("close",u),this.once("close",l),this.once("upgrading",h),t.open()},c.prototype.onOpen=function(){if(o("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){o("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},c.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else o('packet received with socket readyState "%s"',this.readyState)},c.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},c.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},c.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){o("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},c.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},c.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},c.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},c.prototype.write=c.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},c.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:e,data:t,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}},c.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),o("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},c.prototype.onError=function(e){o("socket error %j",e),c.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},c.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},c.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~s(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(3))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){var r=n(20),i=n(33),o=n(10),s=n(16),a=n(0)("engine.io-client:polling-xhr");function u(){}function l(e){if(i.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function c(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function h(){for(var e in c.requests)c.requests.hasOwnProperty(e)&&c.requests[e].abort()}e.exports=l,e.exports.Request=c,s(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new c(e)},l.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),i=this;r.on("success",t),r.on("error",function(e){i.onError("xhr post error",e)}),this.sendXhr=r},l.prototype.doPoll=function(){a("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},o(c.prototype),c.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),i=this;try{a("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&n.setRequestHeader(o,this.extraHeaders[o])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){i.onLoad()},n.onerror=function(){i.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");i.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?i.onLoad():setTimeout(function(){i.onError(n.status)},0))},a("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){i.onError(e)},0)}t.document&&(this.index=c.requestsCount++,c.requests[this.index]=this)},c.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},c.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},c.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},c.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete c.requests[this.index],this.xhr=null}},c.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},c.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},c.prototype.abort=function(){this.cleanup()},c.requestsCount=0,c.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",h):t.addEventListener&&t.addEventListener("beforeunload",h,!1))}).call(this,n(3))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(80),i=n(81),o=n(14);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return l(this,e,t,n)}function l(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|f(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(c(t),e=a(e,t<0?0:0|f(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|f(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return B(e).length;default:if(r)return H(e).length;t=(""+t).toLowerCase(),r=!0}}function v(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:_(e,t,n,r,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):_(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function _(e,t,n,r,i){var o,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var h=!0,d=0;d<u;d++)if(l(e,o+d)!==l(t,d)){h=!1;break}if(h)return o}return-1}function y(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function g(e,t,n,r){return F(H(t,e.length-n),e,n,r)}function T(e,t,n,r){return F(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return T(e,t,n,r)}function S(e,t,n,r){return F(B(t),e,n,r)}function b(e,t,n,r){return F(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function E(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function w(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,u,l=e[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(e){var t=e.length;if(t<=R)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=R));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var s=e[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)v(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?w(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,n);case"utf8":case"utf-8":return w(this,t,n);case"ascii":return A(this,t,n);case"latin1":case"binary":return k(this,t,n);case"base64":return E(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),l=this.slice(r,i),c=e.slice(t,n),h=0;h<a;++h)if(l[h]!==c[h]){o=l[h],s=c[h];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return y(this,e,t,n);case"utf8":case"utf-8":return g(this,e,t,n);case"ascii":return T(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return S(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return b(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function k(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function I(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=j(e[o]);return i}function P(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function O(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function x(e,t,n,r,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function D(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function N(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function U(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,o){return o||U(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function L(e,t,n,r,o){return o||U(e,0,n,8),i.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},u.prototype.readUInt8=function(e,t){return t||O(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||O(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||O(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||O(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||O(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||O(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||O(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||O(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||O(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||x(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||x(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):N(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);x(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);x(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):N(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=u.isBuffer(e)?e:H(new u(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var q=/[^+\/0-9A-Za-z-_]/g;function j(e){return e<16?"0"+e.toString(16):e.toString(16)}function H(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function B(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(3))},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=l(e),r=n[0],s=n[1],a=new o(function(e,t,n){return 3*(t+n)/4-n}(0,r,s)),u=0,c=s>0?r-4:r,h=0;h<c;h+=4)t=i[e.charCodeAt(h)]<<18|i[e.charCodeAt(h+1)]<<12|i[e.charCodeAt(h+2)]<<6|i[e.charCodeAt(h+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;2===s&&(t=i[e.charCodeAt(h)]<<2|i[e.charCodeAt(h+1)]>>4,a[u++]=255&t);1===s&&(t=i[e.charCodeAt(h)]<<10|i[e.charCodeAt(h+1)]<<4|i[e.charCodeAt(h+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t);return a},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(c(e,s,s+16383>a?a:s+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,h=n?i-1:0,d=n?-1:1,f=e[t+h];for(h+=d,o=f&(1<<-c)-1,f>>=-c,c+=a;c>0;o=256*o+e[t+h],h+=d,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;c>0;s=256*s+e[t+h],h+=d,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,r),o-=l}return(f?-1:1)*s*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,p=r?1:-1,v=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?d/u:d*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(t*u-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+f]=255&a,f+=p,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;e[n+f]=255&s,f+=p,s/=256,l-=8);e[n+f-p]|=128*v}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var i=new Uint8Array(e),o=new Uint8Array(n-t),s=t,a=0;s<n;s++,a++)o[a]=i[s];return o.buffer}},function(e,t){function n(){}e.exports=function(e,t,r){var i=!1;return r=r||n,o.count=e,0===e?t():o;function o(e,n){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(i=!0,t(e),t=r):0!==o.count||i||t(null,n)}}},function(e,t,n){(function(e,r){var i;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(o){var s=t,a=(e&&e.exports,"object"==typeof r&&r);a.global!==a&&a.window;var u,l,c,h=String.fromCharCode;function d(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function f(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function p(e,t){return h(e>>t&63|128)}function v(e,t){if(0==(4294967168&e))return h(e);var n="";return 0==(4294965248&e)?n=h(e>>6&31|192):0==(4294901760&e)?(f(e,t)||(e=65533),n=h(e>>12&15|224),n+=p(e,6)):0==(4292870144&e)&&(n=h(e>>18&7|240),n+=p(e,12),n+=p(e,6)),n+=h(63&e|128)}function m(){if(c>=l)throw Error("Invalid byte index");var e=255&u[c];if(c++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function _(e){var t,n;if(c>l)throw Error("Invalid byte index");if(c==l)return!1;if(t=255&u[c],c++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|m())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|m()<<6|m())>=2048)return f(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|m()<<12|m()<<6|m())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var y={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=d(e),i=r.length,o=-1,s="";++o<i;)s+=v(r[o],n);return s},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=d(e),l=u.length,c=0;for(var r,i=[];!1!==(r=_(n));)i.push(r);return function(e){for(var t,n=e.length,r=-1,i="";++r<n;)(t=e[r])>65535&&(i+=h((t-=65536)>>>10&1023|55296),t=56320|1023&t),i+=h(t);return i}(i)}};void 0===(i=function(){return y}.call(t,n,t,e))||(e.exports=i)}()}).call(this,n(85)(e),n(3))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),i=r.length,o="";for(n=0;n<i;n+=3)o+=e[r[n]>>2],o+=e[(3&r[n])<<4|r[n+1]>>4],o+=e[(15&r[n+1])<<2|r[n+2]>>6],o+=e[63&r[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},t.decode=function(e){var t,r,i,o,s,a=.75*e.length,u=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),h=new Uint8Array(c);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],i=n[e.charCodeAt(t+1)],o=n[e.charCodeAt(t+2)],s=n[e.charCodeAt(t+3)],h[l++]=r<<2|i>>4,h[l++]=(15&i)<<4|o>>2,h[l++]=(3&o)<<6|63&s;return c}}()},function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),i=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),o=n&&n.prototype.append&&n.prototype.getBlob;function s(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var i=new Uint8Array(n.byteLength);i.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=i.buffer}e[t]=r}}}function a(e,t){t=t||{};var r=new n;s(e);for(var i=0;i<e.length;i++)r.append(e[i]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return s(e),new Blob(e,t||{})}e.exports=r?i?t.Blob:u:o?a:void 0}).call(this,n(3))},function(e,t,n){(function(t){var r=n(33),i=n(16);e.exports=l;var o,s=/\n/g,a=/\\n/g;function u(){}function l(e){r.call(this,e),this.query=this.query||{},o||(t.___eio||(t.___eio=[]),o=t.___eio),this.index=o.length;var n=this;o.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}i(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},l.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,i=document.createElement("form"),o=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=u,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function l(){c(),t()}function c(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),c(),e=e.replace(a,"\\\n"),this.area.value=e.replace(s,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&l()}:this.iframe.onload=l}}).call(this,n(3))},function(e,t,n){(function(t){var r,i=n(21),o=n(11),s=n(15),a=n(16),u=n(35),l=n(0)("engine.io-client:websocket"),c=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(90)}catch(e){}var h=c;function d(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=c&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(h=r),i.call(this,e)}h||"undefined"!=typeof window||(h=r),e.exports=d,a(d,i),d.prototype.name="websocket",d.prototype.supportsBinary=!0,d.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new h(e,t):new h(e):new h(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},d.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},d.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,i=0,s=r;i<s;i++)!function(e){o.encodePacket(e,n.supportsBinary,function(i){if(!n.usingBrowserWebSocket){var o={};if(e.options&&(o.compress=e.options.compress),n.perMessageDeflate)("string"==typeof i?t.Buffer.byteLength(i):i.length)<n.perMessageDeflate.threshold&&(o.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,o)}catch(e){l("websocket closed before onclose event")}--r||a()})}(e[i]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},d.prototype.onClose=function(){i.prototype.onClose.call(this)},d.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},d.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=s.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},d.prototype.check=function(){return!(!h||"__initialize"in h&&this.name===d.prototype.name)}}).call(this,n(3))},function(e,t){},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,i;return t=e,(r=[{key:"calls",value:function(e){return this.client.get("/agent/calls",e)}},{key:"login",value:function(e){return this.client.post("/agent/login",e)}},{key:"loginManual",value:function(e){return this.login(Object.assign(e,{mode:"manual"}))}},{key:"logout",value:function(){return this.client.post("/agent/logout")}},{key:"connect",value:function(){return this.client.post("/agent/connect")}},{key:"campaigns",value:function(e){return this.client.get("/agent/campaigns",e)}},{key:"qualifyCall",value:function(e,t){return this.client.post("/agent/call/"+e+"/qualify",t)}},{key:"hangupCall",value:function(e){return this.client.post("/agent/call/"+e+"/hangup")}},{key:"enterManualCallMode",value:function(){return this.client.post("/agent/manual_call/enter")}},{key:"exitManualCallMode",value:function(){return this.client.post("/agent/manual_call/exit")}},{key:"enterManualCallAcwMode",value:function(){return this.client.post("/agent/manual_call_acw/enter")}},{key:"exitManualCallAcwMode",value:function(){return this.client.post("/agent/manual_call_acw/exit")}},{key:"dialManualCall",value:function(e){return this.client.post("/agent/manual_call/dial",e)}},{key:"dialManualCallAcw",value:function(e){return this.client.post("/agent/manual_call_acw/dial",e)}}])&&n(t.prototype,r),i&&n(t,i),e}();e.exports=r},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,i;return t=e,(r=[{key:"me",value:function(){return this.client.get("/me")}},{key:"authenticate",value:function(e){return this.client.post("/authenticate",e)}}])&&n(t.prototype,r),i&&n(t,i),e}();e.exports=r},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,i;return t=e,(r=[{key:"history",value:function(e){return this.client.get("/calls",e)}},{key:"download",value:function(e,t,n,r){return this.client.get("/records/".concat(e,"/").concat(t,"/").concat(n,"/").concat(r))}}])&&n(t.prototype,r),i&&n(t,i),e}();e.exports=r},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(97),o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.socket=t}var t,n,o;return t=e,(n=[{key:"integration",value:function(){return this.socket}},{key:"extension",value:function(e){var t="wss://"+e.host+":"+e.port,n={sockets:[new i.WebSocketInterface(t)],register:!0,register_expires:30,session_timers:!1,uri:"sip:"+e.user+"@"+e.host,password:e.password};return new i.UA(n)}}])&&r(t.prototype,n),o&&r(t,o),e}();e.exports=o},function(e,t,n){"use strict";var r=n(98),i=n(41),o=n(1),s=n(8),a=n(2),u=n(110),l=n(12),c=n(22),h=n(5),d=n(126);n(0)("JsSIP")("version %s",i.version),e.exports={C:o,Exceptions:s,Utils:a,UA:u,URI:l,NameAddrHeader:c,WebSocketInterface:d,Grammar:h,debug:n(0),adapter:r,get name(){return i.title},get version(){return i.version}}},function(e,t,n){"use strict";(function(t){var r=n(99);e.exports=r({window:t.window})}).call(this,n(3))},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){var i=e&&e.window,o={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);var a=r.log,u=r.detectBrowser(i),l=n(100)||null,c=n(102)||null,h=n(106)||null,d=n(108)||null,f=n(109)||null,p={browserDetails:u,commonShim:f,extractVersion:r.extractVersion,disableLog:r.disableLog,disableWarnings:r.disableWarnings};switch(u.browser){case"chrome":if(!l||!l.shimPeerConnection||!o.shimChrome)return a("Chrome shim is not included in this adapter release."),p;a("adapter.js shimming chrome."),p.browserShim=l,f.shimCreateObjectURL(i),l.shimGetUserMedia(i),l.shimMediaStream(i),l.shimSourceObject(i),l.shimPeerConnection(i),l.shimOnTrack(i),l.shimAddTrackRemoveTrack(i),l.shimGetSendersWithDtmf(i),l.shimSenderReceiverGetStats(i),l.fixNegotiationNeeded(i),f.shimRTCIceCandidate(i),f.shimMaxMessageSize(i),f.shimSendThrowTypeError(i);break;case"firefox":if(!h||!h.shimPeerConnection||!o.shimFirefox)return a("Firefox shim is not included in this adapter release."),p;a("adapter.js shimming firefox."),p.browserShim=h,f.shimCreateObjectURL(i),h.shimGetUserMedia(i),h.shimSourceObject(i),h.shimPeerConnection(i),h.shimOnTrack(i),h.shimRemoveStream(i),h.shimSenderGetStats(i),h.shimReceiverGetStats(i),h.shimRTCDataChannel(i),f.shimRTCIceCandidate(i),f.shimMaxMessageSize(i),f.shimSendThrowTypeError(i);break;case"edge":if(!c||!c.shimPeerConnection||!o.shimEdge)return a("MS edge shim is not included in this adapter release."),p;a("adapter.js shimming edge."),p.browserShim=c,f.shimCreateObjectURL(i),c.shimGetUserMedia(i),c.shimPeerConnection(i),c.shimReplaceTrack(i),f.shimMaxMessageSize(i),f.shimSendThrowTypeError(i);break;case"safari":if(!d||!o.shimSafari)return a("Safari shim is not included in this adapter release."),p;a("adapter.js shimming safari."),p.browserShim=d,f.shimCreateObjectURL(i),d.shimRTCIceServerUrls(i),d.shimCreateOfferLegacy(i),d.shimCallbacksAPI(i),d.shimLocalStreamsAPI(i),d.shimRemoteStreamsAPI(i),d.shimTrackEventTransceiver(i),d.shimGetUserMedia(i),f.shimRTCIceCandidate(i),f.shimMaxMessageSize(i),f.shimSendThrowTypeError(i);break;default:a("Unsupported browser!")}return p}},function(e,t,n){"use strict";var r=n(6),i=r.log;function o(e,t,n){var r=n?"outbound-rtp":"inbound-rtp",i=new Map;if(null===t)return i;var o=[];return e.forEach(function(e){"track"===e.type&&e.trackIdentifier===t.id&&o.push(e)}),o.forEach(function(t){e.forEach(function(n){n.type===r&&n.trackId===t.id&&function e(t,n,r){n&&!r.has(n.id)&&(r.set(n.id,n),Object.keys(n).forEach(function(i){i.endsWith("Id")?e(t,t.get(n[i]),r):i.endsWith("Ids")&&n[i].forEach(function(n){e(t,t.get(n),r)})}))}(e,n,i)})}),i}e.exports={shimGetUserMedia:n(101),shimMediaStream:function(e){e.MediaStream=e.MediaStream||e.webkitMediaStream},shimOnTrack:function(e){if("object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype)r.wrapPeerConnectionEvent(e,"track",function(e){return e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e});else{Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});var t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var n=this;return n._ontrackpoly||(n._ontrackpoly=function(t){t.stream.addEventListener("addtrack",function(r){var i;i=e.RTCPeerConnection.prototype.getReceivers?n.getReceivers().find(function(e){return e.track&&e.track.id===r.track.id}):{track:r.track};var o=new Event("track");o.track=r.track,o.receiver=i,o.transceiver={receiver:i},o.streams=[t.stream],n.dispatchEvent(o)}),t.stream.getTracks().forEach(function(r){var i;i=e.RTCPeerConnection.prototype.getReceivers?n.getReceivers().find(function(e){return e.track&&e.track.id===r.id}):{track:r};var o=new Event("track");o.track=r,o.receiver=i,o.transceiver={receiver:i},o.streams=[t.stream],n.dispatchEvent(o)})},n.addEventListener("addstream",n._ontrackpoly)),t.apply(n,arguments)}}},shimGetSendersWithDtmf:function(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){var t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};var n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){var i=n.apply(this,arguments);return i||(i=t(this,e),this._senders.push(i)),i};var r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);var t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}var i=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){var n=this;n._senders=n._senders||[],i.apply(n,[e]),e.getTracks().forEach(function(e){n._senders.push(t(n,e))})};var o=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;t._senders=t._senders||[],o.apply(t,[e]),e.getTracks().forEach(function(e){var n=t._senders.find(function(t){return t.track===e});n&&t._senders.splice(t._senders.indexOf(n),1)})}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){var s=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){var e=this,t=s.apply(e,[]);return t.forEach(function(t){t._pc=e}),t},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}},shimSenderReceiverGetStats:function(e){if("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver){if(!("getStats"in e.RTCRtpSender.prototype)){var t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){var e=this,n=t.apply(e,[]);return n.forEach(function(t){t._pc=e}),n});var n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){var e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){var e=this;return this._pc.getStats().then(function(t){return o(t,e.track,!0)})}}if(!("getStats"in e.RTCRtpReceiver.prototype)){var i=e.RTCPeerConnection.prototype.getReceivers;i&&(e.RTCPeerConnection.prototype.getReceivers=function(){var e=this,t=i.apply(e,[]);return t.forEach(function(t){t._pc=e}),t}),r.wrapPeerConnectionEvent(e,"track",function(e){return e.receiver._pc=e.srcElement,e}),e.RTCRtpReceiver.prototype.getStats=function(){var e=this;return this._pc.getStats().then(function(t){return o(t,e.track,!1)})}}if("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype){var s=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){var t,n,r,i=arguments[0];return this.getSenders().forEach(function(e){e.track===i&&(t?r=!0:t=e)}),this.getReceivers().forEach(function(e){return e.track===i&&(n?r=!0:n=e),e.track===i}),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return s.apply(this,arguments)}}}},shimSourceObject:function(e){var t=e&&e.URL;"object"==typeof e&&(!e.HTMLMediaElement||"srcObject"in e.HTMLMediaElement.prototype||Object.defineProperty(e.HTMLMediaElement.prototype,"srcObject",{get:function(){return this._srcObject},set:function(e){var n=this;this._srcObject=e,this.src&&t.revokeObjectURL(this.src),e?(this.src=t.createObjectURL(e),e.addEventListener("addtrack",function(){n.src&&t.revokeObjectURL(n.src),n.src=t.createObjectURL(e)}),e.addEventListener("removetrack",function(){n.src&&t.revokeObjectURL(n.src),n.src=t.createObjectURL(e)})):this.src=""}}))},shimAddTrackRemoveTrackWithNative:function(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){var e=this;return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map(function(t){return e._shimmedLocalStreams[t][0]})};var t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};var r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};var n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){var t=this;this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach(function(e){if(t.getSenders().find(function(t){return t.track===e}))throw new DOMException("Track already exists.","InvalidAccessError")});var r=t.getSenders();n.apply(this,arguments);var i=t.getSenders().filter(function(e){return-1===r.indexOf(e)});this._shimmedLocalStreams[e.id]=[e].concat(i)};var r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};var i=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){var t=this;return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach(function(n){var r=t._shimmedLocalStreams[n].indexOf(e);-1!==r&&t._shimmedLocalStreams[n].splice(r,1),1===t._shimmedLocalStreams[n].length&&delete t._shimmedLocalStreams[n]}),i.apply(this,arguments)}},shimAddTrackRemoveTrack:function(e){var t=r.detectBrowser(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return this.shimAddTrackRemoveTrackWithNative(e);var n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){var e=this,t=n.apply(this);return e._reverseStreams=e._reverseStreams||{},t.map(function(t){return e._reverseStreams[t.id]})};var i=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){var n=this;if(n._streams=n._streams||{},n._reverseStreams=n._reverseStreams||{},t.getTracks().forEach(function(e){if(n.getSenders().find(function(t){return t.track===e}))throw new DOMException("Track already exists.","InvalidAccessError")}),!n._reverseStreams[t.id]){var r=new e.MediaStream(t.getTracks());n._streams[t.id]=r,n._reverseStreams[r.id]=t,t=r}i.apply(n,[t])};var o=e.RTCPeerConnection.prototype.removeStream;function s(e,t){var n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(function(t){var r=e._reverseStreams[t],i=e._streams[r.id];n=n.replace(new RegExp(i.id,"g"),r.id)}),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;t._streams=t._streams||{},t._reverseStreams=t._reverseStreams||{},o.apply(t,[t._streams[e.id]||e]),delete t._reverseStreams[t._streams[e.id]?t._streams[e.id].id:e.id],delete t._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){var r=this;if("closed"===r.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");var i=[].slice.call(arguments,1);if(1!==i.length||!i[0].getTracks().find(function(e){return e===t}))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");if(r.getSenders().find(function(e){return e.track===t}))throw new DOMException("Track already exists.","InvalidAccessError");r._streams=r._streams||{},r._reverseStreams=r._reverseStreams||{};var o=r._streams[n.id];if(o)o.addTrack(t),Promise.resolve().then(function(){r.dispatchEvent(new Event("negotiationneeded"))});else{var s=new e.MediaStream([t]);r._streams[n.id]=s,r._reverseStreams[s.id]=n,r.addStream(s)}return r.getSenders().find(function(e){return e.track===t})},["createOffer","createAnswer"].forEach(function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=this,t=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(e,[function(n){var r=s(e,n);t[0].apply(null,[r])},function(e){t[1]&&t[1].apply(null,e)},arguments[2]]):n.apply(e,arguments).then(function(t){return s(e,t)})}});var a=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=function(e,t){var n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(function(t){var r=e._reverseStreams[t],i=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),i.id)}),new RTCSessionDescription({type:t.type,sdp:n})}(this,arguments[0]),a.apply(this,arguments)):a.apply(this,arguments)};var u=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get:function(){var e=u.get.apply(this);return""===e.type?e:s(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){var t,n=this;if("closed"===n.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(!(e._pc===n))throw new DOMException("Sender was not created by this connection.","InvalidAccessError");n._streams=n._streams||{},Object.keys(n._streams).forEach(function(r){n._streams[r].getTracks().find(function(t){return e.track===t})&&(t=n._streams[r])}),t&&(1===t.getTracks().length?n.removeStream(n._reverseStreams[t.id]):t.removeTrack(e.track),n.dispatchEvent(new Event("negotiationneeded")))}},shimPeerConnection:function(e){var t=r.detectBrowser(e);!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=function(t,n){return i("PeerConnection"),t&&t.iceTransportPolicy&&(t.iceTransports=t.iceTransportPolicy),new e.webkitRTCPeerConnection(t,n)},e.RTCPeerConnection.prototype=e.webkitRTCPeerConnection.prototype,e.webkitRTCPeerConnection.generateCertificate&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return e.webkitRTCPeerConnection.generateCertificate}}));var n=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,t,r){var i=this,o=arguments;if(arguments.length>0&&"function"==typeof e)return n.apply(this,arguments);if(0===n.length&&(0===arguments.length||"function"!=typeof arguments[0]))return n.apply(this,[]);var s=function(e){var t={};return e.result().forEach(function(e){var n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach(function(t){n[t]=e.stat(t)}),t[n.id]=n}),t},a=function(e){return new Map(Object.keys(e).map(function(t){return[t,e[t]]}))};if(arguments.length>=2){return n.apply(this,[function(e){o[1](a(s(e)))},arguments[0]])}return new Promise(function(e,t){n.apply(i,[function(t){e(a(s(t)))},t])}).then(t,r)},t.version<51&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=arguments,t=this,r=new Promise(function(r,i){n.apply(t,[e[0],r,i])});return e.length<2?r:r.then(function(){e[1].apply(null,[])},function(t){e.length>=3&&e[2].apply(null,[t])})}}),t.version<52&&["createOffer","createAnswer"].forEach(function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=this;if(arguments.length<1||1===arguments.length&&"object"==typeof arguments[0]){var t=1===arguments.length?arguments[0]:void 0;return new Promise(function(r,i){n.apply(e,[r,i,t])})}return n.apply(this,arguments)}}),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}});var o=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?o.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}},fixNegotiationNeeded:function(e){r.wrapPeerConnectionEvent(e,"negotiationneeded",function(e){if("stable"===e.target.signalingState)return e})},shimGetDisplayMedia:function(e,t){"getDisplayMedia"in e.navigator||("function"==typeof t?navigator.getDisplayMedia=function(e){return t(e).then(function(t){return e.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:e.video.frameRate||3}},navigator.mediaDevices.getUserMedia(e)})}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}}},function(e,t,n){"use strict";var r=n(6),i=r.log;e.exports=function(e){var t=r.detectBrowser(e),n=e&&e.navigator,o=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;var t={};return Object.keys(e).forEach(function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);var i=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];var o={};"number"==typeof r.ideal?(o[i("min",n)]=r.ideal,t.optional.push(o),(o={})[i("max",n)]=r.ideal,t.optional.push(o)):(o[i("",n)]=r.ideal,t.optional.push(o))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[i("",n)]=r.exact):["min","max"].forEach(function(e){void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[i(e,n)]=r[e])})}}),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},s=function(e,r){if(t.version>=61)return r(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){var s=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};s((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),s(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=o(e.audio)}if(e&&"object"==typeof e.video){var a=e.video.facingMode;a=a&&("object"==typeof a?a:{ideal:a});var u,l=t.version<66;if(a&&("user"===a.exact||"environment"===a.exact||"user"===a.ideal||"environment"===a.ideal)&&(!n.mediaDevices.getSupportedConstraints||!n.mediaDevices.getSupportedConstraints().facingMode||l))if(delete e.video.facingMode,"environment"===a.exact||"environment"===a.ideal?u=["back","rear"]:"user"!==a.exact&&"user"!==a.ideal||(u=["front"]),u)return n.mediaDevices.enumerateDevices().then(function(t){var n=(t=t.filter(function(e){return"videoinput"===e.kind})).find(function(e){return u.some(function(t){return-1!==e.label.toLowerCase().indexOf(t)})});return!n&&t.length&&-1!==u.indexOf("back")&&(n=t[t.length-1]),n&&(e.video.deviceId=a.exact?{exact:n.deviceId}:{ideal:n.deviceId}),e.video=o(e.video),i("chrome: "+JSON.stringify(e)),r(e)});e.video=o(e.video)}return i("chrome: "+JSON.stringify(e)),r(e)},a=function(e){return t.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString:function(){return this.name+(this.message&&": ")+this.message}}};n.getUserMedia=function(e,t,r){s(e,function(e){n.webkitGetUserMedia(e,t,function(e){r&&r(a(e))})})};var u=function(e){return new Promise(function(t,r){n.getUserMedia(e,t,r)})};if(n.mediaDevices||(n.mediaDevices={getUserMedia:u,enumerateDevices:function(){return new Promise(function(t){var n={audio:"audioinput",video:"videoinput"};return e.MediaStreamTrack.getSources(function(e){t(e.map(function(e){return{label:e.label,kind:n[e.kind],deviceId:e.id,groupId:""}}))})})},getSupportedConstraints:function(){return{deviceId:!0,echoCancellation:!0,facingMode:!0,frameRate:!0,height:!0,width:!0}}}),n.mediaDevices.getUserMedia){var l=n.mediaDevices.getUserMedia.bind(n.mediaDevices);n.mediaDevices.getUserMedia=function(e){return s(e,function(e){return l(e).then(function(t){if(e.audio&&!t.getAudioTracks().length||e.video&&!t.getVideoTracks().length)throw t.getTracks().forEach(function(e){e.stop()}),new DOMException("","NotFoundError");return t},function(e){return Promise.reject(a(e))})})}}else n.mediaDevices.getUserMedia=function(e){return u(e)};void 0===n.mediaDevices.addEventListener&&(n.mediaDevices.addEventListener=function(){i("Dummy mediaDevices.addEventListener called.")}),void 0===n.mediaDevices.removeEventListener&&(n.mediaDevices.removeEventListener=function(){i("Dummy mediaDevices.removeEventListener called.")})}},function(e,t,n){"use strict";var r=n(6),i=n(103),o=n(104);e.exports={shimGetUserMedia:n(105),shimPeerConnection:function(e){var t=r.detectBrowser(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){var n=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set:function(e){n.set.call(this,e);var t=new Event("enabled");t.enabled=e,this.dispatchEvent(t)}})}!e.RTCRtpSender||"dtmf"in e.RTCRtpSender.prototype||Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);var s=o(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=i(e.iceServers)),new s(e)},e.RTCPeerConnection.prototype=s.prototype},shimReplaceTrack:function(e){!e.RTCRtpSender||"replaceTrack"in e.RTCRtpSender.prototype||(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter(function(e){if(e&&(e.urls||e.url)){var i=e.urls||e.url;e.url&&!e.urls&&r.deprecated("RTCIceServer.url","RTCIceServer.urls");var o="string"==typeof i;return o&&(i=[i]),i=i.filter(function(e){return 0===e.indexOf("turn:")&&-1!==e.indexOf("transport=udp")&&-1===e.indexOf("turn:[")&&!n?(n=!0,!0):0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp")}),delete e.url,e.urls=o?i[0]:i,!!i.length}})}},function(e,t,n){"use strict";var r=n(40);function i(e,t,n,i,o){var s=r.writeRtpDescription(e.kind,t);if(s+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),s+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":o||"active"),s+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?s+="a=sendrecv\r\n":e.rtpSender?s+="a=sendonly\r\n":e.rtpReceiver?s+="a=recvonly\r\n":s+="a=inactive\r\n",e.rtpSender){var a=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=a;var u="msid:"+(i?i.id:"-")+" "+a+"\r\n";s+="a="+u,s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+u,e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+u,s+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),s}function o(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},i=function(e,t,n,i){var o=r(e.parameters.apt,n),s=r(t.parameters.apt,i);return o&&s&&o.name.toLowerCase()===s.name.toLowerCase()};return e.codecs.forEach(function(r){for(var o=0;o<t.codecs.length;o++){var s=t.codecs[o];if(r.name.toLowerCase()===s.name.toLowerCase()&&r.clockRate===s.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&s.parameters.apt&&!i(r,s,e.codecs,t.codecs))continue;(s=JSON.parse(JSON.stringify(s))).numChannels=Math.min(r.numChannels,s.numChannels),n.codecs.push(s),s.rtcpFeedback=s.rtcpFeedback.filter(function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1});break}}}),e.headerExtensions.forEach(function(e){for(var r=0;r<t.headerExtensions.length;r++){var i=t.headerExtensions[r];if(e.uri===i.uri){n.headerExtensions.push(i);break}}}),n}function s(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function a(e,t){var n=e.getRemoteCandidates().find(function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type});return n||e.addRemoteCandidate(t),!n}function u(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function l(t,n,r,i){var o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=i,e.setTimeout(function(){t._dispatchEvent("track",o)})}var c=function(n){var i=this,o=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach(function(e){i[e]=o[e].bind(o)}),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw u("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter(function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var i="string"==typeof r;return i&&(r=[r]),r=r.filter(function(e){return 0!==e.indexOf("turn:")||-1===e.indexOf("transport=udp")||-1!==e.indexOf("turn:[")||n?0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp"):(n=!0,!0)}),delete e.url,e.urls=i?r[0]:r,!!r.length}})}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var s=n.iceCandidatePoolSize;s>0;s--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(c.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(c.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),c.prototype.onicecandidate=null,c.prototype.onaddstream=null,c.prototype.ontrack=null,c.prototype.onremovestream=null,c.prototype.onsignalingstatechange=null,c.prototype.oniceconnectionstatechange=null,c.prototype.onconnectionstatechange=null,c.prototype.onicegatheringstatechange=null,c.prototype.onnegotiationneeded=null,c.prototype.ondatachannel=null,c.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},c.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},c.prototype.getConfiguration=function(){return this._config},c.prototype.getLocalStreams=function(){return this.localStreams},c.prototype.getRemoteStreams=function(){return this.remoteStreams},c.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var i=this._createIceAndDtlsTransports();r.iceTransport=i.iceTransport,r.dtlsTransport=i.dtlsTransport}return t||this.transceivers.push(r),r},c.prototype.addTrack=function(t,n){if(this._isClosed)throw u("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find(function(e){return e.track===t}))throw u("InvalidAccessError","Track already exists.");for(var i=0;i<this.transceivers.length;i++)this.transceivers[i].track||this.transceivers[i].kind!==t.kind||(r=this.transceivers[i]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},c.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach(function(t){n.addTrack(t,e)});else{var r=e.clone();e.getTracks().forEach(function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",function(e){n.enabled=e.enabled})}),r.getTracks().forEach(function(e){n.addTrack(e,r)})}},c.prototype.removeTrack=function(t){if(this._isClosed)throw u("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find(function(e){return e.rtpSender===t});if(!n)throw u("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map(function(e){return e.stream}).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},c.prototype.removeStream=function(e){var t=this;e.getTracks().forEach(function(e){var n=t.getSenders().find(function(t){return t.track===e});n&&t.removeTrack(n)})},c.prototype.getSenders=function(){return this.transceivers.filter(function(e){return!!e.rtpSender}).map(function(e){return e.rtpSender})},c.prototype.getReceivers=function(){return this.transceivers.filter(function(e){return!!e.rtpReceiver}).map(function(e){return e.rtpReceiver})},c.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var i=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(i,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;i.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},i.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),i},c.prototype._gather=function(t,n){var i=this,o=this.transceivers[n].iceGatherer;if(!o.onlocalcandidate){var s=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,o.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),o.onlocalcandidate=function(e){if(!(i.usingBundle&&n>0)){var s=new Event("icecandidate");s.candidate={sdpMid:t,sdpMLineIndex:n};var a=e.candidate,u=!a||0===Object.keys(a).length;if(u)"new"!==o.state&&"gathering"!==o.state||(o.state="completed");else{"new"===o.state&&(o.state="gathering"),a.component=1,a.ufrag=o.getLocalParameters().usernameFragment;var l=r.writeCandidate(a);s.candidate=Object.assign(s.candidate,r.parseCandidate(l)),s.candidate.candidate=l,s.candidate.toJSON=function(){return{candidate:s.candidate.candidate,sdpMid:s.candidate.sdpMid,sdpMLineIndex:s.candidate.sdpMLineIndex,usernameFragment:s.candidate.usernameFragment}}}var c=r.getMediaSections(i._localDescription.sdp);c[s.candidate.sdpMLineIndex]+=u?"a=end-of-candidates\r\n":"a="+s.candidate.candidate+"\r\n",i._localDescription.sdp=r.getDescription(i._localDescription.sdp)+c.join("");var h=i.transceivers.every(function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state});"gathering"!==i.iceGatheringState&&(i.iceGatheringState="gathering",i._emitGatheringStateChange()),u||i._dispatchEvent("icecandidate",s),h&&(i._dispatchEvent("icecandidate",new Event("icecandidate")),i.iceGatheringState="complete",i._emitGatheringStateChange())}},e.setTimeout(function(){s.forEach(function(e){o.onlocalcandidate(e)})},0)}},c.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},c.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},c.prototype._transceive=function(e,n,i){var s=o(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(s.encodings=e.sendEncodingParameters,s.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(s.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(s)),i&&e.rtpReceiver&&s.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach(function(e){delete e.rtx}),e.recvEncodingParameters.length?s.encodings=e.recvEncodingParameters:s.encodings=[{}],s.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(s.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(s.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(s))},c.prototype.setLocalDescription=function(e){var t,n,i=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(u("TypeError",'Unsupported type "'+e.type+'"'));if(!s("setLocalDescription",e.type,i.signalingState)||i._isClosed)return Promise.reject(u("InvalidStateError","Can not set local "+e.type+" in state "+i.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach(function(e,t){var n=r.parseRtpParameters(e);i.transceivers[t].localCapabilities=n}),i.transceivers.forEach(function(e,t){i._gather(e.mid,t)});else if("answer"===e.type){t=r.splitSections(i._remoteDescription.sdp),n=t.shift();var a=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach(function(e,t){var s=i.transceivers[t],u=s.iceGatherer,l=s.iceTransport,c=s.dtlsTransport,h=s.localCapabilities,d=s.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length)&&!s.rejected){var f=r.getIceParameters(e,n),p=r.getDtlsParameters(e,n);a&&(p.role="server"),i.usingBundle&&0!==t||(i._gather(s.mid,t),"new"===l.state&&l.start(u,f,a?"controlling":"controlled"),"new"===c.state&&c.start(p));var v=o(h,d);i._transceive(s,v.codecs.length>0,!1)}})}return i._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?i._updateSignalingState("have-local-offer"):i._updateSignalingState("stable"),Promise.resolve()},c.prototype.setRemoteDescription=function(i){var c=this;if(-1===["offer","answer"].indexOf(i.type))return Promise.reject(u("TypeError",'Unsupported type "'+i.type+'"'));if(!s("setRemoteDescription",i.type,c.signalingState)||c._isClosed)return Promise.reject(u("InvalidStateError","Can not set remote "+i.type+" in state "+c.signalingState));var h={};c.remoteStreams.forEach(function(e){h[e.id]=e});var d=[],f=r.splitSections(i.sdp),p=f.shift(),v=r.matchPrefix(p,"a=ice-lite").length>0,m=r.matchPrefix(p,"a=group:BUNDLE ").length>0;c.usingBundle=m;var _=r.matchPrefix(p,"a=ice-options:")[0];return c.canTrickleIceCandidates=!!_&&_.substr(14).split(" ").indexOf("trickle")>=0,f.forEach(function(s,u){var l=r.splitLines(s),f=r.getKind(s),_=r.isRejected(s)&&0===r.matchPrefix(s,"a=bundle-only").length,y=l[0].substr(2).split(" ")[2],g=r.getDirection(s,p),T=r.parseMsid(s),C=r.getMid(s)||r.generateIdentifier();if(_||"application"===f&&("DTLS/SCTP"===y||"UDP/DTLS/SCTP"===y))c.transceivers[u]={mid:C,kind:f,protocol:y,rejected:!0};else{var S,b,E,w,R,A,k,I,P;!_&&c.transceivers[u]&&c.transceivers[u].rejected&&(c.transceivers[u]=c._createTransceiver(f,!0));var O,x,D=r.parseRtpParameters(s);_||(O=r.getIceParameters(s,p),(x=r.getDtlsParameters(s,p)).role="client"),k=r.parseRtpEncodingParameters(s);var N=r.parseRtcpParameters(s),U=r.matchPrefix(s,"a=end-of-candidates",p).length>0,M=r.matchPrefix(s,"a=candidate:").map(function(e){return r.parseCandidate(e)}).filter(function(e){return 1===e.component});if(("offer"===i.type||"answer"===i.type)&&!_&&m&&u>0&&c.transceivers[u]&&(c._disposeIceAndDtlsTransports(u),c.transceivers[u].iceGatherer=c.transceivers[0].iceGatherer,c.transceivers[u].iceTransport=c.transceivers[0].iceTransport,c.transceivers[u].dtlsTransport=c.transceivers[0].dtlsTransport,c.transceivers[u].rtpSender&&c.transceivers[u].rtpSender.setTransport(c.transceivers[0].dtlsTransport),c.transceivers[u].rtpReceiver&&c.transceivers[u].rtpReceiver.setTransport(c.transceivers[0].dtlsTransport)),"offer"!==i.type||_){if("answer"===i.type&&!_){b=(S=c.transceivers[u]).iceGatherer,E=S.iceTransport,w=S.dtlsTransport,R=S.rtpReceiver,A=S.sendEncodingParameters,I=S.localCapabilities,c.transceivers[u].recvEncodingParameters=k,c.transceivers[u].remoteCapabilities=D,c.transceivers[u].rtcpParameters=N,M.length&&"new"===E.state&&(!v&&!U||m&&0!==u?M.forEach(function(e){a(S.iceTransport,e)}):E.setRemoteCandidates(M)),m&&0!==u||("new"===E.state&&E.start(b,O,"controlling"),"new"===w.state&&w.start(x)),!o(S.localCapabilities,S.remoteCapabilities).codecs.filter(function(e){return"rtx"===e.name.toLowerCase()}).length&&S.sendEncodingParameters[0].rtx&&delete S.sendEncodingParameters[0].rtx,c._transceive(S,"sendrecv"===g||"recvonly"===g,"sendrecv"===g||"sendonly"===g),!R||"sendrecv"!==g&&"sendonly"!==g?delete S.rtpReceiver:(P=R.track,T?(h[T.stream]||(h[T.stream]=new e.MediaStream),n(P,h[T.stream]),d.push([P,R,h[T.stream]])):(h.default||(h.default=new e.MediaStream),n(P,h.default),d.push([P,R,h.default])))}}else{(S=c.transceivers[u]||c._createTransceiver(f)).mid=C,S.iceGatherer||(S.iceGatherer=c._createIceGatherer(u,m)),M.length&&"new"===S.iceTransport.state&&(!U||m&&0!==u?M.forEach(function(e){a(S.iceTransport,e)}):S.iceTransport.setRemoteCandidates(M)),I=e.RTCRtpReceiver.getCapabilities(f),t<15019&&(I.codecs=I.codecs.filter(function(e){return"rtx"!==e.name})),A=S.sendEncodingParameters||[{ssrc:1001*(2*u+2)}];var L,q=!1;if("sendrecv"===g||"sendonly"===g){if(q=!S.rtpReceiver,R=S.rtpReceiver||new e.RTCRtpReceiver(S.dtlsTransport,f),q)P=R.track,T&&"-"===T.stream||(T?(h[T.stream]||(h[T.stream]=new e.MediaStream,Object.defineProperty(h[T.stream],"id",{get:function(){return T.stream}})),Object.defineProperty(P,"id",{get:function(){return T.track}}),L=h[T.stream]):(h.default||(h.default=new e.MediaStream),L=h.default)),L&&(n(P,L),S.associatedRemoteMediaStreams.push(L)),d.push([P,R,L])}else S.rtpReceiver&&S.rtpReceiver.track&&(S.associatedRemoteMediaStreams.forEach(function(t){var n,r,i=t.getTracks().find(function(e){return e.id===S.rtpReceiver.track.id});i&&(n=i,(r=t).removeTrack(n),r.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:n})))}),S.associatedRemoteMediaStreams=[]);S.localCapabilities=I,S.remoteCapabilities=D,S.rtpReceiver=R,S.rtcpParameters=N,S.sendEncodingParameters=A,S.recvEncodingParameters=k,c._transceive(c.transceivers[u],!1,q)}}}),void 0===c._dtlsRole&&(c._dtlsRole="offer"===i.type?"active":"passive"),c._remoteDescription={type:i.type,sdp:i.sdp},"offer"===i.type?c._updateSignalingState("have-remote-offer"):c._updateSignalingState("stable"),Object.keys(h).forEach(function(t){var n=h[t];if(n.getTracks().length){if(-1===c.remoteStreams.indexOf(n)){c.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout(function(){c._dispatchEvent("addstream",r)})}d.forEach(function(e){var t=e[0],r=e[1];n.id===e[2].id&&l(c,t,r,[n])})}}),d.forEach(function(e){e[2]||l(c,e[0],e[1],[])}),e.setTimeout(function(){c&&c.transceivers&&c.transceivers.forEach(function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))})},4e3),Promise.resolve()},c.prototype.close=function(){this.transceivers.forEach(function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()}),this._isClosed=!0,this._updateSignalingState("closed")},c.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},c.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout(function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}},0))},c.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach(function(e){t[e.iceTransport.state]++}),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},c.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach(function(e){t[e.iceTransport.state]++,t[e.dtlsTransport.state]++}),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},c.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(u("InvalidStateError","Can not call createOffer after close"));var o=n.transceivers.filter(function(e){return"audio"===e.kind}).length,s=n.transceivers.filter(function(e){return"video"===e.kind}).length,a=arguments[0];if(a){if(a.mandatory||a.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==a.offerToReceiveAudio&&(o=!0===a.offerToReceiveAudio?1:!1===a.offerToReceiveAudio?0:a.offerToReceiveAudio),void 0!==a.offerToReceiveVideo&&(s=!0===a.offerToReceiveVideo?1:!1===a.offerToReceiveVideo?0:a.offerToReceiveVideo)}for(n.transceivers.forEach(function(e){"audio"===e.kind?--o<0&&(e.wantReceive=!1):"video"===e.kind&&--s<0&&(e.wantReceive=!1)});o>0||s>0;)o>0&&(n._createTransceiver("audio"),o--),s>0&&(n._createTransceiver("video"),s--);var l=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach(function(i,o){var s=i.track,a=i.kind,u=i.mid||r.generateIdentifier();i.mid=u,i.iceGatherer||(i.iceGatherer=n._createIceGatherer(o,n.usingBundle));var l=e.RTCRtpSender.getCapabilities(a);t<15019&&(l.codecs=l.codecs.filter(function(e){return"rtx"!==e.name})),l.codecs.forEach(function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),i.remoteCapabilities&&i.remoteCapabilities.codecs&&i.remoteCapabilities.codecs.forEach(function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)})}),l.headerExtensions.forEach(function(e){(i.remoteCapabilities&&i.remoteCapabilities.headerExtensions||[]).forEach(function(t){e.uri===t.uri&&(e.id=t.id)})});var c=i.sendEncodingParameters||[{ssrc:1001*(2*o+1)}];s&&t>=15019&&"video"===a&&!c[0].rtx&&(c[0].rtx={ssrc:c[0].ssrc+1}),i.wantReceive&&(i.rtpReceiver=new e.RTCRtpReceiver(i.dtlsTransport,a)),i.localCapabilities=l,i.sendEncodingParameters=c}),"max-compat"!==n._config.bundlePolicy&&(l+="a=group:BUNDLE "+n.transceivers.map(function(e){return e.mid}).join(" ")+"\r\n"),l+="a=ice-options:trickle\r\n",n.transceivers.forEach(function(e,t){l+=i(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),l+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach(function(e){e.component=1,l+="a="+r.writeCandidate(e)+"\r\n"}),"completed"===e.iceGatherer.state&&(l+="a=end-of-candidates\r\n"))});var c=new e.RTCSessionDescription({type:"offer",sdp:l});return Promise.resolve(c)},c.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(u("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(u("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var s=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(s+="a=group:BUNDLE "+n.transceivers.map(function(e){return e.mid}).join(" ")+"\r\n"),s+="a=ice-options:trickle\r\n";var a=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach(function(e,r){if(!(r+1>a)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?s+="m=application 0 DTLS/SCTP 5000\r\n":s+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?s+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(s+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(s+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var u;if(e.stream)"audio"===e.kind?u=e.stream.getAudioTracks()[0]:"video"===e.kind&&(u=e.stream.getVideoTracks()[0]),u&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1});var l=o(e.localCapabilities,e.remoteCapabilities);!l.codecs.filter(function(e){return"rtx"===e.name.toLowerCase()}).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,s+=i(e,l,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(s+="a=rtcp-rsize\r\n")}});var l=new e.RTCSessionDescription({type:"answer",sdp:s});return Promise.resolve(l)},c.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise(function(i,o){if(!n._remoteDescription)return o(u("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var s=e.sdpMLineIndex;if(e.sdpMid)for(var l=0;l<n.transceivers.length;l++)if(n.transceivers[l].mid===e.sdpMid){s=l;break}var c=n.transceivers[s];if(!c)return o(u("OperationError","Can not add ICE candidate"));if(c.rejected)return i();var h=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===h.protocol&&(0===h.port||9===h.port))return i();if(h.component&&1!==h.component)return i();if((0===s||s>0&&c.iceTransport!==n.transceivers[0].iceTransport)&&!a(c.iceTransport,h))return o(u("OperationError","Can not add ICE candidate"));var d=e.candidate.trim();0===d.indexOf("a=")&&(d=d.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[s]+="a="+(h.type?d:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var f=0;f<n.transceivers.length&&(n.transceivers[f].rejected||(n.transceivers[f].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[f]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));f++);i()})},c.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach(function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)}),!n)throw u("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach(function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach(function(t){e[t]&&r.push(e[t].getStats())})}),Promise.all(r).then(function(e){var t=new Map;return e.forEach(function(e){e.forEach(function(e){t.set(e.id,e)})}),t})};["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach(function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then(function(e){var t=new Map;return Object.keys(e).forEach(function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])}),t})}}});var h=["createOffer","createAnswer"];return h.forEach(function(e){var t=c.prototype[e];c.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then(function(t){"function"==typeof e[0]&&e[0].apply(null,[t])},function(t){"function"==typeof e[1]&&e[1].apply(null,[t])}):t.apply(this,arguments)}}),(h=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach(function(e){var t=c.prototype[e];c.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then(function(){"function"==typeof e[1]&&e[1].apply(null)},function(t){"function"==typeof e[2]&&e[2].apply(null,[t])}):t.apply(this,arguments)}}),["getStats"].forEach(function(e){var t=c.prototype[e];c.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then(function(){"function"==typeof e[1]&&e[1].apply(null)}):t.apply(this,arguments)}}),c}},function(e,t,n){"use strict";e.exports=function(e){var t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch(function(e){return Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function(){return this.name}}}(e))})}}},function(e,t,n){"use strict";var r=n(6);e.exports={shimGetUserMedia:n(107),shimOnTrack:function(e){"object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&(this.removeEventListener("track",this._ontrack),this.removeEventListener("addstream",this._ontrackpoly)),this.addEventListener("track",this._ontrack=e),this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(t){var n=new Event("track");n.track=t,n.receiver={track:t},n.transceiver={receiver:n.receiver},n.streams=[e.stream],this.dispatchEvent(n)}.bind(this))}.bind(this))},enumerable:!0,configurable:!0}),"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})},shimSourceObject:function(e){"object"==typeof e&&(!e.HTMLMediaElement||"srcObject"in e.HTMLMediaElement.prototype||Object.defineProperty(e.HTMLMediaElement.prototype,"srcObject",{get:function(){return this.mozSrcObject},set:function(e){this.mozSrcObject=e}}))},shimPeerConnection:function(e){var t=r.detectBrowser(e);if("object"==typeof e&&(e.RTCPeerConnection||e.mozRTCPeerConnection)){e.RTCPeerConnection||(e.RTCPeerConnection=function(n,r){if(t.version<38&&n&&n.iceServers){for(var i=[],o=0;o<n.iceServers.length;o++){var s=n.iceServers[o];if(s.hasOwnProperty("urls"))for(var a=0;a<s.urls.length;a++){var u={url:s.urls[a]};0===s.urls[a].indexOf("turn")&&(u.username=s.username,u.credential=s.credential),i.push(u)}else i.push(n.iceServers[o])}n.iceServers=i}return new e.mozRTCPeerConnection(n,r)},e.RTCPeerConnection.prototype=e.mozRTCPeerConnection.prototype,e.mozRTCPeerConnection.generateCertificate&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return e.mozRTCPeerConnection.generateCertificate}}),e.RTCSessionDescription=e.mozRTCSessionDescription,e.RTCIceCandidate=e.mozRTCIceCandidate),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}});var n=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())};var i={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},o=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,n,r){return o.apply(this,[e||null]).then(function(e){if(t.version<48&&(e=function(e){var t=new Map;return Object.keys(e).forEach(function(n){t.set(n,e[n]),t[n]=e[n]}),t}(e)),t.version<53&&!n)try{e.forEach(function(e){e.type=i[e.type]||e.type})}catch(t){if("TypeError"!==t.name)throw t;e.forEach(function(t,n){e.set(n,Object.assign({},t,{type:i[t.type]||t.type}))})}return e}).then(n,r)}}},shimSenderGetStats:function(e){if("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&!(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)){var t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){var e=this,n=t.apply(e,[]);return n.forEach(function(t){t._pc=e}),n});var n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){var e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}},shimReceiverGetStats:function(e){if("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&!(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)){var t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){var e=this,n=t.apply(e,[]);return n.forEach(function(t){t._pc=e}),n}),r.wrapPeerConnectionEvent(e,"track",function(e){return e.receiver._pc=e.srcElement,e}),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}},shimRemoveStream:function(e){!e.RTCPeerConnection||"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;r.deprecated("removeStream","removeTrack"),this.getSenders().forEach(function(n){n.track&&-1!==e.getTracks().indexOf(n.track)&&t.removeTrack(n)})})},shimRTCDataChannel:function(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)},shimGetDisplayMedia:function(e,t){"getDisplayMedia"in e.navigator||(navigator.getDisplayMedia=function(e){if(!e||!e.video){var n=new DOMException("getDisplayMedia without video constraints is undefined");return n.name="NotFoundError",n.code=8,Promise.reject(n)}return!0===e.video?e.video={mediaSource:t}:e.video.mediaSource=t,navigator.mediaDevices.getUserMedia(e)})}}},function(e,t,n){"use strict";var r=n(6),i=r.log;e.exports=function(e){var t=r.detectBrowser(e),n=e&&e.navigator,o=e&&e.MediaStreamTrack,s=function(e){return{name:{InternalError:"NotReadableError",NotSupportedError:"TypeError",PermissionDeniedError:"NotAllowedError",SecurityError:"NotAllowedError"}[e.name]||e.name,message:{"The operation is insecure.":"The request is not allowed by the user agent or the platform in the current context."}[e.message]||e.message,constraint:e.constraint,toString:function(){return this.name+(this.message&&": ")+this.message}}},a=function(e,r,o){var a=function(e){if("object"!=typeof e||e.require)return e;var t=[];return Object.keys(e).forEach(function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r=e[n]="object"==typeof e[n]?e[n]:{ideal:e[n]};if(void 0===r.min&&void 0===r.max&&void 0===r.exact||t.push(n),void 0!==r.exact&&("number"==typeof r.exact?r.min=r.max=r.exact:e[n]=r.exact,delete r.exact),void 0!==r.ideal){e.advanced=e.advanced||[];var i={};"number"==typeof r.ideal?i[n]={min:r.ideal,max:r.ideal}:i[n]=r.ideal,e.advanced.push(i),delete r.ideal,Object.keys(r).length||delete e[n]}}}),t.length&&(e.require=t),e};return e=JSON.parse(JSON.stringify(e)),t.version<38&&(i("spec: "+JSON.stringify(e)),e.audio&&(e.audio=a(e.audio)),e.video&&(e.video=a(e.video)),i("ff37: "+JSON.stringify(e))),n.mozGetUserMedia(e,r,function(e){o(s(e))})};if(n.mediaDevices||(n.mediaDevices={getUserMedia:function(e){return new Promise(function(t,n){a(e,t,n)})},addEventListener:function(){},removeEventListener:function(){}}),n.mediaDevices.enumerateDevices=n.mediaDevices.enumerateDevices||function(){return new Promise(function(e){e([{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}])})},t.version<41){var u=n.mediaDevices.enumerateDevices.bind(n.mediaDevices);n.mediaDevices.enumerateDevices=function(){return u().then(void 0,function(e){if("NotFoundError"===e.name)return[];throw e})}}if(t.version<49){var l=n.mediaDevices.getUserMedia.bind(n.mediaDevices);n.mediaDevices.getUserMedia=function(e){return l(e).then(function(t){if(e.audio&&!t.getAudioTracks().length||e.video&&!t.getVideoTracks().length)throw t.getTracks().forEach(function(e){e.stop()}),new DOMException("The object can not be found here.","NotFoundError");return t},function(e){return Promise.reject(s(e))})}}if(!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){var c=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},h=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(e){return"object"==typeof e&&"object"==typeof e.audio&&(e=JSON.parse(JSON.stringify(e)),c(e.audio,"autoGainControl","mozAutoGainControl"),c(e.audio,"noiseSuppression","mozNoiseSuppression")),h(e)},o&&o.prototype.getSettings){var d=o.prototype.getSettings;o.prototype.getSettings=function(){var e=d.apply(this,arguments);return c(e,"mozAutoGainControl","autoGainControl"),c(e,"mozNoiseSuppression","noiseSuppression"),e}}if(o&&o.prototype.applyConstraints){var f=o.prototype.applyConstraints;o.prototype.applyConstraints=function(e){return"audio"===this.kind&&"object"==typeof e&&(e=JSON.parse(JSON.stringify(e)),c(e,"autoGainControl","mozAutoGainControl"),c(e,"noiseSuppression","mozNoiseSuppression")),f.apply(this,[e])}}}n.getUserMedia=function(e,i,o){if(t.version<44)return a(e,i,o);r.deprecated("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(i,o)}}},function(e,t,n){"use strict";var r=n(6);e.exports={shimLocalStreamsAPI:function(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),"getStreamById"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getStreamById=function(e){var t=null;return this._localStreams&&this._localStreams.forEach(function(n){n.id===e&&(t=n)}),this._remoteStreams&&this._remoteStreams.forEach(function(n){n.id===e&&(t=n)}),t}),!("addStream"in e.RTCPeerConnection.prototype)){var t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),-1===this._localStreams.indexOf(e)&&this._localStreams.push(e);var n=this;e.getTracks().forEach(function(r){t.call(n,r,e)})},e.RTCPeerConnection.prototype.addTrack=function(e,n){return n&&(this._localStreams?-1===this._localStreams.indexOf(n)&&this._localStreams.push(n):this._localStreams=[n]),t.call(this,e,n)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);var t=this._localStreams.indexOf(e);if(-1!==t){this._localStreams.splice(t,1);var n=this,r=e.getTracks();this.getSenders().forEach(function(e){-1!==r.indexOf(e.track)&&n.removeTrack(e)})}})}},shimRemoteStreamsAPI:function(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get:function(){return this._onaddstream},set:function(e){this._onaddstream&&this.removeEventListener("addstream",this._onaddstream),this.addEventListener("addstream",this._onaddstream=e)}});var t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach(function(t){if(e._remoteStreams||(e._remoteStreams=[]),!(e._remoteStreams.indexOf(t)>=0)){e._remoteStreams.push(t);var n=new Event("addstream");n.stream=t,e.dispatchEvent(n)}})}),t.apply(e,arguments)}}},shimCallbacksAPI:function(e){if("object"==typeof e&&e.RTCPeerConnection){var t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,i=t.setLocalDescription,o=t.setRemoteDescription,s=t.addIceCandidate;t.createOffer=function(e,t){var r=arguments.length>=2?arguments[2]:arguments[0],i=n.apply(this,[r]);return t?(i.then(e,t),Promise.resolve()):i},t.createAnswer=function(e,t){var n=arguments.length>=2?arguments[2]:arguments[0],i=r.apply(this,[n]);return t?(i.then(e,t),Promise.resolve()):i};var a=function(e,t,n){var r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=a,a=function(e,t,n){var r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=a,a=function(e,t,n){var r=s.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=a}},shimGetUserMedia:function(e){var t=e&&e.navigator;t.getUserMedia||(t.webkitGetUserMedia?t.getUserMedia=t.webkitGetUserMedia.bind(t):t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t)))},shimRTCIceServerUrls:function(e){var t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){for(var i=[],o=0;o<e.iceServers.length;o++){var s=e.iceServers[o];!s.hasOwnProperty("urls")&&s.hasOwnProperty("url")?(r.deprecated("RTCIceServer.url","RTCIceServer.urls"),(s=JSON.parse(JSON.stringify(s))).urls=s.url,delete s.url,i.push(s)):i.push(e.iceServers[o])}e.iceServers=i}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in e.RTCPeerConnection&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return t.generateCertificate}})},shimTrackEventTransceiver:function(e){"object"==typeof e&&e.RTCPeerConnection&&"receiver"in e.RTCTrackEvent.prototype&&!e.RTCTransceiver&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})},shimCreateOfferLegacy:function(e){var t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){var n=this;if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);var r=n.getTransceivers().find(function(e){return e.sender.track&&"audio"===e.sender.track.kind});!1===e.offerToReceiveAudio&&r?"sendrecv"===r.direction?r.setDirection?r.setDirection("sendonly"):r.direction="sendonly":"recvonly"===r.direction&&(r.setDirection?r.setDirection("inactive"):r.direction="inactive"):!0!==e.offerToReceiveAudio||r||n.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);var i=n.getTransceivers().find(function(e){return e.sender.track&&"video"===e.sender.track.kind});!1===e.offerToReceiveVideo&&i?"sendrecv"===i.direction?i.setDirection("sendonly"):"recvonly"===i.direction&&i.setDirection("inactive"):!0!==e.offerToReceiveVideo||i||n.addTransceiver("video")}return t.apply(n,arguments)}}}},function(e,t,n){"use strict";var r=n(40),i=n(6);e.exports={shimRTCIceCandidate:function(e){if(e.RTCIceCandidate&&!(e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)){var t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){var n=new t(e),i=r.parseCandidate(e.candidate),o=Object.assign(n,i);return o.toJSON=function(){return{candidate:o.candidate,sdpMid:o.sdpMid,sdpMLineIndex:o.sdpMLineIndex,usernameFragment:o.usernameFragment}},o}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,i.wrapPeerConnectionEvent(e,"icecandidate",function(t){return t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t})}},shimCreateObjectURL:function(e){var t=e&&e.URL;if("object"==typeof e&&e.HTMLMediaElement&&"srcObject"in e.HTMLMediaElement.prototype&&t.createObjectURL&&t.revokeObjectURL){var n=t.createObjectURL.bind(t),r=t.revokeObjectURL.bind(t),o=new Map,s=0;t.createObjectURL=function(e){if("getTracks"in e){var t="polyblob:"+ ++s;return o.set(t,e),i.deprecated("URL.createObjectURL(stream)","elem.srcObject = stream"),t}return n(e)},t.revokeObjectURL=function(e){r(e),o.delete(e)};var a=Object.getOwnPropertyDescriptor(e.HTMLMediaElement.prototype,"src");Object.defineProperty(e.HTMLMediaElement.prototype,"src",{get:function(){return a.get.apply(this)},set:function(e){return this.srcObject=o.get(e)||null,a.set.apply(this,[e])}});var u=e.HTMLMediaElement.prototype.setAttribute;e.HTMLMediaElement.prototype.setAttribute=function(){return 2===arguments.length&&"src"===(""+arguments[0]).toLowerCase()&&(this.srcObject=o.get(arguments[1])||null),u.apply(this,arguments)}}},shimMaxMessageSize:function(e){if(!e.RTCSctpTransport&&e.RTCPeerConnection){var t=i.detectBrowser(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get:function(){return void 0===this._sctp?null:this._sctp}});var n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var e,i,o,s;if(this._sctp=null,o=arguments[0],(s=r.splitSections(o.sdp)).shift(),s.some(function(e){var t=r.parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")})){var a,u=function(e){var t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;var n=parseInt(t[1],10);return n!=n?-1:n}(arguments[0]),l=(e=u,i=65536,"firefox"===t.browser&&(i=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),i),c=function(e,n){var i=65536;"firefox"===t.browser&&57===t.version&&(i=65535);var o=r.matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?i=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(i=2147483637),i}(arguments[0],u);a=0===l&&0===c?Number.POSITIVE_INFINITY:0===l||0===c?Math.max(l,c):Math.min(l,c);var h={};Object.defineProperty(h,"maxMessageSize",{get:function(){return a}}),this._sctp=h}return n.apply(this,arguments)}}},shimSendThrowTypeError:function(e){if(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype){var t=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){var e=t.apply(this,arguments);return n(e,this),e},i.wrapPeerConnectionEvent(e,"datachannel",function(e){return n(e.channel,e.target),e})}function n(e,t){var n=e.send;e.send=function(){var r=arguments[0],i=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&i>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}}}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(9).EventEmitter,o=n(1),s=n(111),a=n(45),u=n(121),l=n(13),c=n(122),h=n(2),d=n(8),f=n(12),p=n(5),v=n(123),m=n(7),_=n(124),y=n(125),g=n(0)("JsSIP:UA"),T=n(0)("JsSIP:ERROR:UA");T.log=console.warn.bind(console);var C={STATUS_INIT:0,STATUS_READY:1,STATUS_USER_CLOSED:2,STATUS_NOT_READY:3,CONFIGURATION_ERROR:1,NETWORK_ERROR:2};e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),g("new() [configuration:%o]",e);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));if(n._cache={credentials:{}},n._configuration=Object.assign({},y.settings),n._dynConfiguration={},n._dialogs={},n._applicants={},n._sessions={},n._transport=null,n._contact=null,n._status=C.STATUS_INIT,n._error=null,n._transactions={nist:{},nict:{},ist:{},ict:{}},n._data={},n._closeTimer=null,void 0===e)throw new TypeError("Not enough arguments");try{n._loadConfig(e)}catch(e){throw n._status=C.STATUS_NOT_READY,n._error=C.CONFIGURATION_ERROR,e}return n._registrator=new s(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,null,[{key:"C",get:function(){return C}}]),r(t,[{key:"start",value:function(){g("start()"),this._status===C.STATUS_INIT?this._transport.connect():this._status===C.STATUS_USER_CLOSED?(g("restarting UA"),null!==this._closeTimer&&(clearTimeout(this._closeTimer),this._closeTimer=null,this._transport.disconnect()),this._status=C.STATUS_INIT,this._transport.connect()):this._status===C.STATUS_READY?g("UA is in READY status, not restarted"):g("ERROR: connection is down, Auto-Recovery system is trying to reconnect"),this._dynConfiguration.register=this._configuration.register}},{key:"register",value:function(){g("register()"),this._dynConfiguration.register=!0,this._registrator.register()}},{key:"unregister",value:function(e){g("unregister()"),this._dynConfiguration.register=!1,this._registrator.unregister(e)}},{key:"registrator",value:function(){return this._registrator}},{key:"isRegistered",value:function(){return this._registrator.registered}},{key:"isConnected",value:function(){return this._transport.isConnected()}},{key:"call",value:function(e,t){g("call()");var n=new a(this);return n.connect(e,t),n}},{key:"sendMessage",value:function(e,t,n){g("sendMessage()");var r=new u(this);return r.send(e,t,n),r}},{key:"terminateSessions",value:function(e){for(var t in g("terminateSessions()"),this._sessions)this._sessions[t].isEnded()||this._sessions[t].terminate(e)}},{key:"stop",value:function(){var e=this;if(g("stop()"),this._dynConfiguration={},this._status!==C.STATUS_USER_CLOSED){this._registrator.close();var t=Object.keys(this._sessions).length;for(var n in this._sessions)if(Object.prototype.hasOwnProperty.call(this._sessions,n)){g("closing session "+n);try{this._sessions[n].terminate()}catch(e){}}for(var r in this._applicants)if(Object.prototype.hasOwnProperty.call(this._applicants,r))try{this._applicants[r].close()}catch(e){}this._status=C.STATUS_USER_CLOSED,0===Object.keys(this._transactions.nict).length+Object.keys(this._transactions.nist).length+Object.keys(this._transactions.ict).length+Object.keys(this._transactions.ist).length&&0===t?this._transport.disconnect():this._closeTimer=setTimeout(function(){e._closeTimer=null,e._transport.disconnect()},2e3)}else g("UA already closed")}},{key:"normalizeTarget",value:function(e){return h.normalizeTarget(e,this._configuration.hostport_params)}},{key:"get",value:function(e){switch(e){case"realm":return this._configuration.realm;case"ha1":return this._configuration.ha1;default:return void T('get() | cannot get "%s" parameter in runtime',e)}}},{key:"set",value:function(e,t){switch(e){case"password":this._configuration.password=String(t);break;case"realm":this._configuration.realm=String(t);break;case"ha1":this._configuration.ha1=String(t),this._configuration.password=null;break;case"display_name":if(-1===p.parse('"'+t+'"',"display_name"))return T('set() | wrong "display_name"'),!1;this._configuration.display_name=t;break;default:return T('set() | cannot set "%s" parameter in runtime',e),!1}return!0}},{key:"newTransaction",value:function(e){this._transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})}},{key:"destroyTransaction",value:function(e){delete this._transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})}},{key:"newDialog",value:function(e){this._dialogs[e.id]=e}},{key:"destroyDialog",value:function(e){delete this._dialogs[e.id]}},{key:"newMessage",value:function(e,t){this._applicants[e]=e,this.emit("newMessage",t)}},{key:"destroyMessage",value:function(e){delete this._applicants[e]}},{key:"newRTCSession",value:function(e,t){this._sessions[e.id]=e,this.emit("newRTCSession",t)}},{key:"destroyRTCSession",value:function(e){delete this._sessions[e.id]}},{key:"registered",value:function(e){this.emit("registered",e)}},{key:"unregistered",value:function(e){this.emit("unregistered",e)}},{key:"registrationFailed",value:function(e){this.emit("registrationFailed",e)}},{key:"receiveRequest",value:function(e){var t=e.method;if(e.ruri.user!==this._configuration.uri.user&&e.ruri.user!==this._contact.uri.user)return g("Request-URI does not point to us"),void(e.method!==o.ACK&&e.reply_sl(404));if(e.ruri.scheme!==o.SIPS){if(!l.checkTransaction(this,e)){if(t===o.INVITE?new l.InviteServerTransaction(this,this._transport,e):t!==o.ACK&&t!==o.CANCEL&&new l.NonInviteServerTransaction(this,this._transport,e),t===o.OPTIONS)e.reply(200);else if(t===o.MESSAGE){if(0===this.listeners("newMessage").length)return void e.reply(405);new u(this).init_incoming(e)}else if(t===o.INVITE&&!e.to_tag&&0===this.listeners("newRTCSession").length)return void e.reply(405);var n=void 0,r=void 0;if(e.to_tag)(n=this._findDialog(e.call_id,e.from_tag,e.to_tag))?n.receiveRequest(e):t===o.NOTIFY?(r=this._findSession(e))?r.receiveRequest(e):(g("received NOTIFY request for a non existent subscription"),e.reply(481,"Subscription does not exist")):t!==o.ACK&&e.reply(481);else switch(t){case o.INVITE:if(window.RTCPeerConnection)if(e.hasHeader("replaces")){var i=e.replaces;(n=this._findDialog(i.call_id,i.from_tag,i.to_tag))?(r=n.owner).isEnded()?e.reply(603):r.receiveRequest(e):e.reply(481)}else(r=new a(this)).init_incoming(e);else T("INVITE received but WebRTC is not supported"),e.reply(488);break;case o.BYE:e.reply(481);break;case o.CANCEL:(r=this._findSession(e))?r.receiveRequest(e):g("received CANCEL request for a non existent session");break;case o.ACK:break;default:e.reply(405)}}}else e.reply_sl(416)}},{key:"_findSession",value:function(e){var t=e.call_id,n=e.from_tag,r=e.to_tag,i=t+n,o=this._sessions[i],s=t+r,a=this._sessions[s];return o||(a||null)}},{key:"_findDialog",value:function(e,t,n){var r=e+t+n,i=this._dialogs[r];return i||(r=e+n+t,(i=this._dialogs[r])||null)}},{key:"_loadConfig",value:function(e){try{y.load(this._configuration,e)}catch(e){throw e}0===this._configuration.display_name&&(this._configuration.display_name="0"),this._configuration.instance_id||(this._configuration.instance_id=h.newUUID()),this._configuration.jssip_id=h.createRandomToken(5);var t=this._configuration.uri.clone();t.user=null,this._configuration.hostport_params=t.toString().replace(/^sip:/i,"");try{this._transport=new c(this._configuration.sockets,{max_interval:this._configuration.connection_recovery_max_interval,min_interval:this._configuration.connection_recovery_min_interval}),this._transport.onconnecting=function(e){this.emit("connecting",e)}.bind(this),this._transport.onconnect=function(e){if(this._status===C.STATUS_USER_CLOSED)return;this._status=C.STATUS_READY,this._error=null,this.emit("connected",e),this._dynConfiguration.register&&this._registrator.register()}.bind(this),this._transport.ondisconnect=function(e){var t=!0,n=!1,r=void 0;try{for(var i,o=["nict","ict","nist","ist"][Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value;for(var a in this._transactions[s])Object.prototype.hasOwnProperty.call(this._transactions[s],a)&&this._transactions[s][a].onTransportError()}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}this.emit("disconnected",e),this._registrator.onTransportClosed(),this._status!==C.STATUS_USER_CLOSED&&(this._status=C.STATUS_NOT_READY,this._error=C.NETWORK_ERROR)}.bind(this),this._transport.ondata=function(e){var t=e.transport,n=e.message;if(!(n=v.parseMessage(n,this)))return;if(this._status===C.STATUS_USER_CLOSED&&n instanceof m.IncomingRequest)return;if(!_(n,this,t))return;if(n instanceof m.IncomingRequest)n.transport=t,this.receiveRequest(n);else if(n instanceof m.IncomingResponse){var r=void 0;switch(n.method){case o.INVITE:(r=this._transactions.ict[n.via_branch])&&r.receiveResponse(n);break;case o.ACK:break;default:(r=this._transactions.nict[n.via_branch])&&r.receiveResponse(n)}}}.bind(this)}catch(e){throw T(e),new d.ConfigurationError("sockets",this._configuration.sockets)}if(delete this._configuration.sockets,this._configuration.authorization_user||(this._configuration.authorization_user=this._configuration.uri.user),!this._configuration.registrar_server){var n=this._configuration.uri.clone();n.user=null,n.clearParams(),n.clearHeaders(),this._configuration.registrar_server=n}this._configuration.no_answer_timeout*=1e3,this._configuration.contact_uri?this._configuration.via_host=this._configuration.contact_uri.host:this._configuration.contact_uri=new f("sip",h.createRandomToken(8),this._configuration.via_host,null,{transport:"ws"}),this._contact={pub_gruu:null,temp_gruu:null,uri:this._configuration.contact_uri,toString:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.anonymous||null,n=e.outbound||null,r="<";return r+=t?this.temp_gruu||"sip:anonymous@anonymous.invalid;transport=ws":this.pub_gruu||this.uri.toString(),!n||(t?this.temp_gruu:this.pub_gruu)||(r+=";ob"),r+=">"}};var r=["password","realm","ha1","display_name","register"];for(var i in this._configuration)Object.prototype.hasOwnProperty.call(this._configuration,i)&&(-1!==r.indexOf(i)?Object.defineProperty(this._configuration,i,{writable:!0,configurable:!1}):Object.defineProperty(this._configuration,i,{writable:!1,configurable:!1}));for(var s in g("configuration parameters after validation:"),this._configuration)if(Object.prototype.hasOwnProperty.call(y.settings,s))switch(s){case"uri":case"registrar_server":g("- "+s+": "+this._configuration[s]);break;case"password":case"ha1":g("- "+s+": NOT SHOWN");break;default:g("- "+s+": "+JSON.stringify(this._configuration[s]))}}},{key:"C",get:function(){return C}},{key:"status",get:function(){return this._status}},{key:"contact",get:function(){return this._contact}},{key:"configuration",get:function(){return this._configuration}},{key:"transport",get:function(){return this._transport}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(2),o=n(1),s=n(7),a=n(17),u=n(0)("JsSIP:Registrator");e.exports=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this._ua=t,this._transport=n,this._registrar=t.configuration.registrar_server,this._expires=t.configuration.register_expires,this._call_id=i.createRandomToken(22),this._cseq=0,this._to_uri=t.configuration.uri,this._registrationTimer=null,this._registering=!1,this._registered=!1,this._contact=this._ua.contact.toString(),this._contact+=";+sip.ice",this._extraHeaders=[],this._extraContactParams="",this._contact+=";reg-id=1",this._contact+=';+sip.instance="<urn:uuid:'+this._ua.configuration.instance_id+'>"'}return r(e,[{key:"setExtraHeaders",value:function(e){Array.isArray(e)||(e=[]),this._extraHeaders=e.slice()}},{key:"setExtraContactParams",value:function(e){for(var t in e instanceof Object||(e={}),this._extraContactParams="",e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=e[t];this._extraContactParams+=";"+t,n&&(this._extraContactParams+="="+n)}}},{key:"register",value:function(){var e=this;if(this._registering)u("Register request in progress...");else{var t=this._extraHeaders.slice();t.push("Contact: "+this._contact+";expires="+this._expires+this._extraContactParams),t.push("Expires: "+this._expires);var n=new s.OutgoingRequest(o.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},t),r=new a(this._ua,n,{onRequestTimeout:function(){e._registrationFailure(null,o.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._registrationFailure(null,o.causes.CONNECTION_ERROR)},onAuthenticated:function(){e._cseq+=1},onReceiveResponse:function(t){var n=void 0,r=void 0,s=t.getHeaders("contact").length;if(t.cseq===e._cseq)switch(null!==e._registrationTimer&&(clearTimeout(e._registrationTimer),e._registrationTimer=null),!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):if(e._registering=!1,!s){u("no Contact header in response to REGISTER, response ignored");break}for(;s--;){if((n=t.parseHeader("contact",s)).uri.user===e._ua.contact.uri.user){r=n.getParam("expires");break}n=null}if(!n){u("no Contact header pointing to us, response ignored");break}!r&&t.hasHeader("expires")&&(r=t.getHeader("expires")),r||(r=e._expires),(r=Number(r))<10&&(r=10),e._registrationTimer=setTimeout(function(){e._registrationTimer=null,0===e._ua.listeners("registrationExpiring").length?e.register():e._ua.emit("registrationExpiring")},1e3*r-5e3),n.hasParam("temp-gruu")&&(e._ua.contact.temp_gruu=n.getParam("temp-gruu").replace(/"/g,"")),n.hasParam("pub-gruu")&&(e._ua.contact.pub_gruu=n.getParam("pub-gruu").replace(/"/g,"")),e._registered||(e._registered=!0,e._ua.registered({response:t}));break;case/^423$/.test(t.status_code):t.hasHeader("min-expires")?(e._expires=Number(t.getHeader("min-expires")),e._expires<10&&(e._expires=10),e.register()):(u("423 response received for REGISTER without Min-Expires"),e._registrationFailure(t,o.causes.SIP_FAILURE_CODE));break;default:var a=i.sipErrorCause(t.status_code);e._registrationFailure(t,a)}}});this._registering=!0,r.send()}}},{key:"unregister",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._registered){this._registered=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null);var n=this._extraHeaders.slice();t.all?n.push("Contact: *"+this._extraContactParams):n.push("Contact: "+this._contact+";expires=0"+this._extraContactParams),n.push("Expires: 0");var r=new s.OutgoingRequest(o.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},n);new a(this._ua,r,{onRequestTimeout:function(){e._unregistered(null,o.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._unregistered(null,o.causes.CONNECTION_ERROR)},onAuthenticated:function(){e._cseq+=1},onReceiveResponse:function(t){switch(!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):e._unregistered(t);break;default:var n=i.sipErrorCause(t.status_code);e._unregistered(t,n)}}}).send()}else u("already unregistered")}},{key:"close",value:function(){this._registered&&this.unregister()}},{key:"onTransportClosed",value:function(){this._registering=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),this._registered&&(this._registered=!1,this._ua.unregistered({}))}},{key:"_registrationFailure",value:function(e,t){this._registering=!1,this._ua.registrationFailed({response:e||null,cause:t}),this._registered&&(this._registered=!1,this._ua.unregistered({response:e||null,cause:t}))}},{key:"_unregistered",value:function(e,t){this._registering=!1,this._registered=!1,this._ua.unregistered({response:e||null,cause:t||null})}},{key:"registered",get:function(){return this._registered}}]),e}()},function(e,t,n){var r=function(e){return String(Number(e))===e?Number(e):e},i=function(e,t,n){var i=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:i&&!t[e.name]&&(t[e.name]={});var o=e.push?{}:i?t[e.name]:t;!function(e,t,n,i){if(i&&!n)t[i]=r(e[1]);else for(var o=0;o<n.length;o+=1)null!=e[o+1]&&(t[n[o]]=r(e[o+1]))}(n.match(e.reg),o,e.names,e.name),e.push&&t[e.push].push(o)},o=n(43),s=RegExp.prototype.test.bind(/^([a-z])=(.*)/);t.parse=function(e){var t={},n=[],r=t;return e.split(/(\r\n|\r|\n)/).filter(s).forEach(function(e){var t=e[0],s=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),r=n[n.length-1]);for(var a=0;a<(o[t]||[]).length;a+=1){var u=o[t][a];if(u.reg.test(s))return i(u,r,s)}}),t.media=n,t};var a=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length?e[n[0]]=r(n[1]):1===n.length&&t.length>1&&(e[n[0]]=void 0),e};t.parseParams=function(e){return e.split(/\;\s?/).reduce(a,{})},t.parseFmtpConfig=t.parseParams,t.parsePayloads=function(e){return e.split(" ").map(Number)},t.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(r),i=0;i<n.length;i+=3)t.push({component:n[i],ip:n[i+1],port:n[i+2]});return t},t.parseImageAttributes=function(e){return e.split(" ").map(function(e){return e.substring(1,e.length-1).split(",").reduce(a,{})})},t.parseSimulcastStreamList=function(e){return e.split(";").map(function(e){return e.split(",").map(function(e){var t,n=!1;return"~"!==e[0]?t=r(e):(t=r(e.substring(1,e.length)),n=!0),{scid:t,paused:n}})})}},function(e,t,n){var r=n(43),i=/%[sdv%]/g,o=function(e,t,n){var r=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var o=0;o<t.names.length;o+=1){var s=t.names[o];t.name?r.push(n[t.name][s]):r.push(n[t.names[o]])}else r.push(n[t.name]);return function(e){var t=1,n=arguments,r=n.length;return e.replace(i,function(e){if(t>=r)return e;var i=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(i);case"%d":return Number(i);case"%v":return""}})}.apply(null,r)},s=["v","o","s","i","u","e","p","c","b","t","r","z","a"],a=["i","c","b","a"];e.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach(function(e){null==e.payloads&&(e.payloads="")});var n=t.outerOrder||s,i=t.innerOrder||a,u=[];return n.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?u.push(o(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){u.push(o(t,n,e))})})}),e.media.forEach(function(e){u.push(o("m",r.m[0],e)),i.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?u.push(o(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){u.push(o(t,n,e))})})})}),u.join("\r\n")+"\r\n"}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(2),o=n(0)("JsSIP:DigestAuthentication"),s=n(0)("JsSIP:ERROR:DigestAuthentication");s.log=console.warn.bind(console),e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._credentials=t,this._cnonce=null,this._nc=0,this._ncHex="00000000",this._algorithm=null,this._realm=null,this._nonce=null,this._opaque=null,this._stale=null,this._qop=null,this._method=null,this._uri=null,this._ha1=null,this._response=null}return r(e,[{key:"get",value:function(e){switch(e){case"realm":return this._realm;case"ha1":return this._ha1;default:return void s('get() | cannot get "%s" parameter',e)}}},{key:"authenticate",value:function(e,t){var n=e.method,r=e.ruri,a=e.body,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(this._algorithm=t.algorithm,this._realm=t.realm,this._nonce=t.nonce,this._opaque=t.opaque,this._stale=t.stale,this._algorithm){if("MD5"!==this._algorithm)return s('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this._algorithm="MD5";if(!this._nonce)return s("authenticate() | challenge without Digest nonce, authentication aborted"),!1;if(!this._realm)return s("authenticate() | challenge without Digest realm, authentication aborted"),!1;if(!this._credentials.password){if(!this._credentials.ha1)return s("authenticate() | no plain SIP password nor ha1 provided, authentication aborted"),!1;if(this._credentials.realm!==this._realm)return s('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]',this._credentials.realm,this._realm),!1}if(t.qop)if(t.qop.indexOf("auth-int")>-1)this._qop="auth-int";else{if(!(t.qop.indexOf("auth")>-1))return s('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this._qop="auth"}else this._qop=null;this._method=n,this._uri=r,this._cnonce=u||i.createRandomToken(12),this._nc+=1;var l=Number(this._nc).toString(16);this._ncHex="00000000".substr(0,8-l.length)+l,4294967296===this._nc&&(this._nc=1,this._ncHex="00000001"),this._credentials.password?this._ha1=i.calculateMD5(this._credentials.username+":"+this._realm+":"+this._credentials.password):this._ha1=this._credentials.ha1;var c=void 0;return"auth"===this._qop?(c=i.calculateMD5(this._method+":"+this._uri),this._response=i.calculateMD5(this._ha1+":"+this._nonce+":"+this._ncHex+":"+this._cnonce+":auth:"+c)):"auth-int"===this._qop?(c=i.calculateMD5(this._method+":"+this._uri+":"+i.calculateMD5(a||"")),this._response=i.calculateMD5(this._ha1+":"+this._nonce+":"+this._ncHex+":"+this._cnonce+":auth-int:"+c)):null===this._qop&&(c=i.calculateMD5(this._method+":"+this._uri),this._response=i.calculateMD5(this._ha1+":"+this._nonce+":"+c)),o("authenticate() | response generated"),!0}},{key:"toString",value:function(){var e=[];if(!this._response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push("algorithm="+this._algorithm),e.push('username="'+this._credentials.username+'"'),e.push('realm="'+this._realm+'"'),e.push('nonce="'+this._nonce+'"'),e.push('uri="'+this._uri+'"'),e.push('response="'+this._response+'"'),this._opaque&&e.push('opaque="'+this._opaque+'"'),this._qop&&(e.push("qop="+this._qop),e.push('cnonce="'+this._cnonce+'"'),e.push("nc="+this._ncHex)),"Digest "+e.join(", ")}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(7),o=n(1),s=n(13),a=n(116),u=n(2),l=n(0)("JsSIP:Dialog"),c={STATUS_EARLY:1,STATUS_CONFIRMED:2};e.exports=function(){function e(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.STATUS_CONFIRMED;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._owner=t,this._ua=t._ua,this._uac_pending_reply=!1,this._uas_pending_reply=!1,!n.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};n instanceof i.IncomingResponse&&(o=n.status_code<200?c.STATUS_EARLY:c.STATUS_CONFIRMED);var s=n.parseHeader("contact");"UAS"===r?(this._id={call_id:n.call_id,local_tag:n.to_tag,remote_tag:n.from_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=o,this._remote_seqnum=n.cseq,this._local_uri=n.parseHeader("to").uri,this._remote_uri=n.parseHeader("from").uri,this._remote_target=s.uri,this._route_set=n.getHeaders("record-route"),this._ack_seqnum=this._remote_seqnum):"UAC"===r&&(this._id={call_id:n.call_id,local_tag:n.from_tag,remote_tag:n.to_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=o,this._local_seqnum=n.cseq,this._local_uri=n.parseHeader("from").uri,this._remote_uri=n.parseHeader("to").uri,this._remote_target=s.uri,this._route_set=n.getHeaders("record-route").reverse(),this._ack_seqnum=null),this._ua.newDialog(this),l("new "+r+" dialog created with status "+(this._state===c.STATUS_EARLY?"EARLY":"CONFIRMED"))}return r(e,null,[{key:"C",get:function(){return c}}]),r(e,[{key:"update",value:function(e,t){this._state=c.STATUS_CONFIRMED,l("dialog "+this._id.toString()+"  changed to CONFIRMED state"),"UAC"===t&&(this._route_set=e.getHeaders("record-route").reverse())}},{key:"terminate",value:function(){l("dialog "+this._id.toString()+" deleted"),this._ua.destroyDialog(this)}},{key:"sendRequest",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=u.cloneArray(n.extraHeaders),i=n.eventHandlers||{},o=n.body||null,s=this._createRequest(e,r,o);return i.onAuthenticated=function(){t._local_seqnum+=1},new a(this,s,i).send(),s}},{key:"receiveRequest",value:function(e){this._checkInDialogRequest(e)&&(e.method===o.ACK&&null!==this._ack_seqnum?this._ack_seqnum=null:e.method===o.INVITE&&(this._ack_seqnum=e.cseq),this._owner.receiveRequest(e))}},{key:"_createRequest",value:function(e,t,n){t=u.cloneArray(t),this._local_seqnum||(this._local_seqnum=Math.floor(1e4*Math.random()));var r=e===o.CANCEL||e===o.ACK?this._local_seqnum:this._local_seqnum+=1;return new i.OutgoingRequest(e,this._remote_target,this._ua,{cseq:r,call_id:this._id.call_id,from_uri:this._local_uri,from_tag:this._id.local_tag,to_uri:this._remote_uri,to_tag:this._id.remote_tag,route_set:this._route_set},t,n)}},{key:"_checkInDialogRequest",value:function(e){var t=this;if(this._remote_seqnum)if(e.cseq<this._remote_seqnum){if(e.method!==o.ACK)return e.reply(500),!1;if(null===this._ack_seqnum||e.cseq!==this._ack_seqnum)return!1}else e.cseq>this._remote_seqnum&&(this._remote_seqnum=e.cseq);else this._remote_seqnum=e.cseq;if(e.method===o.INVITE||e.method===o.UPDATE&&e.body){if(!0===this._uac_pending_reply)e.reply(491);else{if(!0===this._uas_pending_reply){var n=1+(10*Math.random()|0);return e.reply(500,null,["Retry-After:"+n]),!1}this._uas_pending_reply=!0;e.server_transaction.on("stateChanged",function n(){e.server_transaction.state!==s.C.STATUS_ACCEPTED&&e.server_transaction.state!==s.C.STATUS_COMPLETED&&e.server_transaction.state!==s.C.STATUS_TERMINATED||(e.server_transaction.removeListener("stateChanged",n),t._uas_pending_reply=!1)})}e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===s.C.STATUS_ACCEPTED&&(t._remote_target=e.parseHeader("contact").uri)})}else e.method===o.NOTIFY&&e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===s.C.STATUS_COMPLETED&&(t._remote_target=e.parseHeader("contact").uri)});return!0}},{key:"id",get:function(){return this._id}},{key:"local_seqnum",get:function(){return this._local_seqnum},set:function(e){this._local_seqnum=e}},{key:"owner",get:function(){return this._owner}},{key:"uac_pending_reply",get:function(){return this._uac_pending_reply},set:function(e){this._uac_pending_reply=e}},{key:"uas_pending_reply",get:function(){return this._uas_pending_reply}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(13),s=n(45),a=n(17),u={onRequestTimeout:function(){},onTransportError:function(){},onSuccessResponse:function(){},onErrorResponse:function(){},onAuthenticated:function(){},onDialogError:function(){}};e.exports=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._dialog=t,this._ua=t._ua,this._request=n,this._eventHandlers=r,this._reattempt=!1,this._reattemptTimer=null,u)Object.prototype.hasOwnProperty.call(u,i)&&(this._eventHandlers[i]||(this._eventHandlers[i]=u[i]))}return r(e,[{key:"send",value:function(){var e=this,t=new a(this._ua,this._request,{onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onAuthenticated:function(t){e._eventHandlers.onAuthenticated(t)},onReceiveResponse:function(t){e._receiveResponse(t)}});if(t.send(),(this._request.method===i.INVITE||this._request.method===i.UPDATE&&this._request.body)&&t.clientTransaction.state!==o.C.STATUS_TERMINATED){this._dialog.uac_pending_reply=!0;t.clientTransaction.on("stateChanged",function n(){t.clientTransaction.state!==o.C.STATUS_ACCEPTED&&t.clientTransaction.state!==o.C.STATUS_COMPLETED&&t.clientTransaction.state!==o.C.STATUS_TERMINATED||(t.clientTransaction.removeListener("stateChanged",n),e._dialog.uac_pending_reply=!1)})}}},{key:"_receiveResponse",value:function(e){var t=this;408===e.status_code||481===e.status_code?this._eventHandlers.onDialogError(e):e.method===i.INVITE&&491===e.status_code?this._reattempt?e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e):(this._request.cseq.value=this._dialog.local_seqnum+=1,this._reattemptTimer=setTimeout(function(){t._dialog.owner.status!==s.C.STATUS_TERMINATED&&(t._reattempt=!0,t._request_sender.send())},1e3)):e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e)}},{key:"request",get:function(){return this._request}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(9).EventEmitter,o=n(1),s=n(8),a=n(2),u=n(0)("JsSIP:RTCSession:DTMF");n(0)("JsSIP:ERROR:RTCSession:DTMF").log=console.warn.bind(console);var l={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._session=e,n._direction=null,n._tone=null,n._duration=null,n._request=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"send",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(void 0===e)throw new TypeError("Not enough arguments");if(this._direction="outgoing",this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new s.InvalidStateError(this._session.status);var r=a.cloneArray(n.extraHeaders);if(this.eventHandlers=n.eventHandlers||{},"string"==typeof e)e=e.toUpperCase();else{if("number"!=typeof e)throw new TypeError("Invalid tone: "+e);e=e.toString()}if(!e.match(/^[0-9A-DR#*]$/))throw new TypeError("Invalid tone: "+e);this._tone=e,this._duration=n.duration,r.push("Content-Type: application/dtmf-relay");var i="Signal="+this._tone+"\r\n";i+="Duration="+this._duration,this._session.newDTMF({originator:"local",dtmf:this,request:this._request}),this._session.sendRequest(o.INFO,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){t.eventHandlers.onFailed&&t.eventHandlers.onFailed(),t.emit("failed",{originator:"remote",response:e})},onRequestTimeout:function(){t._session.onRequestTimeout()},onTransportError:function(){t._session.onTransportError()},onDialogError:function(){t._session.onDialogError()}},body:i})}},{key:"init_incoming",value:function(e){var t=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,n=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(this._direction="incoming",this._request=e,e.reply(200),e.body){var r=e.body.split("\n");r.length>=1&&t.test(r[0])&&(this._tone=r[0].replace(t,"$2")),r.length>=2&&n.test(r[1])&&(this._duration=parseInt(r[1].replace(n,"$2"),10))}this._duration||(this._duration=l.DEFAULT_DURATION),this._tone?this._session.newDTMF({originator:"remote",dtmf:this,request:e}):u("invalid INFO DTMF received, discarded")}},{key:"tone",get:function(){return this._tone}},{key:"duration",get:function(){return this._duration}}]),t}(),e.exports.C=l},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(9).EventEmitter;n(0)("JsSIP:ERROR:RTCSession:Info").log=console.warn.bind(console);var o=n(1),s=n(8),a=n(2);e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._session=e,n._direction=null,n._contentType=null,n._body=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(this._direction="outgoing",void 0===e)throw new TypeError("Not enough arguments");if(this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new s.InvalidStateError(this._session.status);this._contentType=e,this._body=t;var i=a.cloneArray(r.extraHeaders);i.push("Content-Type: "+e),this._session.newInfo({originator:"local",info:this,request:this.request}),this._session.sendRequest(o.INFO,{extraHeaders:i,eventHandlers:{onSuccessResponse:function(e){n.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){n.emit("failed",{originator:"remote",response:e})},onTransportError:function(){n._session.onTransportError()},onRequestTimeout:function(){n._session.onRequestTimeout()},onDialogError:function(){n._session.onDialogError()}},body:t})}},{key:"init_incoming",value:function(e){this._direction="incoming",this.request=e,e.reply(200),this._contentType=e.getHeader("content-type"),this._body=e.body,this._session.newInfo({originator:"remote",info:this,request:e})}},{key:"contentType",get:function(){return this._contentType}},{key:"body",get:function(){return this._body}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(1),o=n(0)("JsSIP:RTCSession:ReferNotifier"),s={event_type:"refer",body_type:"message/sipfrag;version=2.0",expires:300};e.exports=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._session=t,this._id=n,this._expires=r||s.expires,this._active=!0,this.notify(100)}return r(e,[{key:"notify",value:function(e,t){if(o("notify()"),!1!==this._active){t=t||i.REASON_PHRASE[e]||"";var n=void 0;n=e>=200?"terminated;reason=noresource":"active;expires="+this._expires,this._session.sendRequest(i.NOTIFY,{extraHeaders:["Event: "+s.event_type+";id="+this._id,"Subscription-State: "+n,"Content-Type: "+s.body_type],body:"SIP/2.0 "+e+" "+t,eventHandlers:{onErrorResponse:function(){this._active=!1}}})}}}]),e}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(9).EventEmitter,o=n(1),s=n(5),a=n(2),u=n(0)("JsSIP:RTCSession:ReferSubscriber");e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._id=null,n._session=e,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"sendRefer",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};u("sendRefer()");var r=a.cloneArray(n.extraHeaders),i=n.eventHandlers||{};for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&this.on(s,i[s]);var l=null;n.replaces&&(l=n.replaces._request.call_id,l+=";to-tag="+n.replaces._to_tag,l+=";from-tag="+n.replaces._from_tag,l=encodeURIComponent(l));var c="Refer-To: <"+e+(l?"?Replaces="+l:"")+">";r.push(c),r.push("Contact: "+this._session.contact);var h=this._session.sendRequest(o.REFER,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t._requestSucceeded(e)},onErrorResponse:function(e){t._requestFailed(e,o.causes.REJECTED)},onTransportError:function(){t._requestFailed(null,o.causes.CONNECTION_ERROR)},onRequestTimeout:function(){t._requestFailed(null,o.causes.REQUEST_TIMEOUT)},onDialogError:function(){t._requestFailed(null,o.causes.DIALOG_ERROR)}}});this._id=h.cseq}},{key:"receiveNotify",value:function(e){if(u("receiveNotify()"),e.body){var t=s.parse(e.body.trim(),"Status_Line");if(-1!==t)switch(!0){case/^100$/.test(t.status_code):this.emit("trying",{request:e,status_line:t});break;case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",{request:e,status_line:t});break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",{request:e,status_line:t});break;default:this.emit("failed",{request:e,status_line:t})}else u('receiveNotify() | error parsing NOTIFY body: "'+e.body+'"')}}},{key:"_requestSucceeded",value:function(e){u("REFER succeeded"),u('emit "requestSucceeded"'),this.emit("requestSucceeded",{response:e})}},{key:"_requestFailed",value:function(e,t){u("REFER failed"),u('emit "requestFailed"'),this.emit("requestFailed",{response:e||null,cause:t})}},{key:"id",get:function(){return this._id}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(9).EventEmitter,o=n(1),s=n(7),a=n(2),u=n(17),l=n(8),c=n(0)("JsSIP:Message");e.exports=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._ua=e,n._request=null,n._closed=!1,n._direction=null,n._local_identity=null,n._remote_identity=null,n._is_replied=!1,n._data={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),r(t,[{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=e;if(void 0===e||void 0===t)throw new TypeError("Not enough arguments");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: "+i);var l=a.cloneArray(r.extraHeaders),c=r.eventHandlers||{},h=r.contentType||"text/plain";for(var d in c)Object.prototype.hasOwnProperty.call(c,d)&&this.on(d,c[d]);l.push("Content-Type: "+h),this._request=new s.OutgoingRequest(o.MESSAGE,e,this._ua,null,l),t&&(this._request.body=t);var f=new u(this._ua,this._request,{onRequestTimeout:function(){n._onRequestTimeout()},onTransportError:function(){n._onTransportError()},onReceiveResponse:function(e){n._receiveResponse(e)}});this._newMessage("local",this._request),f.send()}},{key:"init_incoming",value:function(e){this._request=e,this._newMessage("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}},{key:"accept",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=a.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new l.NotSupportedError('"accept" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}},{key:"reject",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.status_code||480,n=e.reason_phrase,r=a.cloneArray(e.extraHeaders),i=e.body;if("incoming"!==this._direction)throw new l.NotSupportedError('"reject" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");if(t<300||t>=700)throw new TypeError("Invalid status_code: "+t);this._is_replied=!0,this._request.reply(t,n,r,i)}},{key:"_receiveResponse",value:function(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:var t=a.sipErrorCause(e.status_code);this._failed("remote",e,t)}}},{key:"_onRequestTimeout",value:function(){this._closed||this._failed("system",null,o.causes.REQUEST_TIMEOUT)}},{key:"_onTransportError",value:function(){this._closed||this._failed("system",null,o.causes.CONNECTION_ERROR)}},{key:"_close",value:function(){this._closed=!0,this._ua.destroyMessage(this)}},{key:"_newMessage",value:function(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newMessage(this,{originator:e,message:this,request:t})}},{key:"_failed",value:function(e,t,n){c("MESSAGE failed"),this._close(),c('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}},{key:"_succeeded",value:function(e,t){c("MESSAGE succeeded"),this._close(),c('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}},{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}}]),t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(46),o=n(0)("JsSIP:Transport"),s=n(0)("JsSIP:ERROR:Transport");s.log=console.warn.bind(console);var a={STATUS_CONNECTED:0,STATUS_CONNECTING:1,STATUS_DISCONNECTED:2,SOCKET_STATUS_READY:0,SOCKET_STATUS_ERROR:1,recovery_options:{min_interval:2,max_interval:30}};e.exports=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.recovery_options;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o("new()"),this.status=a.STATUS_DISCONNECTED,this.socket=null,this.sockets=[],this.recovery_options=n,this.recover_attempts=0,this.recovery_timer=null,this.close_requested=!1,void 0===t)throw new TypeError("Invalid argument. undefined 'sockets' argument");t instanceof Array||(t=[t]),t.forEach(function(e){if(!i.isSocket(e.socket))throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");if(e.weight&&!Number(e.weight))throw new TypeError("Invalid argument. 'weight' attribute is not a number");this.sockets.push({socket:e.socket,weight:e.weight||0,status:a.SOCKET_STATUS_READY})},this),this._getSocket()}return r(e,[{key:"connect",value:function(){o("connect()"),this.isConnected()?o("Transport is already connected"):this.isConnecting()?o("Transport is connecting"):(this.close_requested=!1,this.status=a.STATUS_CONNECTING,this.onconnecting({socket:this.socket,attempts:this.recover_attempts}),this.close_requested||(this.socket.onconnect=this._onConnect.bind(this),this.socket.ondisconnect=this._onDisconnect.bind(this),this.socket.ondata=this._onData.bind(this),this.socket.connect()))}},{key:"disconnect",value:function(){o("close()"),this.close_requested=!0,this.recover_attempts=0,this.status=a.STATUS_DISCONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.socket.onconnect=function(){},this.socket.ondisconnect=function(){},this.socket.ondata=function(){},this.socket.disconnect(),this.ondisconnect({socket:this.socket,error:!1})}},{key:"send",value:function(e){if(o("send()"),!this.isConnected())return s("unable to send message, transport is not connected"),!1;var t=e.toString();return o("sending message:\n\n"+t+"\n"),this.socket.send(t)}},{key:"isConnected",value:function(){return this.status===a.STATUS_CONNECTED}},{key:"isConnecting",value:function(){return this.status===a.STATUS_CONNECTING}},{key:"_reconnect",value:function(){var e=this;this.recover_attempts+=1;var t=Math.floor(Math.random()*Math.pow(2,this.recover_attempts)+1);t<this.recovery_options.min_interval?t=this.recovery_options.min_interval:t>this.recovery_options.max_interval&&(t=this.recovery_options.max_interval),o("reconnection attempt: "+this.recover_attempts+". next connection attempt in "+t+" seconds"),this.recovery_timer=setTimeout(function(){e.close_requested||e.isConnected()||e.isConnecting()||(e._getSocket(),e.connect())},1e3*t)}},{key:"_getSocket",value:function(){var e=[];if(this.sockets.forEach(function(t){t.status!==a.SOCKET_STATUS_ERROR&&(0===e.length?e.push(t):t.weight>e[0].weight?e=[t]:t.weight===e[0].weight&&e.push(t))}),0===e.length)return this.sockets.forEach(function(e){e.status=a.SOCKET_STATUS_READY}),void this._getSocket();var t=Math.floor(Math.random()*e.length);this.socket=e[t].socket}},{key:"_onConnect",value:function(){this.recover_attempts=0,this.status=a.STATUS_CONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.onconnect({socket:this})}},{key:"_onDisconnect",value:function(e,t,n){this.status=a.STATUS_DISCONNECTED,this.ondisconnect({socket:this.socket,error:e,code:t,reason:n}),this.close_requested||(this.sockets.forEach(function(e){this.socket===e.socket&&(e.status=a.SOCKET_STATUS_ERROR)},this),this._reconnect(e))}},{key:"_onData",value:function(e){if("\r\n"!==e){if("string"!=typeof e){try{e=String.fromCharCode.apply(null,new Uint8Array(e))}catch(e){return void o("received binary message failed to be converted into string, message discarded")}o("received binary message:\n\n"+e+"\n")}else o("received text message:\n\n"+e+"\n");this.ondata({transport:this,message:e})}else o("received message with CRLF Keep Alive response")}},{key:"via_transport",get:function(){return this.socket.via_transport}},{key:"url",get:function(){return this.socket.url}},{key:"sip_uri",get:function(){return this.socket.sip_uri}}]),e}()},function(e,t,n){"use strict";var r=n(5),i=n(7),o=n(0)("JsSIP:ERROR:Parser");function s(e,t){var n=t,r=0,i=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===r;){if(-1===(i=e.indexOf("\r\n",n)))return i;!e.substring(i+2,i+4).match(/(^\r\n)/)&&e.charAt(i+2).match(/(^\s+)/)?n=i+2:r=i}return r}function a(e,t,n,o){var s=void 0,a=t.indexOf(":",n),u=t.substring(n,a).trim(),l=t.substring(a+1,o).trim();switch(u.toLowerCase()){case"via":case"v":e.addHeader("via",l),1===e.getHeaders("via").length?(s=e.parseHeader("Via"))&&(e.via=s,e.via_branch=s.branch):s=0;break;case"from":case"f":e.setHeader("from",l),(s=e.parseHeader("from"))&&(e.from=s,e.from_tag=s.getParam("tag"));break;case"to":case"t":e.setHeader("to",l),(s=e.parseHeader("to"))&&(e.to=s,e.to_tag=s.getParam("tag"));break;case"record-route":if(-1===(s=r.parse(l,"Record_Route")))s=void 0;else{var c=!0,h=!1,d=void 0;try{for(var f,p=s[Symbol.iterator]();!(c=(f=p.next()).done);c=!0){var v=f.value;e.addHeader("record-route",l.substring(v.possition,v.offset)),e.headers["Record-Route"][e.getHeaders("record-route").length-1].parsed=v.parsed}}catch(e){h=!0,d=e}finally{try{!c&&p.return&&p.return()}finally{if(h)throw d}}}break;case"call-id":case"i":e.setHeader("call-id",l),(s=e.parseHeader("call-id"))&&(e.call_id=l);break;case"contact":case"m":if(-1===(s=r.parse(l,"Contact")))s=void 0;else{var m=!0,_=!1,y=void 0;try{for(var g,T=s[Symbol.iterator]();!(m=(g=T.next()).done);m=!0){var C=g.value;e.addHeader("contact",l.substring(C.possition,C.offset)),e.headers.Contact[e.getHeaders("contact").length-1].parsed=C.parsed}}catch(e){_=!0,y=e}finally{try{!m&&T.return&&T.return()}finally{if(_)throw y}}}break;case"content-length":case"l":e.setHeader("content-length",l),s=e.parseHeader("content-length");break;case"content-type":case"c":e.setHeader("content-type",l),s=e.parseHeader("content-type");break;case"cseq":e.setHeader("cseq",l),(s=e.parseHeader("cseq"))&&(e.cseq=s.value),e instanceof i.IncomingResponse&&(e.method=s.method);break;case"max-forwards":e.setHeader("max-forwards",l),s=e.parseHeader("max-forwards");break;case"www-authenticate":e.setHeader("www-authenticate",l),s=e.parseHeader("www-authenticate");break;case"proxy-authenticate":e.setHeader("proxy-authenticate",l),s=e.parseHeader("proxy-authenticate");break;case"session-expires":case"x":e.setHeader("session-expires",l),(s=e.parseHeader("session-expires"))&&(e.session_expires=s.expires,e.session_expires_refresher=s.refresher);break;case"refer-to":case"r":e.setHeader("refer-to",l),(s=e.parseHeader("refer-to"))&&(e.refer_to=s);break;case"replaces":e.setHeader("replaces",l),(s=e.parseHeader("replaces"))&&(e.replaces=s);break;case"event":case"o":e.setHeader("event",l),(s=e.parseHeader("event"))&&(e.event=s);break;default:e.addHeader(u,l),s=0}return void 0!==s||{error:'error parsing header "'+u+'"'}}o.log=console.warn.bind(console),t.parseMessage=function(e,t){var n=void 0,u=void 0,l=e.indexOf("\r\n");if(-1!==l){var c=e.substring(0,l),h=r.parse(c,"Request_Response");if(-1!==h){h.status_code?((n=new i.IncomingResponse).status_code=h.status_code,n.reason_phrase=h.reason_phrase):((n=new i.IncomingRequest(t)).method=h.method,n.ruri=h.uri),n.data=e;for(var d=l+2;;){if(-2===(l=s(e,d))){u=d+2;break}if(-1===l)return void o("parseMessage() | malformed message");if(!0!==(h=a(n,e,d,l)))return void o("parseMessage() |",h.error);d=l+2}if(n.hasHeader("content-length")){var f=n.getHeader("content-length");n.body=e.substr(u,f)}else n.body=e.substring(u);return n}o('parseMessage() | error parsing first line of SIP message: "'+c+'"')}else o("parseMessage() | no CRLF found, not a SIP message")}},function(e,t,n){"use strict";var r=n(1),i=n(7),o=n(2),s=n(0)("JsSIP:sanityCheck"),a=[function(){var e=!0,t=!1,n=void 0;try{for(var r,i=["from","to","call_id","cseq","via"][Symbol.iterator]();!(e=(r=i.next()).done);e=!0){var o=r.value;if(!c.hasHeader(o))return s("missing mandatory header field : "+o+", dropping the response"),!1}}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}}],u=[function(){if("sip"!==c.s("to").uri.scheme)return f(416),!1},function(){if(!c.to_tag&&c.call_id.substr(0,5)===h.configuration.jssip_id)return f(482),!1},function(){var e=o.str_utf8_length(c.body),t=c.getHeader("content-length");if(e<t)return f(400),!1},function(){var e=c.from_tag,t=c.call_id,n=c.cseq,i=void 0;if(c.to_tag)return;if(c.method===r.INVITE){if(h._transactions.ist[c.via_branch])return!1;for(var o in h._transactions.ist)if(Object.prototype.hasOwnProperty.call(h._transactions.ist,o)&&(i=h._transactions.ist[o]).request.from_tag===e&&i.request.call_id===t&&i.request.cseq===n)return f(482),!1}else{if(h._transactions.nist[c.via_branch])return!1;for(var s in h._transactions.nist)if(Object.prototype.hasOwnProperty.call(h._transactions.nist,s)&&(i=h._transactions.nist[s]).request.from_tag===e&&i.request.call_id===t&&i.request.cseq===n)return f(482),!1}}],l=[function(){if(c.getHeaders("via").length>1)return s("more than one Via header field present in the response, dropping the response"),!1},function(){var e=o.str_utf8_length(c.body),t=c.getHeader("content-length");if(e<t)return s("message body length is lower than the value in Content-Length header field, dropping the response"),!1}],c=void 0,h=void 0,d=void 0;function f(e){var t=c.getHeaders("via"),n=void 0,i="SIP/2.0 "+e+" "+r.REASON_PHRASE[e]+"\r\n",s=!0,a=!1,u=void 0;try{for(var l,h=t[Symbol.iterator]();!(s=(l=h.next()).done);s=!0){i+="Via: "+l.value+"\r\n"}}catch(e){a=!0,u=e}finally{try{!s&&h.return&&h.return()}finally{if(a)throw u}}n=c.getHeader("To"),c.to_tag||(n+=";tag="+o.newTag()),i+="To: "+n+"\r\n",i+="From: "+c.getHeader("From")+"\r\n",i+="Call-ID: "+c.call_id+"\r\n",i+="CSeq: "+c.cseq+" "+c.method+"\r\n",i+="\r\n",d.send(i)}e.exports=function(e,t,n){c=e,h=t,d=n;var r=!0,o=!1,s=void 0;try{for(var f,p=a[Symbol.iterator]();!(r=(f=p.next()).done);r=!0){if(!1===(0,f.value)())return!1}}catch(e){o=!0,s=e}finally{try{!r&&p.return&&p.return()}finally{if(o)throw s}}if(c instanceof i.IncomingRequest){var v=!0,m=!1,_=void 0;try{for(var y,g=u[Symbol.iterator]();!(v=(y=g.next()).done);v=!0){if(!1===(0,y.value)())return!1}}catch(e){m=!0,_=e}finally{try{!v&&g.return&&g.return()}finally{if(m)throw _}}}else if(c instanceof i.IncomingResponse){var T=!0,C=!1,S=void 0;try{for(var b,E=l[Symbol.iterator]();!(T=(b=E.next()).done);T=!0){if(!1===(0,b.value)())return!1}}catch(e){C=!0,S=e}finally{try{!T&&E.return&&E.return()}finally{if(C)throw S}}}return!0}},function(e,t,n){"use strict";var r=n(2),i=n(1),o=n(5),s=n(12),a=n(46),u=n(8);t.settings={authorization_user:null,password:null,realm:null,ha1:null,display_name:null,uri:null,contact_uri:null,instance_id:null,use_preloaded_route:!1,session_timers:!0,session_timers_refresh_method:i.UPDATE,no_answer_timeout:60,register:!0,register_expires:600,registrar_server:null,sockets:null,connection_recovery_max_interval:null,connection_recovery_min_interval:null,via_host:r.createRandomToken(12)+".invalid"};var l={mandatory:{sockets:function(e){var t=[];if(a.isSocket(e))t.push({socket:e});else{if(!Array.isArray(e)||!e.length)return;var n=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var u=o.value;Object.prototype.hasOwnProperty.call(u,"socket")&&a.isSocket(u.socket)?t.push(u):a.isSocket(u)&&t.push({socket:u})}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}}return t},uri:function(e){/^sip:/i.test(e)||(e=i.SIP+":"+e);var t=s.parse(e);return t&&t.user?t:void 0}},optional:{authorization_user:function(e){return-1===o.parse('"'+e+'"',"quoted_string")?void 0:e},user_agent:function(e){if("string"==typeof e)return e},connection_recovery_max_interval:function(e){if(r.isDecimal(e)){var t=Number(e);if(t>0)return t}},connection_recovery_min_interval:function(e){if(r.isDecimal(e)){var t=Number(e);if(t>0)return t}},contact_uri:function(e){if("string"==typeof e){var t=o.parse(e,"SIP_URI");if(-1!==t)return t}},display_name:function(e){return-1===o.parse('"'+e+'"',"display_name")?void 0:e},instance_id:function(e){return/^uuid:/i.test(e)&&(e=e.substr(5)),-1===o.parse(e,"uuid")?void 0:e},no_answer_timeout:function(e){if(r.isDecimal(e)){var t=Number(e);if(t>0)return t}},session_timers:function(e){if("boolean"==typeof e)return e},session_timers_refresh_method:function(e){if("string"==typeof e&&((e=e.toUpperCase())===i.INVITE||e===i.UPDATE))return e},password:function(e){return String(e)},realm:function(e){return String(e)},ha1:function(e){return String(e)},register:function(e){if("boolean"==typeof e)return e},register_expires:function(e){if(r.isDecimal(e)){var t=Number(e);if(t>0)return t}},registrar_server:function(e){/^sip:/i.test(e)||(e=i.SIP+":"+e);var t=s.parse(e);return t?t.user?void 0:t:void 0},use_preloaded_route:function(e){if("boolean"==typeof e)return e}}};t.load=function(e,t){for(var n in l.mandatory){if(!t.hasOwnProperty(n))throw new u.ConfigurationError(n);var i=t[n],o=l.mandatory[n](i);if(void 0===o)throw new u.ConfigurationError(n,i);e[n]=o}for(var s in l.optional)if(t.hasOwnProperty(s)){var a=t[s];if(r.isEmpty(a))continue;var c=l.optional[s](a);if(void 0===c)throw new u.ConfigurationError(s,a);e[s]=c}}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=n(5),o=n(0)("JsSIP:WebSocketInterface"),s=n(0)("JsSIP:ERROR:WebSocketInterface");s.log=console.warn.bind(console),e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o('new() [url:"%s"]',t),this._url=t,this._sip_uri=null,this._via_transport=null,this._ws=null;var n=i.parse(t,"absoluteURI");if(-1===n)throw s("invalid WebSocket URI: "+t),new TypeError("Invalid argument: "+t);if("wss"!==n.scheme&&"ws"!==n.scheme)throw s("invalid WebSocket URI scheme: "+n.scheme),new TypeError("Invalid argument: "+t);this._sip_uri="sip:"+n.host+(n.port?":"+n.port:"")+";transport=ws",this._via_transport=n.scheme.toUpperCase()}return r(e,[{key:"connect",value:function(){if(o("connect()"),this.isConnected())o("WebSocket "+this._url+" is already connected");else if(this.isConnecting())o("WebSocket "+this._url+" is connecting");else{this._ws&&this.disconnect(),o("connecting to WebSocket "+this._url);try{this._ws=new WebSocket(this._url,"sip"),this._ws.binaryType="arraybuffer",this._ws.onopen=this._onOpen.bind(this),this._ws.onclose=this._onClose.bind(this),this._ws.onmessage=this._onMessage.bind(this),this._ws.onerror=this._onError.bind(this)}catch(e){this._onError(e)}}}},{key:"disconnect",value:function(){o("disconnect()"),this._ws&&(this._ws.onopen=function(){},this._ws.onclose=function(){},this._ws.onmessage=function(){},this._ws.onerror=function(){},this._ws.close(),this._ws=null)}},{key:"send",value:function(e){return o("send()"),this.isConnected()?(this._ws.send(e),!0):(s("unable to send message, WebSocket is not open"),!1)}},{key:"isConnected",value:function(){return this._ws&&this._ws.readyState===this._ws.OPEN}},{key:"isConnecting",value:function(){return this._ws&&this._ws.readyState===this._ws.CONNECTING}},{key:"_onOpen",value:function(){o("WebSocket "+this._url+" connected"),this.onconnect()}},{key:"_onClose",value:function(e){var t=e.wasClean,n=e.code,r=e.reason;o("WebSocket "+this._url+" closed"),!1===t&&o("WebSocket abrupt disconnection");var i={socket:this,error:!t,code:n,reason:r};this.ondisconnect(i)}},{key:"_onMessage",value:function(e){var t=e.data;o("received WebSocket message"),this.ondata(t)}},{key:"_onError",value:function(e){s("WebSocket "+this._url+" error: "+e)}},{key:"via_transport",get:function(){return this._via_transport},set:function(e){this._via_transport=e.toUpperCase()}},{key:"sip_uri",get:function(){return this._sip_uri}},{key:"url",get:function(){return this._url}}]),e}()}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,