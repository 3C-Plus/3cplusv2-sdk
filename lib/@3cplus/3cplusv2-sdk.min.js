!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("@3cplus/3cplusv2-sdk",[],t):"object"==typeof exports?exports["@3cplus/3cplusv2-sdk"]=t():e["@3cplus/3cplusv2-sdk"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=46)}([function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(69)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,s=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(s=o))}),e.splice(s,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(23))},function(e,t,n){"use strict";var r=n(40);e.exports={USER_AGENT:"".concat(r.title," ").concat(r.version),SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",MISSING_SDP:"Missing SDP",AUTHENTICATION_ERROR:"Authentication Error",BYE:"Terminated",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",DIALOG_ERROR:"Dialog Error",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484,424],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",REFER:"REFER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",DTMF_TRANSPORT:{INFO:"INFO",RFC2833:"RFC2833"},REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",424:"Bad Location Information",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"JsSIP Internal Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},ALLOWED_METHODS:"INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY",ACCEPTED_BODY_TYPES:"application/sdp, application/dtmf-relay",MAX_FORWARDS:69,SESSION_EXPIRES:90,MIN_SESSION_EXPIRES:60,CONNECTION_RECOVERY_MAX_INTERVAL:30,CONNECTION_RECOVERY_MIN_INTERVAL:2}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=n(1),a=n(8),u=n(4);t.str_utf8_length=function(e){return unescape(encodeURIComponent(e)).length};var l=t.isFunction=function(e){return void 0!==e&&"[object Function]"===Object.prototype.toString.call(e)};t.isString=function(e){return void 0!==e&&"[object String]"===Object.prototype.toString.call(e)},t.isDecimal=function(e){return!isNaN(e)&&parseFloat(e)===parseInt(e,10)},t.isEmpty=function(e){return null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length||"number"==typeof e&&isNaN(e)},t.hasMethods=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(l(e[i]))return!1}return!0};var c=t.createRandomToken=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,r="";for(t=0;t<e;t++)r+=(Math.random()*n|0).toString(n);return r};t.newTag=function(){return c(10)},t.newUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})},t.hostType=function(e){if(e)return-1!==(e=u.parse(e,"host"))?e.host_type:void 0};var h=t.escapeUser=function(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")};t.normalizeTarget=function(e,t){if(e){if(e instanceof a)return e;if("string"==typeof e){var n,r,o,s=e.split("@");switch(s.length){case 1:if(!t)return;n=e,r=t;break;case 2:n=s[0],r=s[1];break;default:n=s.slice(0,s.length-1).join("@"),r=s[s.length-1]}return n=n.replace(/^(sips?|tel):/i,""),/^[-.()]*\+?[0-9\-.()]+$/.test(n)&&(n=n.replace(/[-.()]/g,"")),e="".concat(i.SIP,":").concat(h(n),"@").concat(r),(o=a.parse(e))?o:void 0}}else;},t.headerize=function(e){var t,n={"Call-Id":"Call-ID",Cseq:"CSeq","Www-Authenticate":"WWW-Authenticate"},r=e.toLowerCase().replace(/_/g,"-").split("-"),o="",s=r.length;for(t=0;t<s;t++)0!==t&&(o+="-"),o+=r[t].charAt(0).toUpperCase()+r[t].substring(1);return n[o]&&(o=n[o]),o},t.sipErrorCause=function(e){for(var t in i.SIP_ERROR_CAUSES)if(-1!==i.SIP_ERROR_CAUSES[t].indexOf(e))return i.causes[t];return i.causes.SIP_FAILURE_CODE},t.getRandomTestNetIP=function(){return"192.0.2.".concat((e=1,t=254,Math.floor(Math.random()*(t-e+1)+e)));var e,t},t.calculateMD5=function(e){function t(e,t){return e<<t|e>>>32-t}function n(e,t){var n=2147483648&e,r=2147483648&t,o=1073741824&e,s=1073741824&t,i=(1073741823&e)+(1073741823&t);return o&s?2147483648^i^n^r:o|s?1073741824&i?3221225472^i^n^r:1073741824^i^n^r:i^n^r}function r(e,r,o,s,i,a,u){return e=n(e,n(n(function(e,t,n){return e&t|~e&n}(r,o,s),i),u)),n(t(e,a),r)}function o(e,r,o,s,i,a,u){return e=n(e,n(n(function(e,t,n){return e&n|t&~n}(r,o,s),i),u)),n(t(e,a),r)}function s(e,r,o,s,i,a,u){return e=n(e,n(n(function(e,t,n){return e^t^n}(r,o,s),i),u)),n(t(e,a),r)}function i(e,r,o,s,i,a,u){return e=n(e,n(n(function(e,t,n){return t^(e|~n)}(r,o,s),i),u)),n(t(e,a),r)}function a(e){var t,n="",r="";for(t=0;t<=3;t++)n+=(r="0".concat((e>>>8*t&255).toString(16))).substr(r.length-2,2);return n}var u,l,c,h,f,d,p,_,m,v;for(u=function(e){for(var t,n=e.length,r=n+8,o=16*((r-r%64)/64+1),s=new Array(o-1),i=0,a=0;a<n;)i=a%4*8,s[t=(a-a%4)/4]=s[t]|e.charCodeAt(a)<<i,a++;return i=a%4*8,s[t=(a-a%4)/4]=s[t]|128<<i,s[o-2]=n<<3,s[o-1]=n>>>29,s}(e=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t}(e)),p=1732584193,_=4023233417,m=2562383102,v=271733878,l=0;l<u.length;l+=16)c=p,h=_,f=m,d=v,p=r(p,_,m,v,u[l+0],7,3614090360),v=r(v,p,_,m,u[l+1],12,3905402710),m=r(m,v,p,_,u[l+2],17,606105819),_=r(_,m,v,p,u[l+3],22,3250441966),p=r(p,_,m,v,u[l+4],7,4118548399),v=r(v,p,_,m,u[l+5],12,1200080426),m=r(m,v,p,_,u[l+6],17,2821735955),_=r(_,m,v,p,u[l+7],22,4249261313),p=r(p,_,m,v,u[l+8],7,1770035416),v=r(v,p,_,m,u[l+9],12,2336552879),m=r(m,v,p,_,u[l+10],17,4294925233),_=r(_,m,v,p,u[l+11],22,2304563134),p=r(p,_,m,v,u[l+12],7,1804603682),v=r(v,p,_,m,u[l+13],12,4254626195),m=r(m,v,p,_,u[l+14],17,2792965006),p=o(p,_=r(_,m,v,p,u[l+15],22,1236535329),m,v,u[l+1],5,4129170786),v=o(v,p,_,m,u[l+6],9,3225465664),m=o(m,v,p,_,u[l+11],14,643717713),_=o(_,m,v,p,u[l+0],20,3921069994),p=o(p,_,m,v,u[l+5],5,3593408605),v=o(v,p,_,m,u[l+10],9,38016083),m=o(m,v,p,_,u[l+15],14,3634488961),_=o(_,m,v,p,u[l+4],20,3889429448),p=o(p,_,m,v,u[l+9],5,568446438),v=o(v,p,_,m,u[l+14],9,3275163606),m=o(m,v,p,_,u[l+3],14,4107603335),_=o(_,m,v,p,u[l+8],20,1163531501),p=o(p,_,m,v,u[l+13],5,2850285829),v=o(v,p,_,m,u[l+2],9,4243563512),m=o(m,v,p,_,u[l+7],14,1735328473),p=s(p,_=o(_,m,v,p,u[l+12],20,2368359562),m,v,u[l+5],4,4294588738),v=s(v,p,_,m,u[l+8],11,2272392833),m=s(m,v,p,_,u[l+11],16,1839030562),_=s(_,m,v,p,u[l+14],23,4259657740),p=s(p,_,m,v,u[l+1],4,2763975236),v=s(v,p,_,m,u[l+4],11,1272893353),m=s(m,v,p,_,u[l+7],16,4139469664),_=s(_,m,v,p,u[l+10],23,3200236656),p=s(p,_,m,v,u[l+13],4,681279174),v=s(v,p,_,m,u[l+0],11,3936430074),m=s(m,v,p,_,u[l+3],16,3572445317),_=s(_,m,v,p,u[l+6],23,76029189),p=s(p,_,m,v,u[l+9],4,3654602809),v=s(v,p,_,m,u[l+12],11,3873151461),m=s(m,v,p,_,u[l+15],16,530742520),p=i(p,_=s(_,m,v,p,u[l+2],23,3299628645),m,v,u[l+0],6,4096336452),v=i(v,p,_,m,u[l+7],10,1126891415),m=i(m,v,p,_,u[l+14],15,2878612391),_=i(_,m,v,p,u[l+5],21,4237533241),p=i(p,_,m,v,u[l+12],6,1700485571),v=i(v,p,_,m,u[l+3],10,2399980690),m=i(m,v,p,_,u[l+10],15,4293915773),_=i(_,m,v,p,u[l+1],21,2240044497),p=i(p,_,m,v,u[l+8],6,1873313359),v=i(v,p,_,m,u[l+15],10,4264355552),m=i(m,v,p,_,u[l+6],15,2734768916),_=i(_,m,v,p,u[l+13],21,1309151649),p=i(p,_,m,v,u[l+4],6,4149444226),v=i(v,p,_,m,u[l+11],10,3174756917),m=i(m,v,p,_,u[l+2],15,718787259),_=i(_,m,v,p,u[l+9],21,3951481745),p=n(p,c),_=n(_,h),m=n(m,f),v=n(v,d);return(a(p)+a(_)+a(m)+a(v)).toLowerCase()},t.closeMediaStream=function(e){if(e)try{if(e.getTracks){var t,n=o(e.getTracks());try{for(n.s();!(t=n.n()).done;){t.value.stop()}}catch(e){n.e(e)}finally{n.f()}}else{var s,i=o(e.getAudioTracks());try{for(i.s();!(s=i.n()).done;){s.value.stop()}}catch(e){i.e(e)}finally{i.f()}var a,u=o(e.getVideoTracks());try{for(u.s();!(a=u.n()).done;){a.value.stop()}}catch(e){u.e(e)}finally{u.f()}}}catch(t){"function"!=typeof e.stop&&"object"!==r(e.stop)||e.stop()}},t.cloneArray=function(e){return e&&e.slice()||[]},t.cloneObject=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e&&Object.assign({},e)||t}},function(e,t,n){"use strict";var r=n(19),o=Object.prototype.toString;function s(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function a(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):s(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";e.exports=function(){function e(e){return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}var t={parse:function(t,r){var o={CRLF:c,DIGIT:h,ALPHA:f,HEXDIG:d,WSP:p,OCTET:_,DQUOTE:m,SP:v,HTAB:y,alphanum:g,reserved:T,unreserved:b,mark:E,escaped:S,LWS:A,SWS:w,HCOLON:C,TEXT_UTF8_TRIM:R,TEXT_UTF8char:k,UTF8_NONASCII:I,UTF8_CONT:O,LHEX:function(){var e;null===(e=h())&&(/^[a-f]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[a-f]")));return e},token:N,token_nodot:x,separators:function(){var e;40===t.charCodeAt(s)?(e="(",s++):(e=null,0===i&&l('"("'));null===e&&(41===t.charCodeAt(s)?(e=")",s++):(e=null,0===i&&l('")"')),null===e&&(60===t.charCodeAt(s)?(e="<",s++):(e=null,0===i&&l('"<"')),null===e&&(62===t.charCodeAt(s)?(e=">",s++):(e=null,0===i&&l('">"')),null===e&&(64===t.charCodeAt(s)?(e="@",s++):(e=null,0===i&&l('"@"')),null===e&&(44===t.charCodeAt(s)?(e=",",s++):(e=null,0===i&&l('","')),null===e&&(59===t.charCodeAt(s)?(e=";",s++):(e=null,0===i&&l('";"')),null===e&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(92===t.charCodeAt(s)?(e="\\",s++):(e=null,0===i&&l('"\\\\"')),null===e&&null===(e=m())&&(47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"')),null===e&&(91===t.charCodeAt(s)?(e="[",s++):(e=null,0===i&&l('"["')),null===e&&(93===t.charCodeAt(s)?(e="]",s++):(e=null,0===i&&l('"]"')),null===e&&(63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null===e&&(61===t.charCodeAt(s)?(e="=",s++):(e=null,0===i&&l('"="')),null===e&&(123===t.charCodeAt(s)?(e="{",s++):(e=null,0===i&&l('"{"')),null===e&&(125===t.charCodeAt(s)?(e="}",s++):(e=null,0===i&&l('"}"')),null===e&&null===(e=v())&&(e=y()))))))))))))))));return e},word:P,STAR:D,SLASH:U,EQUAL:M,LPAREN:L,RPAREN:q,RAQUOT:j,LAQUOT:H,COMMA:B,SEMI:F,COLON:Y,LDQUOT:G,RDQUOT:W,comment:function e(){var t,n,r;var o;o=s;t=L();if(null!==t){for(n=[],null===(r=V())&&null===(r=$())&&(r=e());null!==r;)n.push(r),null===(r=V())&&null===(r=$())&&(r=e());null!==n&&null!==(r=q())?t=[t,n,r]:(t=null,s=o)}else t=null,s=o;return t},ctext:V,quoted_string:z,quoted_string_clean:K,qdtext:J,quoted_pair:$,SIP_URI_noparams:X,SIP_URI:Q,uri_scheme:Z,uri_scheme_sips:ee,uri_scheme_sip:te,userinfo:ne,user:re,user_unreserved:oe,password:se,hostport:ie,host:ae,hostname:ue,domainlabel:le,toplabel:ce,IPv6reference:he,IPv6address:fe,h16:de,ls32:pe,IPv4address:_e,dec_octet:me,port:ve,uri_parameters:ye,uri_parameter:ge,transport_param:Te,user_param:be,method_param:Ee,ttl_param:Se,maddr_param:Ae,lr_param:we,other_param:Ce,pname:Re,pvalue:ke,paramchar:Ie,param_unreserved:Oe,headers:Ne,header:xe,hname:Pe,hvalue:De,hnv_unreserved:Ue,Request_Response:function(){var e;null===(e=ht())&&(e=Me());return e},Request_Line:Me,Request_URI:Le,absoluteURI:qe,hier_part:je,net_path:He,abs_path:Be,opaque_part:Fe,uric:Ye,uric_no_slash:Ge,path_segments:We,segment:Ve,param:ze,pchar:Ke,scheme:Je,authority:$e,srvr:Xe,reg_name:Qe,query:Ze,SIP_Version:et,INVITEm:tt,ACKm:nt,OPTIONSm:rt,BYEm:ot,CANCELm:st,REGISTERm:it,SUBSCRIBEm:at,NOTIFYm:ut,REFERm:lt,Method:ct,Status_Line:ht,Status_Code:ft,extension_code:dt,Reason_Phrase:pt,Allow_Events:function(){var e,t,n,r,o,i;if(o=s,null!==(e=qt())){for(t=[],i=s,null!==(n=B())&&null!==(r=qt())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=qt())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},Call_ID:function(){var e,n,r,o,a,u;o=s,a=s,null!==(e=P())?(u=s,64===t.charCodeAt(s)?(n="@",s++):(n=null,0===i&&l('"@"')),null!==n&&null!==(r=P())?n=[n,r]:(n=null,s=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=a)):(e=null,s=a);null!==e&&(e=function(e){Bn=t.substring(s,e)}(o));null===e&&(s=o);return e},Contact:function(){var e,t,n,r,o,i,a;if(o=s,null===(e=D()))if(i=s,null!==(e=_t())){for(t=[],a=s,null!==(n=B())&&null!==(r=_t())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=B())&&null!==(r=_t())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(e=function(e){var t,n;for(n=Bn.multi_header.length,t=0;t<n;t++)if(null===Bn.multi_header[t].parsed){Bn=null;break}Bn=null!==Bn?Bn.multi_header:-1}());null===e&&(s=o);return e},contact_param:_t,name_addr:mt,display_name:vt,contact_params:yt,c_p_q:gt,c_p_expires:Tt,delta_seconds:bt,qvalue:Et,generic_param:St,gen_value:At,Content_Disposition:function(){var e,t,n,r,o,i;if(o=s,null!==(e=wt())){for(t=[],i=s,null!==(n=F())&&null!==(r=Ct())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=F())&&null!==(r=Ct())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},disp_type:wt,disp_param:Ct,handling_param:Rt,Content_Encoding:function(){var e,t,n,r,o,i;if(o=s,null!==(e=N())){for(t=[],i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},Content_Length:function(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(Bn=parseInt(e.join(""))));null===e&&(s=n);return e},Content_Type:function(){var e,n;n=s,null!==(e=kt())&&(e=function(e){Bn=t.substring(s,e)}(n));null===e&&(s=n);return e},media_type:kt,m_type:It,discrete_type:Ot,composite_type:Nt,extension_token:xt,x_token:Pt,m_subtype:Dt,m_parameter:Ut,m_value:Mt,CSeq:function(){var e,t,n,r;r=s,null!==(e=Lt())&&null!==(t=A())&&null!==(n=ct())?e=[e,t,n]:(e=null,s=r);return e},CSeq_value:Lt,Expires:function(){var e,t;t=s,null!==(e=bt())&&(e=void(Bn=e));null===e&&(s=t);return e},Event:function(){var e,t,n,r,o,i,a;if(o=s,i=s,null!==(e=qt())){for(t=[],a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(u=e[0],e=void(Bn.event=u.join("").toLowerCase()));var u;null===e&&(s=o);return e},event_type:qt,From:function(){var e,t,n,r,o,i,a;o=s,i=s,null===(e=X())&&(e=mt());if(null!==e){for(t=[],a=s,null!==(n=F())&&null!==(r=jt())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=jt())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(e=function(e){var t=Bn.tag;try{Bn=new Hn(Bn.uri,Bn.display_name,Bn.params),t&&Bn.setParam("tag",t)}catch(e){Bn=-1}}());null===e&&(s=o);return e},from_param:jt,tag_param:Ht,Max_Forwards:function(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(Bn=parseInt(e.join(""))));null===e&&(s=n);return e},Min_Expires:function(){var e,t;t=s,null!==(e=bt())&&(e=void(Bn=e));null===e&&(s=t);return e},Name_Addr_Header:function(){var e,t,n,r,o,i,a,u,l,c;u=s,l=s,e=[],t=vt();for(;null!==t;)e.push(t),t=vt();if(null!==e)if(null!==(t=H()))if(null!==(n=Q()))if(null!==(r=j())){for(o=[],c=s,null!==(i=F())&&null!==(a=St())?i=[i,a]:(i=null,s=c);null!==i;)o.push(i),c=s,null!==(i=F())&&null!==(a=St())?i=[i,a]:(i=null,s=c);null!==o?e=[e,t,n,r,o]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;else e=null,s=l;else e=null,s=l;null!==e&&(e=function(e){try{Bn=new Hn(Bn.uri,Bn.display_name,Bn.params)}catch(e){Bn=-1}}());null===e&&(s=u);return e},Proxy_Authenticate:function(){return Bt()},challenge:Bt,other_challenge:Ft,auth_param:Yt,digest_cln:Gt,realm:Wt,realm_value:Vt,domain:zt,URI:Kt,nonce:Jt,nonce_value:$t,opaque:Xt,stale:Qt,algorithm:Zt,qop_options:en,qop_value:tn,Proxy_Require:function(){var e,t,n,r,o,i;if(o=s,null!==(e=N())){for(t=[],i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},Record_Route:function(){var e,t,n,r,o,i,a;if(o=s,i=s,null!==(e=nn())){for(t=[],a=s,null!==(n=B())&&null!==(r=nn())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=B())&&null!==(r=nn())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(e=function(e){var t,n;for(n=Bn.multi_header.length,t=0;t<n;t++)if(null===Bn.multi_header[t].parsed){Bn=null;break}Bn=null!==Bn?Bn.multi_header:-1}());null===e&&(s=o);return e},rec_route:nn,Reason:function(){var e,n,r,o,a,u,c;a=s,u=s,"sip"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"SIP"'));null===e&&(e=N());if(null!==e){for(n=[],c=s,null!==(r=F())&&null!==(o=rn())?r=[r,o]:(r=null,s=c);null!==r;)n.push(r),c=s,null!==(r=F())&&null!==(o=rn())?r=[r,o]:(r=null,s=c);null!==n?e=[e,n]:(e=null,s=u)}else e=null,s=u;null!==e&&(e=function(e,t){if(Bn.protocol=t.toLowerCase(),Bn.params||(Bn.params={}),Bn.params.text&&'"'===Bn.params.text[0]){var n=Bn.params.text;Bn.text=n.substring(1,n.length-1),delete Bn.params.text}}(0,e[0]));null===e&&(s=a);return e},reason_param:rn,reason_cause:on,Require:function(){var e,t,n,r,o,i;if(o=s,null!==(e=N())){for(t=[],i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},Route:function(){var e,t,n,r,o,i;if(o=s,null!==(e=sn())){for(t=[],i=s,null!==(n=B())&&null!==(r=sn())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=sn())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},route_param:sn,Subscription_State:function(){var e,t,n,r,o,i;if(o=s,null!==(e=an())){for(t=[],i=s,null!==(n=F())&&null!==(r=un())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=F())&&null!==(r=un())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},substate_value:an,subexp_params:un,event_reason_value:ln,Subject:function(){var e;return e=null!==(e=R())?e:""},Supported:function(){var e,t,n,r,o,i;if(o=s,null!==(e=N())){for(t=[],i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=N())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e=null!==e?e:""},To:function(){var e,t,n,r,o,i,a;o=s,i=s,null===(e=X())&&(e=mt());if(null!==e){for(t=[],a=s,null!==(n=F())&&null!==(r=cn())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=cn())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(e=function(e){var t=Bn.tag;try{Bn=new Hn(Bn.uri,Bn.display_name,Bn.params),t&&Bn.setParam("tag",t)}catch(e){Bn=-1}}());null===e&&(s=o);return e},to_param:cn,Via:function(){var e,t,n,r,o,i;if(o=s,null!==(e=hn())){for(t=[],i=s,null!==(n=B())&&null!==(r=hn())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=B())&&null!==(r=hn())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},via_param:hn,via_params:fn,via_ttl:dn,via_maddr:pn,via_received:_n,via_branch:mn,response_port:vn,rport:yn,sent_protocol:gn,protocol_name:Tn,transport:bn,sent_by:En,via_host:Sn,via_port:An,ttl:wn,WWW_Authenticate:function(){return Bt()},Session_Expires:function(){var e,t,n,r,o,i;if(o=s,null!==(e=Cn())){for(t=[],i=s,null!==(n=F())&&null!==(r=Rn())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=F())&&null!==(r=Rn())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},s_e_expires:Cn,s_e_params:Rn,s_e_refresher:kn,extension_header:function(){var e,t,n,r;r=s,null!==(e=N())&&null!==(t=C())&&null!==(n=In())?e=[e,t,n]:(e=null,s=r);return e},header_value:In,message_body:function(){var e,t;e=[],t=_();for(;null!==t;)e.push(t),t=_();return e},uuid_URI:function(){var e,n,r;r=s,"uuid:"===t.substr(s,5)?(e="uuid:",s+=5):(e=null,0===i&&l('"uuid:"'));null!==e&&null!==(n=On())?e=[e,n]:(e=null,s=r);return e},uuid:On,hex4:Nn,hex8:xn,hex12:Pn,Refer_To:function(){var e,t,n,r,o,i,a;o=s,i=s,null===(e=X())&&(e=mt());if(null!==e){for(t=[],a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;null!==e&&(e=function(e){try{Bn=new Hn(Bn.uri,Bn.display_name,Bn.params)}catch(e){Bn=-1}}());null===e&&(s=o);return e},Replaces:function(){var e,t,n,r,o,i;if(o=s,null!==(e=Dn())){for(t=[],i=s,null!==(n=F())&&null!==(r=Un())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=F())&&null!==(r=Un())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e},call_id:Dn,replaces_param:Un,to_tag:Mn,from_tag:Ln,early_flag:qn};if(void 0!==r){if(void 0===o[r])throw new Error("Invalid rule name: "+e(r)+".")}else r="CRLF";var s=0,i=0,a=0,u=[];function l(e){s<a||(s>a&&(a=s,u=[]),u.push(e))}function c(){var e;return"\r\n"===t.substr(s,2)?(e="\r\n",s+=2):(e=null,0===i&&l('"\\r\\n"')),e}function h(){var e;return/^[0-9]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[0-9]")),e}function f(){var e;return/^[a-zA-Z]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[a-zA-Z]")),e}function d(){var e;return/^[0-9a-fA-F]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[0-9a-fA-F]")),e}function p(){var e;return null===(e=v())&&(e=y()),e}function _(){var e;return/^[\0-\xFF]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[\\0-\\xFF]")),e}function m(){var e;return/^["]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l('["]')),e}function v(){var e;return 32===t.charCodeAt(s)?(e=" ",s++):(e=null,0===i&&l('" "')),e}function y(){var e;return 9===t.charCodeAt(s)?(e="\t",s++):(e=null,0===i&&l('"\\t"')),e}function g(){var e;return/^[a-zA-Z0-9]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[a-zA-Z0-9]")),e}function T(){var e;return 59===t.charCodeAt(s)?(e=";",s++):(e=null,0===i&&l('";"')),null===e&&(47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"')),null===e&&(63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null===e&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(64===t.charCodeAt(s)?(e="@",s++):(e=null,0===i&&l('"@"')),null===e&&(38===t.charCodeAt(s)?(e="&",s++):(e=null,0===i&&l('"&"')),null===e&&(61===t.charCodeAt(s)?(e="=",s++):(e=null,0===i&&l('"="')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')),null===e&&(44===t.charCodeAt(s)?(e=",",s++):(e=null,0===i&&l('","'))))))))))),e}function b(){var e;return null===(e=g())&&(e=E()),e}function E(){var e;return 45===t.charCodeAt(s)?(e="-",s++):(e=null,0===i&&l('"-"')),null===e&&(95===t.charCodeAt(s)?(e="_",s++):(e=null,0===i&&l('"_"')),null===e&&(46===t.charCodeAt(s)?(e=".",s++):(e=null,0===i&&l('"."')),null===e&&(33===t.charCodeAt(s)?(e="!",s++):(e=null,0===i&&l('"!"')),null===e&&(126===t.charCodeAt(s)?(e="~",s++):(e=null,0===i&&l('"~"')),null===e&&(42===t.charCodeAt(s)?(e="*",s++):(e=null,0===i&&l('"*"')),null===e&&(39===t.charCodeAt(s)?(e="'",s++):(e=null,0===i&&l('"\'"')),null===e&&(40===t.charCodeAt(s)?(e="(",s++):(e=null,0===i&&l('"("')),null===e&&(41===t.charCodeAt(s)?(e=")",s++):(e=null,0===i&&l('")"')))))))))),e}function S(){var e,n,r,o,a;return o=s,a=s,37===t.charCodeAt(s)?(e="%",s++):(e=null,0===i&&l('"%"')),null!==e&&null!==(n=d())&&null!==(r=d())?e=[e,n,r]:(e=null,s=a),null!==e&&(e=e.join("")),null===e&&(s=o),e}function A(){var e,t,n,r,o,i;for(r=s,o=s,i=s,e=[],t=p();null!==t;)e.push(t),t=p();if(null!==e&&null!==(t=c())?e=[e,t]:(e=null,s=i),null!==(e=null!==e?e:"")){if(null!==(n=p()))for(t=[];null!==n;)t.push(n),n=p();else t=null;null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return null!==e&&(e=" "),null===e&&(s=r),e}function w(){var e;return e=null!==(e=A())?e:""}function C(){var e,n,r,o,a;for(o=s,a=s,e=[],null===(n=v())&&(n=y());null!==n;)e.push(n),null===(n=v())&&(n=y());return null!==e?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=":"),null===e&&(s=o),e}function R(){var e,n,r,o,i,a,u;if(i=s,a=s,null!==(n=k()))for(e=[];null!==n;)e.push(n),n=k();else e=null;if(null!==e){for(n=[],u=s,r=[],o=A();null!==o;)r.push(o),o=A();for(null!==r&&null!==(o=k())?r=[r,o]:(r=null,s=u);null!==r;){for(n.push(r),u=s,r=[],o=A();null!==o;)r.push(o),o=A();null!==r&&null!==(o=k())?r=[r,o]:(r=null,s=u)}null!==n?e=[e,n]:(e=null,s=a)}else e=null,s=a;return null!==e&&(e=function(e){return t.substring(s,e)}(i)),null===e&&(s=i),e}function k(){var e;return/^[!-~]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[!-~]")),null===e&&(e=I()),e}function I(){var e;return/^[\x80-\uFFFF]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[\\x80-\\uFFFF]")),e}function O(){var e;return/^[\x80-\xBF]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[\\x80-\\xBF]")),e}function N(){var e,n,r;if(r=s,null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"')))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"'))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(s,e)}(r)),null===e&&(s=r),e}function x(){var e,n,r;if(r=s,null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"'))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"')))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(s,e)}(r)),null===e&&(s=r),e}function P(){var e,n,r;if(r=s,null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"')),null===n&&(40===t.charCodeAt(s)?(n="(",s++):(n=null,0===i&&l('"("')),null===n&&(41===t.charCodeAt(s)?(n=")",s++):(n=null,0===i&&l('")"')),null===n&&(60===t.charCodeAt(s)?(n="<",s++):(n=null,0===i&&l('"<"')),null===n&&(62===t.charCodeAt(s)?(n=">",s++):(n=null,0===i&&l('">"')),null===n&&(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null===n&&(92===t.charCodeAt(s)?(n="\\",s++):(n=null,0===i&&l('"\\\\"')),null===n&&null===(n=m())&&(47===t.charCodeAt(s)?(n="/",s++):(n=null,0===i&&l('"/"')),null===n&&(91===t.charCodeAt(s)?(n="[",s++):(n=null,0===i&&l('"["')),null===n&&(93===t.charCodeAt(s)?(n="]",s++):(n=null,0===i&&l('"]"')),null===n&&(63===t.charCodeAt(s)?(n="?",s++):(n=null,0===i&&l('"?"')),null===n&&(123===t.charCodeAt(s)?(n="{",s++):(n=null,0===i&&l('"{"')),null===n&&(125===t.charCodeAt(s)?(n="}",s++):(n=null,0===i&&l('"}"')))))))))))))))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=g())&&(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null===n&&(46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null===n&&(33===t.charCodeAt(s)?(n="!",s++):(n=null,0===i&&l('"!"')),null===n&&(37===t.charCodeAt(s)?(n="%",s++):(n=null,0===i&&l('"%"')),null===n&&(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null===n&&(95===t.charCodeAt(s)?(n="_",s++):(n=null,0===i&&l('"_"')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(96===t.charCodeAt(s)?(n="`",s++):(n=null,0===i&&l('"`"')),null===n&&(39===t.charCodeAt(s)?(n="'",s++):(n=null,0===i&&l('"\'"')),null===n&&(126===t.charCodeAt(s)?(n="~",s++):(n=null,0===i&&l('"~"')),null===n&&(40===t.charCodeAt(s)?(n="(",s++):(n=null,0===i&&l('"("')),null===n&&(41===t.charCodeAt(s)?(n=")",s++):(n=null,0===i&&l('")"')),null===n&&(60===t.charCodeAt(s)?(n="<",s++):(n=null,0===i&&l('"<"')),null===n&&(62===t.charCodeAt(s)?(n=">",s++):(n=null,0===i&&l('">"')),null===n&&(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null===n&&(92===t.charCodeAt(s)?(n="\\",s++):(n=null,0===i&&l('"\\\\"')),null===n&&null===(n=m())&&(47===t.charCodeAt(s)?(n="/",s++):(n=null,0===i&&l('"/"')),null===n&&(91===t.charCodeAt(s)?(n="[",s++):(n=null,0===i&&l('"["')),null===n&&(93===t.charCodeAt(s)?(n="]",s++):(n=null,0===i&&l('"]"')),null===n&&(63===t.charCodeAt(s)?(n="?",s++):(n=null,0===i&&l('"?"')),null===n&&(123===t.charCodeAt(s)?(n="{",s++):(n=null,0===i&&l('"{"')),null===n&&(125===t.charCodeAt(s)?(n="}",s++):(n=null,0===i&&l('"}"'))))))))))))))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(s,e)}(r)),null===e&&(s=r),e}function D(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(42===t.charCodeAt(s)?(n="*",s++):(n=null,0===i&&l('"*"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e="*"),null===e&&(s=o),e}function U(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(47===t.charCodeAt(s)?(n="/",s++):(n=null,0===i&&l('"/"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e="/"),null===e&&(s=o),e}function M(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e="="),null===e&&(s=o),e}function L(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(40===t.charCodeAt(s)?(n="(",s++):(n=null,0===i&&l('"("')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e="("),null===e&&(s=o),e}function q(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(41===t.charCodeAt(s)?(n=")",s++):(n=null,0===i&&l('")"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=")"),null===e&&(s=o),e}function j(){var e,n,r,o;return r=s,o=s,62===t.charCodeAt(s)?(e=">",s++):(e=null,0===i&&l('">"')),null!==e&&null!==(n=w())?e=[e,n]:(e=null,s=o),null!==e&&(e=">"),null===e&&(s=r),e}function H(){var e,n,r,o;return r=s,o=s,null!==(e=w())?(60===t.charCodeAt(s)?(n="<",s++):(n=null,0===i&&l('"<"')),null!==n?e=[e,n]:(e=null,s=o)):(e=null,s=o),null!==e&&(e="<"),null===e&&(s=r),e}function B(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(44===t.charCodeAt(s)?(n=",",s++):(n=null,0===i&&l('","')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=","),null===e&&(s=o),e}function F(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(59===t.charCodeAt(s)?(n=";",s++):(n=null,0===i&&l('";"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=";"),null===e&&(s=o),e}function Y(){var e,n,r,o,a;return o=s,a=s,null!==(e=w())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=w())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=":"),null===e&&(s=o),e}function G(){var e,t,n,r;return n=s,r=s,null!==(e=w())&&null!==(t=m())?e=[e,t]:(e=null,s=r),null!==e&&(e='"'),null===e&&(s=n),e}function W(){var e,t,n,r;return n=s,r=s,null!==(e=m())&&null!==(t=w())?e=[e,t]:(e=null,s=r),null!==e&&(e='"'),null===e&&(s=n),e}function V(){var e;return/^[!-']/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[!-']")),null===e&&(/^[*-[]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[*-[]")),null===e&&(/^[\]-~]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[\\]-~]")),null===e&&null===(e=I())&&(e=A()))),e}function z(){var e,n,r,o,i,a;if(i=s,a=s,null!==(e=w()))if(null!==(n=m())){for(r=[],null===(o=J())&&(o=$());null!==o;)r.push(o),null===(o=J())&&(o=$());null!==r&&null!==(o=m())?e=[e,n,r,o]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;return null!==e&&(e=function(e){return t.substring(s,e)}(i)),null===e&&(s=i),e}function K(){var e,n,r,o,i,a;if(i=s,a=s,null!==(e=w()))if(null!==(n=m())){for(r=[],null===(o=J())&&(o=$());null!==o;)r.push(o),null===(o=J())&&(o=$());null!==r&&null!==(o=m())?e=[e,n,r,o]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;return null!==e&&(e=function(e){var n=t.substring(s,e).trim();return n.substring(1,n.length-1).replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g,"$1")}(i)),null===e&&(s=i),e}function J(){var e;return null===(e=A())&&(33===t.charCodeAt(s)?(e="!",s++):(e=null,0===i&&l('"!"')),null===e&&(/^[#-[]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[#-[]")),null===e&&(/^[\]-~]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[\\]-~]")),null===e&&(e=I())))),e}function $(){var e,n,r;return r=s,92===t.charCodeAt(s)?(e="\\",s++):(e=null,0===i&&l('"\\\\"')),null!==e?(/^[\0-\t]/.test(t.charAt(s))?(n=t.charAt(s),s++):(n=null,0===i&&l("[\\0-\\t]")),null===n&&(/^[\x0B-\f]/.test(t.charAt(s))?(n=t.charAt(s),s++):(n=null,0===i&&l("[\\x0B-\\f]")),null===n&&(/^[\x0E-]/.test(t.charAt(s))?(n=t.charAt(s),s++):(n=null,0===i&&l("[\\x0E-]")))),null!==n?e=[e,n]:(e=null,s=r)):(e=null,s=r),e}function X(){var e,n,r,o,a,u;return a=s,u=s,null!==(e=Z())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=null!==(r=ne())?r:"")&&null!==(o=ie())?e=[e,n,r,o]:(e=null,s=u)):(e=null,s=u),null!==e&&(e=function(e){try{Bn.uri=new jn(Bn.scheme,Bn.user,Bn.host,Bn.port),delete Bn.scheme,delete Bn.user,delete Bn.host,delete Bn.host_type,delete Bn.port}catch(e){Bn=-1}}()),null===e&&(s=a),e}function Q(){var e,n,o,a,u,c,h,f;return h=s,f=s,null!==(e=Z())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(o=null!==(o=ne())?o:"")&&null!==(a=ie())&&null!==(u=ye())&&null!==(c=null!==(c=Ne())?c:"")?e=[e,n,o,a,u,c]:(e=null,s=f)):(e=null,s=f),null!==e&&(e=function(e){try{Bn.uri=new jn(Bn.scheme,Bn.user,Bn.host,Bn.port,Bn.uri_params,Bn.uri_headers),delete Bn.scheme,delete Bn.user,delete Bn.host,delete Bn.host_type,delete Bn.port,delete Bn.uri_params,"SIP_URI"===r&&(Bn=Bn.uri)}catch(e){Bn=-1}}()),null===e&&(s=h),e}function Z(){var e;return null===(e=ee())&&(e=te()),e}function ee(){var e,n,r;return n=s,"sips"===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"sips"')),null!==e&&(r=e,e=void(Bn.scheme=r.toLowerCase())),null===e&&(s=n),e}function te(){var e,n,r;return n=s,"sip"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"sip"')),null!==e&&(r=e,e=void(Bn.scheme=r.toLowerCase())),null===e&&(s=n),e}function ne(){var e,n,r,o,a,u;return o=s,a=s,null!==(e=re())?(u=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=se())?n=[n,r]:(n=null,s=u),null!==(n=null!==n?n:"")?(64===t.charCodeAt(s)?(r="@",s++):(r=null,0===i&&l('"@"')),null!==r?e=[e,n,r]:(e=null,s=a)):(e=null,s=a)):(e=null,s=a),null!==e&&(e=function(e){Bn.user=decodeURIComponent(t.substring(s-1,e))}(o)),null===e&&(s=o),e}function re(){var e,t;if(null===(t=b())&&null===(t=S())&&(t=oe()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=b())&&null===(t=S())&&(t=oe());else e=null;return e}function oe(){var e;return 38===t.charCodeAt(s)?(e="&",s++):(e=null,0===i&&l('"&"')),null===e&&(61===t.charCodeAt(s)?(e="=",s++):(e=null,0===i&&l('"="')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')),null===e&&(44===t.charCodeAt(s)?(e=",",s++):(e=null,0===i&&l('","')),null===e&&(59===t.charCodeAt(s)?(e=";",s++):(e=null,0===i&&l('";"')),null===e&&(63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null===e&&(47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"'))))))))),e}function se(){var e,n,r;for(r=s,e=[],null===(n=b())&&null===(n=S())&&(38===t.charCodeAt(s)?(n="&",s++):(n=null,0===i&&l('"&"')),null===n&&(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(36===t.charCodeAt(s)?(n="$",s++):(n=null,0===i&&l('"$"')),null===n&&(44===t.charCodeAt(s)?(n=",",s++):(n=null,0===i&&l('","')))))));null!==n;)e.push(n),null===(n=b())&&null===(n=S())&&(38===t.charCodeAt(s)?(n="&",s++):(n=null,0===i&&l('"&"')),null===n&&(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')),null===n&&(36===t.charCodeAt(s)?(n="$",s++):(n=null,0===i&&l('"$"')),null===n&&(44===t.charCodeAt(s)?(n=",",s++):(n=null,0===i&&l('","')))))));return null!==e&&(e=function(e){Bn.password=t.substring(s,e)}(r)),null===e&&(s=r),e}function ie(){var e,n,r,o,a;return o=s,null!==(e=ae())?(a=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=ve())?n=[n,r]:(n=null,s=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=o)):(e=null,s=o),e}function ae(){var e,n;return n=s,null===(e=ue())&&null===(e=_e())&&(e=he()),null!==e&&(e=function(e){return Bn.host=t.substring(s,e).toLowerCase(),Bn.host}(n)),null===e&&(s=n),e}function ue(){var e,n,r,o,a,u;for(o=s,a=s,e=[],u=s,null!==(n=le())?(46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')),null!==r?n=[n,r]:(n=null,s=u)):(n=null,s=u);null!==n;)e.push(n),u=s,null!==(n=le())?(46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')),null!==r?n=[n,r]:(n=null,s=u)):(n=null,s=u);return null!==e&&null!==(n=ce())?(46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')),null!==(r=null!==r?r:"")?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=function(e){return Bn.host_type="domain",t.substring(s,e)}(o)),null===e&&(s=o),e}function le(){var e,n,r,o;if(o=s,null!==(e=g())){for(n=[],null===(r=g())&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(95===t.charCodeAt(s)?(r="_",s++):(r=null,0===i&&l('"_"'))));null!==r;)n.push(r),null===(r=g())&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(95===t.charCodeAt(s)?(r="_",s++):(r=null,0===i&&l('"_"'))));null!==n?e=[e,n]:(e=null,s=o)}else e=null,s=o;return e}function ce(){var e,n,r,o;if(o=s,null!==(e=f())){for(n=[],null===(r=g())&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(95===t.charCodeAt(s)?(r="_",s++):(r=null,0===i&&l('"_"'))));null!==r;)n.push(r),null===(r=g())&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(95===t.charCodeAt(s)?(r="_",s++):(r=null,0===i&&l('"_"'))));null!==n?e=[e,n]:(e=null,s=o)}else e=null,s=o;return e}function he(){var e,n,r,o,a;return o=s,a=s,91===t.charCodeAt(s)?(e="[",s++):(e=null,0===i&&l('"["')),null!==e&&null!==(n=fe())?(93===t.charCodeAt(s)?(r="]",s++):(r=null,0===i&&l('"]"')),null!==r?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=function(e){return Bn.host_type="IPv6",t.substring(s,e)}(o)),null===e&&(s=o),e}function fe(){var e,n,r,o,a,u,c,h,f,d,p,_,m,v,y,g;return v=s,y=s,null!==(e=de())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?(58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?(58===t.charCodeAt(s)?(u=":",s++):(u=null,0===i&&l('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(s)?(h=":",s++):(h=null,0===i&&l('":"')),null!==h&&null!==(f=de())?(58===t.charCodeAt(s)?(d=":",s++):(d=null,0===i&&l('":"')),null!==d&&null!==(p=de())?(58===t.charCodeAt(s)?(_=":",s++):(_=null,0===i&&l('":"')),null!==_&&null!==(m=pe())?e=[e,n,r,o,a,u,c,h,f,d,p,_,m]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?(58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=de())?(58===t.charCodeAt(s)?(f=":",s++):(f=null,0===i&&l('":"')),null!==f&&null!==(d=de())?(58===t.charCodeAt(s)?(p=":",s++):(p=null,0===i&&l('":"')),null!==p&&null!==(_=pe())?e=[e,n,r,o,a,u,c,h,f,d,p,_]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?(58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=de())?(58===t.charCodeAt(s)?(f=":",s++):(f=null,0===i&&l('":"')),null!==f&&null!==(d=pe())?e=[e,n,r,o,a,u,c,h,f,d]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?(58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=pe())?e=[e,n,r,o,a,u,c,h]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=pe())?e=[e,n,r,o,a,u]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=pe())?e=[e,n,r,o]:(e=null,s=y)):(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=pe())?e=[e,n]:(e=null,s=y),null===e&&(y=s,"::"===t.substr(s,2)?(e="::",s+=2):(e=null,0===i&&l('"::"')),null!==e&&null!==(n=de())?e=[e,n]:(e=null,s=y),null===e&&(y=s,null!==(e=de())?("::"===t.substr(s,2)?(n="::",s+=2):(n=null,0===i&&l('"::"')),null!==n&&null!==(r=de())?(58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?(58===t.charCodeAt(s)?(u=":",s++):(u=null,0===i&&l('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(s)?(h=":",s++):(h=null,0===i&&l('":"')),null!==h&&null!==(f=de())?(58===t.charCodeAt(s)?(d=":",s++):(d=null,0===i&&l('":"')),null!==d&&null!==(p=pe())?e=[e,n,r,o,a,u,c,h,f,d,p]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?("::"===t.substr(s,2)?(r="::",s+=2):(r=null,0===i&&l('"::"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?(58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=de())?(58===t.charCodeAt(s)?(f=":",s++):(f=null,0===i&&l('":"')),null!==f&&null!==(d=pe())?e=[e,n,r,o,a,u,c,h,f,d]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?(g=s,58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,s=g),null!==(r=null!==r?r:"")?("::"===t.substr(s,2)?(o="::",s+=2):(o=null,0===i&&l('"::"')),null!==o&&null!==(a=de())?(58===t.charCodeAt(s)?(u=":",s++):(u=null,0===i&&l('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(s)?(h=":",s++):(h=null,0===i&&l('":"')),null!==h&&null!==(f=pe())?e=[e,n,r,o,a,u,c,h,f]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?(g=s,58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,s=g),null!==(r=null!==r?r:"")?(g=s,58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?o=[o,a]:(o=null,s=g),null!==(o=null!==o?o:"")?("::"===t.substr(s,2)?(a="::",s+=2):(a=null,0===i&&l('"::"')),null!==a&&null!==(u=de())?(58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=pe())?e=[e,n,r,o,a,u,c,h]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?(g=s,58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,s=g),null!==(r=null!==r?r:"")?(g=s,58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?o=[o,a]:(o=null,s=g),null!==(o=null!==o?o:"")?(g=s,58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?a=[a,u]:(a=null,s=g),null!==(a=null!==a?a:"")?("::"===t.substr(s,2)?(u="::",s+=2):(u=null,0===i&&l('"::"')),null!==u&&null!==(c=pe())?e=[e,n,r,o,a,u,c]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?(g=s,58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,s=g),null!==(r=null!==r?r:"")?(g=s,58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?o=[o,a]:(o=null,s=g),null!==(o=null!==o?o:"")?(g=s,58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?a=[a,u]:(a=null,s=g),null!==(a=null!==a?a:"")?(g=s,58===t.charCodeAt(s)?(u=":",s++):(u=null,0===i&&l('":"')),null!==u&&null!==(c=de())?u=[u,c]:(u=null,s=g),null!==(u=null!==u?u:"")?("::"===t.substr(s,2)?(c="::",s+=2):(c=null,0===i&&l('"::"')),null!==c&&null!==(h=de())?e=[e,n,r,o,a,u,c,h]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y),null===e&&(y=s,null!==(e=de())?(g=s,58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?n=[n,r]:(n=null,s=g),null!==(n=null!==n?n:"")?(g=s,58===t.charCodeAt(s)?(r=":",s++):(r=null,0===i&&l('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,s=g),null!==(r=null!==r?r:"")?(g=s,58===t.charCodeAt(s)?(o=":",s++):(o=null,0===i&&l('":"')),null!==o&&null!==(a=de())?o=[o,a]:(o=null,s=g),null!==(o=null!==o?o:"")?(g=s,58===t.charCodeAt(s)?(a=":",s++):(a=null,0===i&&l('":"')),null!==a&&null!==(u=de())?a=[a,u]:(a=null,s=g),null!==(a=null!==a?a:"")?(g=s,58===t.charCodeAt(s)?(u=":",s++):(u=null,0===i&&l('":"')),null!==u&&null!==(c=de())?u=[u,c]:(u=null,s=g),null!==(u=null!==u?u:"")?(g=s,58===t.charCodeAt(s)?(c=":",s++):(c=null,0===i&&l('":"')),null!==c&&null!==(h=de())?c=[c,h]:(c=null,s=g),null!==(c=null!==c?c:"")?("::"===t.substr(s,2)?(h="::",s+=2):(h=null,0===i&&l('"::"')),null!==h?e=[e,n,r,o,a,u,c,h]:(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y)):(e=null,s=y))))))))))))))),null!==e&&(e=function(e){return Bn.host_type="IPv6",t.substring(s,e)}(v)),null===e&&(s=v),e}function de(){var e,t,n,r,o;return o=s,null!==(e=d())&&null!==(t=null!==(t=d())?t:"")&&null!==(n=null!==(n=d())?n:"")&&null!==(r=null!==(r=d())?r:"")?e=[e,t,n,r]:(e=null,s=o),e}function pe(){var e,n,r,o;return o=s,null!==(e=de())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n&&null!==(r=de())?e=[e,n,r]:(e=null,s=o)):(e=null,s=o),null===e&&(e=_e()),e}function _e(){var e,n,r,o,a,u,c,h,f;return h=s,f=s,null!==(e=me())?(46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null!==n&&null!==(r=me())?(46===t.charCodeAt(s)?(o=".",s++):(o=null,0===i&&l('"."')),null!==o&&null!==(a=me())?(46===t.charCodeAt(s)?(u=".",s++):(u=null,0===i&&l('"."')),null!==u&&null!==(c=me())?e=[e,n,r,o,a,u,c]:(e=null,s=f)):(e=null,s=f)):(e=null,s=f)):(e=null,s=f),null!==e&&(e=function(e){return Bn.host_type="IPv4",t.substring(s,e)}(h)),null===e&&(s=h),e}function me(){var e,n,r,o;return o=s,"25"===t.substr(s,2)?(e="25",s+=2):(e=null,0===i&&l('"25"')),null!==e?(/^[0-5]/.test(t.charAt(s))?(n=t.charAt(s),s++):(n=null,0===i&&l("[0-5]")),null!==n?e=[e,n]:(e=null,s=o)):(e=null,s=o),null===e&&(o=s,50===t.charCodeAt(s)?(e="2",s++):(e=null,0===i&&l('"2"')),null!==e?(/^[0-4]/.test(t.charAt(s))?(n=t.charAt(s),s++):(n=null,0===i&&l("[0-4]")),null!==n&&null!==(r=h())?e=[e,n,r]:(e=null,s=o)):(e=null,s=o),null===e&&(o=s,49===t.charCodeAt(s)?(e="1",s++):(e=null,0===i&&l('"1"')),null!==e&&null!==(n=h())&&null!==(r=h())?e=[e,n,r]:(e=null,s=o),null===e&&(o=s,/^[1-9]/.test(t.charAt(s))?(e=t.charAt(s),s++):(e=null,0===i&&l("[1-9]")),null!==e&&null!==(n=h())?e=[e,n]:(e=null,s=o),null===e&&(e=h())))),e}function ve(){var e,t,n,r,o,i,a,u;return i=s,a=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(o=null!==(o=h())?o:"")?e=[e,t,n,r,o]:(e=null,s=a),null!==e&&(u=e,u=parseInt(u.join("")),Bn.port=u,e=u),null===e&&(s=i),e}function ye(){var e,n,r,o;for(e=[],o=s,59===t.charCodeAt(s)?(n=";",s++):(n=null,0===i&&l('";"')),null!==n&&null!==(r=ge())?n=[n,r]:(n=null,s=o);null!==n;)e.push(n),o=s,59===t.charCodeAt(s)?(n=";",s++):(n=null,0===i&&l('";"')),null!==n&&null!==(r=ge())?n=[n,r]:(n=null,s=o);return e}function ge(){var e;return null===(e=Te())&&null===(e=be())&&null===(e=Ee())&&null===(e=Se())&&null===(e=Ae())&&null===(e=we())&&(e=Ce()),e}function Te(){var e,n,r,o,a;return r=s,o=s,"transport="===t.substr(s,10).toLowerCase()?(e=t.substr(s,10),s+=10):(e=null,0===i&&l('"transport="')),null!==e?("udp"===t.substr(s,3).toLowerCase()?(n=t.substr(s,3),s+=3):(n=null,0===i&&l('"udp"')),null===n&&("tcp"===t.substr(s,3).toLowerCase()?(n=t.substr(s,3),s+=3):(n=null,0===i&&l('"tcp"')),null===n&&("sctp"===t.substr(s,4).toLowerCase()?(n=t.substr(s,4),s+=4):(n=null,0===i&&l('"sctp"')),null===n&&("tls"===t.substr(s,3).toLowerCase()?(n=t.substr(s,3),s+=3):(n=null,0===i&&l('"tls"')),null===n&&(n=N())))),null!==n?e=[e,n]:(e=null,s=o)):(e=null,s=o),null!==e&&(a=e[1],Bn.uri_params||(Bn.uri_params={}),e=void(Bn.uri_params.transport=a.toLowerCase())),null===e&&(s=r),e}function be(){var e,n,r,o,a;return r=s,o=s,"user="===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"user="')),null!==e?("phone"===t.substr(s,5).toLowerCase()?(n=t.substr(s,5),s+=5):(n=null,0===i&&l('"phone"')),null===n&&("ip"===t.substr(s,2).toLowerCase()?(n=t.substr(s,2),s+=2):(n=null,0===i&&l('"ip"')),null===n&&(n=N())),null!==n?e=[e,n]:(e=null,s=o)):(e=null,s=o),null!==e&&(a=e[1],Bn.uri_params||(Bn.uri_params={}),e=void(Bn.uri_params.user=a.toLowerCase())),null===e&&(s=r),e}function Ee(){var e,n,r,o,a;return r=s,o=s,"method="===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"method="')),null!==e&&null!==(n=ct())?e=[e,n]:(e=null,s=o),null!==e&&(a=e[1],Bn.uri_params||(Bn.uri_params={}),e=void(Bn.uri_params.method=a)),null===e&&(s=r),e}function Se(){var e,n,r,o,a;return r=s,o=s,"ttl="===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"ttl="')),null!==e&&null!==(n=wn())?e=[e,n]:(e=null,s=o),null!==e&&(a=e[1],Bn.params||(Bn.params={}),e=void(Bn.params.ttl=a)),null===e&&(s=r),e}function Ae(){var e,n,r,o,a;return r=s,o=s,"maddr="===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"maddr="')),null!==e&&null!==(n=ae())?e=[e,n]:(e=null,s=o),null!==e&&(a=e[1],Bn.uri_params||(Bn.uri_params={}),e=void(Bn.uri_params.maddr=a)),null===e&&(s=r),e}function we(){var e,n,r,o,a,u;return o=s,a=s,"lr"===t.substr(s,2).toLowerCase()?(e=t.substr(s,2),s+=2):(e=null,0===i&&l('"lr"')),null!==e?(u=s,61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null!==n&&null!==(r=N())?n=[n,r]:(n=null,s=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=a)):(e=null,s=a),null!==e&&(Bn.uri_params||(Bn.uri_params={}),e=void(Bn.uri_params.lr=void 0)),null===e&&(s=o),e}function Ce(){var e,n,r,o,a,u,c,h;return o=s,a=s,null!==(e=Re())?(u=s,61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null!==n&&null!==(r=ke())?n=[n,r]:(n=null,s=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=a)):(e=null,s=a),null!==e&&(c=e[0],h=e[1],Bn.uri_params||(Bn.uri_params={}),h=void 0===h?void 0:h[1],e=void(Bn.uri_params[c.toLowerCase()]=h)),null===e&&(s=o),e}function Re(){var e,t,n;if(n=s,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(s=n),e}function ke(){var e,t,n;if(n=s,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(s=n),e}function Ie(){var e;return null===(e=Oe())&&null===(e=b())&&(e=S()),e}function Oe(){var e;return 91===t.charCodeAt(s)?(e="[",s++):(e=null,0===i&&l('"["')),null===e&&(93===t.charCodeAt(s)?(e="]",s++):(e=null,0===i&&l('"]"')),null===e&&(47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"')),null===e&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(38===t.charCodeAt(s)?(e="&",s++):(e=null,0===i&&l('"&"')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')))))))),e}function Ne(){var e,n,r,o,a,u,c;if(u=s,63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null!==e)if(null!==(n=xe())){for(r=[],c=s,38===t.charCodeAt(s)?(o="&",s++):(o=null,0===i&&l('"&"')),null!==o&&null!==(a=xe())?o=[o,a]:(o=null,s=c);null!==o;)r.push(o),c=s,38===t.charCodeAt(s)?(o="&",s++):(o=null,0===i&&l('"&"')),null!==o&&null!==(a=xe())?o=[o,a]:(o=null,s=c);null!==r?e=[e,n,r]:(e=null,s=u)}else e=null,s=u;else e=null,s=u;return e}function xe(){var e,n,r,o,a,u,c;return o=s,a=s,null!==(e=Pe())?(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null!==n&&null!==(r=De())?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(u=e[0],c=e[2],u=u.join("").toLowerCase(),c=c.join(""),Bn.uri_headers||(Bn.uri_headers={}),e=void(Bn.uri_headers[u]?Bn.uri_headers[u].push(c):Bn.uri_headers[u]=[c])),null===e&&(s=o),e}function Pe(){var e,t;if(null===(t=Ue())&&null===(t=b())&&(t=S()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=Ue())&&null===(t=b())&&(t=S());else e=null;return e}function De(){var e,t;for(e=[],null===(t=Ue())&&null===(t=b())&&(t=S());null!==t;)e.push(t),null===(t=Ue())&&null===(t=b())&&(t=S());return e}function Ue(){var e;return 91===t.charCodeAt(s)?(e="[",s++):(e=null,0===i&&l('"["')),null===e&&(93===t.charCodeAt(s)?(e="]",s++):(e=null,0===i&&l('"]"')),null===e&&(47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"')),null===e&&(63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null===e&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')))))))),e}function Me(){var e,t,n,r,o,i;return i=s,null!==(e=ct())&&null!==(t=v())&&null!==(n=Le())&&null!==(r=v())&&null!==(o=et())?e=[e,t,n,r,o]:(e=null,s=i),e}function Le(){var e;return null===(e=Q())&&(e=qe()),e}function qe(){var e,n,r,o;return o=s,null!==(e=Je())?(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null!==n?(null===(r=je())&&(r=Fe()),null!==r?e=[e,n,r]:(e=null,s=o)):(e=null,s=o)):(e=null,s=o),e}function je(){var e,n,r,o,a;return o=s,null===(e=He())&&(e=Be()),null!==e?(a=s,63===t.charCodeAt(s)?(n="?",s++):(n=null,0===i&&l('"?"')),null!==n&&null!==(r=Ze())?n=[n,r]:(n=null,s=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=o)):(e=null,s=o),e}function He(){var e,n,r,o;return o=s,"//"===t.substr(s,2)?(e="//",s+=2):(e=null,0===i&&l('"//"')),null!==e&&null!==(n=$e())&&null!==(r=null!==(r=Be())?r:"")?e=[e,n,r]:(e=null,s=o),e}function Be(){var e,n,r;return r=s,47===t.charCodeAt(s)?(e="/",s++):(e=null,0===i&&l('"/"')),null!==e&&null!==(n=We())?e=[e,n]:(e=null,s=r),e}function Fe(){var e,t,n,r;if(r=s,null!==(e=Ge())){for(t=[],n=Ye();null!==n;)t.push(n),n=Ye();null!==t?e=[e,t]:(e=null,s=r)}else e=null,s=r;return e}function Ye(){var e;return null===(e=T())&&null===(e=b())&&(e=S()),e}function Ge(){var e;return null===(e=b())&&null===(e=S())&&(59===t.charCodeAt(s)?(e=";",s++):(e=null,0===i&&l('";"')),null===e&&(63===t.charCodeAt(s)?(e="?",s++):(e=null,0===i&&l('"?"')),null===e&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(64===t.charCodeAt(s)?(e="@",s++):(e=null,0===i&&l('"@"')),null===e&&(38===t.charCodeAt(s)?(e="&",s++):(e=null,0===i&&l('"&"')),null===e&&(61===t.charCodeAt(s)?(e="=",s++):(e=null,0===i&&l('"="')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')),null===e&&(44===t.charCodeAt(s)?(e=",",s++):(e=null,0===i&&l('","'))))))))))),e}function We(){var e,n,r,o,a,u;if(a=s,null!==(e=Ve())){for(n=[],u=s,47===t.charCodeAt(s)?(r="/",s++):(r=null,0===i&&l('"/"')),null!==r&&null!==(o=Ve())?r=[r,o]:(r=null,s=u);null!==r;)n.push(r),u=s,47===t.charCodeAt(s)?(r="/",s++):(r=null,0===i&&l('"/"')),null!==r&&null!==(o=Ve())?r=[r,o]:(r=null,s=u);null!==n?e=[e,n]:(e=null,s=a)}else e=null,s=a;return e}function Ve(){var e,n,r,o,a,u;for(a=s,e=[],n=Ke();null!==n;)e.push(n),n=Ke();if(null!==e){for(n=[],u=s,59===t.charCodeAt(s)?(r=";",s++):(r=null,0===i&&l('";"')),null!==r&&null!==(o=ze())?r=[r,o]:(r=null,s=u);null!==r;)n.push(r),u=s,59===t.charCodeAt(s)?(r=";",s++):(r=null,0===i&&l('";"')),null!==r&&null!==(o=ze())?r=[r,o]:(r=null,s=u);null!==n?e=[e,n]:(e=null,s=a)}else e=null,s=a;return e}function ze(){var e,t;for(e=[],t=Ke();null!==t;)e.push(t),t=Ke();return e}function Ke(){var e;return null===(e=b())&&null===(e=S())&&(58===t.charCodeAt(s)?(e=":",s++):(e=null,0===i&&l('":"')),null===e&&(64===t.charCodeAt(s)?(e="@",s++):(e=null,0===i&&l('"@"')),null===e&&(38===t.charCodeAt(s)?(e="&",s++):(e=null,0===i&&l('"&"')),null===e&&(61===t.charCodeAt(s)?(e="=",s++):(e=null,0===i&&l('"="')),null===e&&(43===t.charCodeAt(s)?(e="+",s++):(e=null,0===i&&l('"+"')),null===e&&(36===t.charCodeAt(s)?(e="$",s++):(e=null,0===i&&l('"$"')),null===e&&(44===t.charCodeAt(s)?(e=",",s++):(e=null,0===i&&l('","'))))))))),e}function Je(){var e,n,r,o,a;if(o=s,a=s,null!==(e=f())){for(n=[],null===(r=f())&&null===(r=h())&&(43===t.charCodeAt(s)?(r="+",s++):(r=null,0===i&&l('"+"')),null===r&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')))));null!==r;)n.push(r),null===(r=f())&&null===(r=h())&&(43===t.charCodeAt(s)?(r="+",s++):(r=null,0===i&&l('"+"')),null===r&&(45===t.charCodeAt(s)?(r="-",s++):(r=null,0===i&&l('"-"')),null===r&&(46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')))));null!==n?e=[e,n]:(e=null,s=a)}else e=null,s=a;return null!==e&&(e=function(e){Bn.scheme=t.substring(s,e)}(o)),null===e&&(s=o),e}function $e(){var e;return null===(e=Xe())&&(e=Qe()),e}function Xe(){var e,n,r,o;return r=s,o=s,null!==(e=ne())?(64===t.charCodeAt(s)?(n="@",s++):(n=null,0===i&&l('"@"')),null!==n?e=[e,n]:(e=null,s=o)):(e=null,s=o),null!==(e=null!==e?e:"")&&null!==(n=ie())?e=[e,n]:(e=null,s=r),e=null!==e?e:""}function Qe(){var e,n;if(null===(n=b())&&null===(n=S())&&(36===t.charCodeAt(s)?(n="$",s++):(n=null,0===i&&l('"$"')),null===n&&(44===t.charCodeAt(s)?(n=",",s++):(n=null,0===i&&l('","')),null===n&&(59===t.charCodeAt(s)?(n=";",s++):(n=null,0===i&&l('";"')),null===n&&(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null===n&&(64===t.charCodeAt(s)?(n="@",s++):(n=null,0===i&&l('"@"')),null===n&&(38===t.charCodeAt(s)?(n="&",s++):(n=null,0===i&&l('"&"')),null===n&&(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"')))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=b())&&null===(n=S())&&(36===t.charCodeAt(s)?(n="$",s++):(n=null,0===i&&l('"$"')),null===n&&(44===t.charCodeAt(s)?(n=",",s++):(n=null,0===i&&l('","')),null===n&&(59===t.charCodeAt(s)?(n=";",s++):(n=null,0===i&&l('";"')),null===n&&(58===t.charCodeAt(s)?(n=":",s++):(n=null,0===i&&l('":"')),null===n&&(64===t.charCodeAt(s)?(n="@",s++):(n=null,0===i&&l('"@"')),null===n&&(38===t.charCodeAt(s)?(n="&",s++):(n=null,0===i&&l('"&"')),null===n&&(61===t.charCodeAt(s)?(n="=",s++):(n=null,0===i&&l('"="')),null===n&&(43===t.charCodeAt(s)?(n="+",s++):(n=null,0===i&&l('"+"'))))))))));else e=null;return e}function Ze(){var e,t;for(e=[],t=Ye();null!==t;)e.push(t),t=Ye();return e}function et(){var e,n,r,o,a,u,c,f;if(c=s,f=s,"sip"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"SIP"')),null!==e)if(47===t.charCodeAt(s)?(n="/",s++):(n=null,0===i&&l('"/"')),null!==n){if(null!==(o=h()))for(r=[];null!==o;)r.push(o),o=h();else r=null;if(null!==r)if(46===t.charCodeAt(s)?(o=".",s++):(o=null,0===i&&l('"."')),null!==o){if(null!==(u=h()))for(a=[];null!==u;)a.push(u),u=h();else a=null;null!==a?e=[e,n,r,o,a]:(e=null,s=f)}else e=null,s=f;else e=null,s=f}else e=null,s=f;else e=null,s=f;return null!==e&&(e=function(e){Bn.sip_version=t.substring(s,e)}(c)),null===e&&(s=c),e}function tt(){var e;return"INVITE"===t.substr(s,6)?(e="INVITE",s+=6):(e=null,0===i&&l('"INVITE"')),e}function nt(){var e;return"ACK"===t.substr(s,3)?(e="ACK",s+=3):(e=null,0===i&&l('"ACK"')),e}function rt(){var e;return"OPTIONS"===t.substr(s,7)?(e="OPTIONS",s+=7):(e=null,0===i&&l('"OPTIONS"')),e}function ot(){var e;return"BYE"===t.substr(s,3)?(e="BYE",s+=3):(e=null,0===i&&l('"BYE"')),e}function st(){var e;return"CANCEL"===t.substr(s,6)?(e="CANCEL",s+=6):(e=null,0===i&&l('"CANCEL"')),e}function it(){var e;return"REGISTER"===t.substr(s,8)?(e="REGISTER",s+=8):(e=null,0===i&&l('"REGISTER"')),e}function at(){var e;return"SUBSCRIBE"===t.substr(s,9)?(e="SUBSCRIBE",s+=9):(e=null,0===i&&l('"SUBSCRIBE"')),e}function ut(){var e;return"NOTIFY"===t.substr(s,6)?(e="NOTIFY",s+=6):(e=null,0===i&&l('"NOTIFY"')),e}function lt(){var e;return"REFER"===t.substr(s,5)?(e="REFER",s+=5):(e=null,0===i&&l('"REFER"')),e}function ct(){var e,n;return n=s,null===(e=tt())&&null===(e=nt())&&null===(e=rt())&&null===(e=ot())&&null===(e=st())&&null===(e=it())&&null===(e=at())&&null===(e=ut())&&null===(e=lt())&&(e=N()),null!==e&&(e=function(e){return Bn.method=t.substring(s,e),Bn.method}(n)),null===e&&(s=n),e}function ht(){var e,t,n,r,o,i;return i=s,null!==(e=et())&&null!==(t=v())&&null!==(n=ft())&&null!==(r=v())&&null!==(o=pt())?e=[e,t,n,r,o]:(e=null,s=i),e}function ft(){var e,t,n;return t=s,null!==(e=dt())&&(n=e,e=void(Bn.status_code=parseInt(n.join("")))),null===e&&(s=t),e}function dt(){var e,t,n,r;return r=s,null!==(e=h())&&null!==(t=h())&&null!==(n=h())?e=[e,t,n]:(e=null,s=r),e}function pt(){var e,n,r;for(r=s,e=[],null===(n=T())&&null===(n=b())&&null===(n=S())&&null===(n=I())&&null===(n=O())&&null===(n=v())&&(n=y());null!==n;)e.push(n),null===(n=T())&&null===(n=b())&&null===(n=S())&&null===(n=I())&&null===(n=O())&&null===(n=v())&&(n=y());return null!==e&&(e=function(e){Bn.reason_phrase=t.substring(s,e)}(r)),null===e&&(s=r),e}function _t(){var e,t,n,r,o,i,a;if(o=s,i=s,null===(e=X())&&(e=mt()),null!==e){for(t=[],a=s,null!==(n=F())&&null!==(r=yt())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=yt())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return null!==e&&(e=function(e){var t;Bn.multi_header||(Bn.multi_header=[]);try{t=new Hn(Bn.uri,Bn.display_name,Bn.params),delete Bn.uri,delete Bn.display_name,delete Bn.params}catch(e){t=null}Bn.multi_header.push({possition:s,offset:e,parsed:t})}(o)),null===e&&(s=o),e}function mt(){var e,t,n,r,o;return o=s,null!==(e=null!==(e=vt())?e:"")&&null!==(t=H())&&null!==(n=Q())&&null!==(r=j())?e=[e,t,n,r]:(e=null,s=o),e}function vt(){var e,t,n,r,o,i,a,u;if(o=s,i=s,null!==(e=N())){for(t=[],a=s,null!==(n=A())&&null!==(r=N())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=A())&&null!==(r=N())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return null===e&&(e=K()),null!==e&&(u=e,e=void(Bn.display_name="string"==typeof u?u:u[1].reduce(function(e,t){return e+t[0]+t[1]},u[0]))),null===e&&(s=o),e}function yt(){var e;return null===(e=gt())&&null===(e=Tt())&&(e=St()),e}function gt(){var e,n,r,o,a,u;return o=s,a=s,"q"===t.substr(s,1).toLowerCase()?(e=t.substr(s,1),s++):(e=null,0===i&&l('"q"')),null!==e&&null!==(n=M())&&null!==(r=Et())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],Bn.params||(Bn.params={}),e=void(Bn.params.q=u)),null===e&&(s=o),e}function Tt(){var e,n,r,o,a,u;return o=s,a=s,"expires"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"expires"')),null!==e&&null!==(n=M())&&null!==(r=bt())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],Bn.params||(Bn.params={}),e=void(Bn.params.expires=u)),null===e&&(s=o),e}function bt(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=parseInt(e.join(""))),null===e&&(s=n),e}function Et(){var e,n,r,o,a,u,c,f;return u=s,c=s,48===t.charCodeAt(s)?(e="0",s++):(e=null,0===i&&l('"0"')),null!==e?(f=s,46===t.charCodeAt(s)?(n=".",s++):(n=null,0===i&&l('"."')),null!==n&&null!==(r=null!==(r=h())?r:"")&&null!==(o=null!==(o=h())?o:"")&&null!==(a=null!==(a=h())?a:"")?n=[n,r,o,a]:(n=null,s=f),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=c)):(e=null,s=c),null!==e&&(e=function(e){return parseFloat(t.substring(s,e))}(u)),null===e&&(s=u),e}function St(){var e,t,n,r,o,i,a,u;return r=s,o=s,null!==(e=N())?(i=s,null!==(t=M())&&null!==(n=At())?t=[t,n]:(t=null,s=i),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=o)):(e=null,s=o),null!==e&&(a=e[0],u=e[1],Bn.params||(Bn.params={}),u=void 0===u?void 0:u[1],e=void(Bn.params[a.toLowerCase()]=u)),null===e&&(s=r),e}function At(){var e;return null===(e=N())&&null===(e=ae())&&(e=z()),e}function wt(){var e;return"render"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"render"')),null===e&&("session"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"session"')),null===e&&("icon"===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"icon"')),null===e&&("alert"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"alert"')),null===e&&(e=N())))),e}function Ct(){var e;return null===(e=Rt())&&(e=St()),e}function Rt(){var e,n,r,o;return o=s,"handling"===t.substr(s,8).toLowerCase()?(e=t.substr(s,8),s+=8):(e=null,0===i&&l('"handling"')),null!==e&&null!==(n=M())?("optional"===t.substr(s,8).toLowerCase()?(r=t.substr(s,8),s+=8):(r=null,0===i&&l('"optional"')),null===r&&("required"===t.substr(s,8).toLowerCase()?(r=t.substr(s,8),s+=8):(r=null,0===i&&l('"required"')),null===r&&(r=N())),null!==r?e=[e,n,r]:(e=null,s=o)):(e=null,s=o),e}function kt(){var e,t,n,r,o,i,a,u;if(a=s,null!==(e=It()))if(null!==(t=U()))if(null!==(n=Dt())){for(r=[],u=s,null!==(o=F())&&null!==(i=Ut())?o=[o,i]:(o=null,s=u);null!==o;)r.push(o),u=s,null!==(o=F())&&null!==(i=Ut())?o=[o,i]:(o=null,s=u);null!==r?e=[e,t,n,r]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;else e=null,s=a;return e}function It(){var e;return null===(e=Ot())&&(e=Nt()),e}function Ot(){var e;return"text"===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"text"')),null===e&&("image"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"image"')),null===e&&("audio"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"audio"')),null===e&&("video"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"video"')),null===e&&("application"===t.substr(s,11).toLowerCase()?(e=t.substr(s,11),s+=11):(e=null,0===i&&l('"application"')),null===e&&(e=xt()))))),e}function Nt(){var e;return"message"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"message"')),null===e&&("multipart"===t.substr(s,9).toLowerCase()?(e=t.substr(s,9),s+=9):(e=null,0===i&&l('"multipart"')),null===e&&(e=xt())),e}function xt(){var e;return null===(e=N())&&(e=Pt()),e}function Pt(){var e,n,r;return r=s,"x-"===t.substr(s,2).toLowerCase()?(e=t.substr(s,2),s+=2):(e=null,0===i&&l('"x-"')),null!==e&&null!==(n=N())?e=[e,n]:(e=null,s=r),e}function Dt(){var e;return null===(e=xt())&&(e=N()),e}function Ut(){var e,t,n,r;return r=s,null!==(e=N())&&null!==(t=M())&&null!==(n=Mt())?e=[e,t,n]:(e=null,s=r),e}function Mt(){var e;return null===(e=N())&&(e=z()),e}function Lt(){var e,t,n,r;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(r=e,e=void(Bn.value=parseInt(r.join("")))),null===e&&(s=n),e}function qt(){var e,n,r,o,a,u;if(a=s,null!==(e=x())){for(n=[],u=s,46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')),null!==r&&null!==(o=x())?r=[r,o]:(r=null,s=u);null!==r;)n.push(r),u=s,46===t.charCodeAt(s)?(r=".",s++):(r=null,0===i&&l('"."')),null!==r&&null!==(o=x())?r=[r,o]:(r=null,s=u);null!==n?e=[e,n]:(e=null,s=a)}else e=null,s=a;return e}function jt(){var e;return null===(e=Ht())&&(e=St()),e}function Ht(){var e,n,r,o,a,u;return o=s,a=s,"tag"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"tag"')),null!==e&&null!==(n=M())&&null!==(r=N())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.tag=u)),null===e&&(s=o),e}function Bt(){var e,n,r,o,a,u,c,h;if(c=s,"digest"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"Digest"')),null!==e)if(null!==(n=A()))if(null!==(r=Gt())){for(o=[],h=s,null!==(a=B())&&null!==(u=Gt())?a=[a,u]:(a=null,s=h);null!==a;)o.push(a),h=s,null!==(a=B())&&null!==(u=Gt())?a=[a,u]:(a=null,s=h);null!==o?e=[e,n,r,o]:(e=null,s=c)}else e=null,s=c;else e=null,s=c;else e=null,s=c;return null===e&&(e=Ft()),e}function Ft(){var e,t,n,r,o,i,a,u;if(a=s,null!==(e=N()))if(null!==(t=A()))if(null!==(n=Yt())){for(r=[],u=s,null!==(o=B())&&null!==(i=Yt())?o=[o,i]:(o=null,s=u);null!==o;)r.push(o),u=s,null!==(o=B())&&null!==(i=Yt())?o=[o,i]:(o=null,s=u);null!==r?e=[e,t,n,r]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;else e=null,s=a;return e}function Yt(){var e,t,n,r;return r=s,null!==(e=N())&&null!==(t=M())?(null===(n=N())&&(n=z()),null!==n?e=[e,t,n]:(e=null,s=r)):(e=null,s=r),e}function Gt(){var e;return null===(e=Wt())&&null===(e=zt())&&null===(e=Jt())&&null===(e=Xt())&&null===(e=Qt())&&null===(e=Zt())&&null===(e=en())&&(e=Yt()),e}function Wt(){var e,n,r,o;return o=s,"realm"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"realm"')),null!==e&&null!==(n=M())&&null!==(r=Vt())?e=[e,n,r]:(e=null,s=o),e}function Vt(){var e,t,n;return t=s,null!==(e=K())&&(n=e,e=void(Bn.realm=n)),null===e&&(s=t),e}function zt(){var e,n,r,o,a,u,c,h,f;if(h=s,"domain"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"domain"')),null!==e)if(null!==(n=M()))if(null!==(r=G()))if(null!==(o=Kt())){if(a=[],f=s,null!==(c=v()))for(u=[];null!==c;)u.push(c),c=v();else u=null;for(null!==u&&null!==(c=Kt())?u=[u,c]:(u=null,s=f);null!==u;){if(a.push(u),f=s,null!==(c=v()))for(u=[];null!==c;)u.push(c),c=v();else u=null;null!==u&&null!==(c=Kt())?u=[u,c]:(u=null,s=f)}null!==a&&null!==(u=W())?e=[e,n,r,o,a,u]:(e=null,s=h)}else e=null,s=h;else e=null,s=h;else e=null,s=h;else e=null,s=h;return e}function Kt(){var e;return null===(e=qe())&&(e=Be()),e}function Jt(){var e,n,r,o;return o=s,"nonce"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"nonce"')),null!==e&&null!==(n=M())&&null!==(r=$t())?e=[e,n,r]:(e=null,s=o),e}function $t(){var e,t,n;return t=s,null!==(e=K())&&(n=e,e=void(Bn.nonce=n)),null===e&&(s=t),e}function Xt(){var e,n,r,o,a,u;return o=s,a=s,"opaque"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"opaque"')),null!==e&&null!==(n=M())&&null!==(r=K())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.opaque=u)),null===e&&(s=o),e}function Qt(){var e,n,r,o,a;return o=s,"stale"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"stale"')),null!==e&&null!==(n=M())?(a=s,"true"===t.substr(s,4).toLowerCase()?(r=t.substr(s,4),s+=4):(r=null,0===i&&l('"true"')),null!==r&&(r=void(Bn.stale=!0)),null===r&&(s=a),null===r&&(a=s,"false"===t.substr(s,5).toLowerCase()?(r=t.substr(s,5),s+=5):(r=null,0===i&&l('"false"')),null!==r&&(r=void(Bn.stale=!1)),null===r&&(s=a)),null!==r?e=[e,n,r]:(e=null,s=o)):(e=null,s=o),e}function Zt(){var e,n,r,o,a,u;return o=s,a=s,"algorithm"===t.substr(s,9).toLowerCase()?(e=t.substr(s,9),s+=9):(e=null,0===i&&l('"algorithm"')),null!==e&&null!==(n=M())?("md5"===t.substr(s,3).toLowerCase()?(r=t.substr(s,3),s+=3):(r=null,0===i&&l('"MD5"')),null===r&&("md5-sess"===t.substr(s,8).toLowerCase()?(r=t.substr(s,8),s+=8):(r=null,0===i&&l('"MD5-sess"')),null===r&&(r=N())),null!==r?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.algorithm=u.toUpperCase())),null===e&&(s=o),e}function en(){var e,n,r,o,a,u,c,h,f,d;if(h=s,"qop"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"qop"')),null!==e)if(null!==(n=M()))if(null!==(r=G())){if(f=s,null!==(o=tn())){for(a=[],d=s,44===t.charCodeAt(s)?(u=",",s++):(u=null,0===i&&l('","')),null!==u&&null!==(c=tn())?u=[u,c]:(u=null,s=d);null!==u;)a.push(u),d=s,44===t.charCodeAt(s)?(u=",",s++):(u=null,0===i&&l('","')),null!==u&&null!==(c=tn())?u=[u,c]:(u=null,s=d);null!==a?o=[o,a]:(o=null,s=f)}else o=null,s=f;null!==o&&null!==(a=W())?e=[e,n,r,o,a]:(e=null,s=h)}else e=null,s=h;else e=null,s=h;else e=null,s=h;return e}function tn(){var e,n,r;return n=s,"auth-int"===t.substr(s,8).toLowerCase()?(e=t.substr(s,8),s+=8):(e=null,0===i&&l('"auth-int"')),null===e&&("auth"===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"auth"')),null===e&&(e=N())),null!==e&&(r=e,Bn.qop||(Bn.qop=[]),e=void Bn.qop.push(r.toLowerCase())),null===e&&(s=n),e}function nn(){var e,t,n,r,o,i,a;if(o=s,i=s,null!==(e=mt())){for(t=[],a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==n;)t.push(n),a=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=a);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return null!==e&&(e=function(e){var t;Bn.multi_header||(Bn.multi_header=[]);try{t=new Hn(Bn.uri,Bn.display_name,Bn.params),delete Bn.uri,delete Bn.display_name,delete Bn.params}catch(e){t=null}Bn.multi_header.push({possition:s,offset:e,parsed:t})}(o)),null===e&&(s=o),e}function rn(){var e;return null===(e=on())&&(e=St()),e}function on(){var e,n,r,o,a,u,c;if(a=s,u=s,"cause"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"cause"')),null!==e)if(null!==(n=M())){if(null!==(o=h()))for(r=[];null!==o;)r.push(o),o=h();else r=null;null!==r?e=[e,n,r]:(e=null,s=u)}else e=null,s=u;else e=null,s=u;return null!==e&&(c=e[2],e=void(Bn.cause=parseInt(c.join("")))),null===e&&(s=a),e}function sn(){var e,t,n,r,o,i;if(o=s,null!==(e=mt())){for(t=[],i=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=i);null!==n;)t.push(n),i=s,null!==(n=F())&&null!==(r=St())?n=[n,r]:(n=null,s=i);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return e}function an(){var e,n;return n=s,"active"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"active"')),null===e&&("pending"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"pending"')),null===e&&("terminated"===t.substr(s,10).toLowerCase()?(e=t.substr(s,10),s+=10):(e=null,0===i&&l('"terminated"')),null===e&&(e=N()))),null!==e&&(e=function(e){Bn.state=t.substring(s,e)}(n)),null===e&&(s=n),e}function un(){var e,n,r,o,a,u,c,h;return o=s,a=s,"reason"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"reason"')),null!==e&&null!==(n=M())&&null!==(r=ln())?e=[e,n,r]:(e=null,s=a),null!==e&&(e=void(void 0!==(u=e[2])&&(Bn.reason=u))),null===e&&(s=o),null===e&&(o=s,a=s,"expires"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"expires"')),null!==e&&null!==(n=M())&&null!==(r=bt())?e=[e,n,r]:(e=null,s=a),null!==e&&(e=void(void 0!==(h=e[2])&&(Bn.expires=h))),null===e&&(s=o),null===e&&(o=s,a=s,"retry_after"===t.substr(s,11).toLowerCase()?(e=t.substr(s,11),s+=11):(e=null,0===i&&l('"retry_after"')),null!==e&&null!==(n=M())&&null!==(r=bt())?e=[e,n,r]:(e=null,s=a),null!==e&&(e=void(void 0!==(c=e[2])&&(Bn.retry_after=c))),null===e&&(s=o),null===e&&(e=St()))),e}function ln(){var e;return"deactivated"===t.substr(s,11).toLowerCase()?(e=t.substr(s,11),s+=11):(e=null,0===i&&l('"deactivated"')),null===e&&("probation"===t.substr(s,9).toLowerCase()?(e=t.substr(s,9),s+=9):(e=null,0===i&&l('"probation"')),null===e&&("rejected"===t.substr(s,8).toLowerCase()?(e=t.substr(s,8),s+=8):(e=null,0===i&&l('"rejected"')),null===e&&("timeout"===t.substr(s,7).toLowerCase()?(e=t.substr(s,7),s+=7):(e=null,0===i&&l('"timeout"')),null===e&&("giveup"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"giveup"')),null===e&&("noresource"===t.substr(s,10).toLowerCase()?(e=t.substr(s,10),s+=10):(e=null,0===i&&l('"noresource"')),null===e&&("invariant"===t.substr(s,9).toLowerCase()?(e=t.substr(s,9),s+=9):(e=null,0===i&&l('"invariant"')),null===e&&(e=N()))))))),e}function cn(){var e;return null===(e=Ht())&&(e=St()),e}function hn(){var e,t,n,r,o,i,a,u;if(a=s,null!==(e=gn()))if(null!==(t=A()))if(null!==(n=En())){for(r=[],u=s,null!==(o=F())&&null!==(i=fn())?o=[o,i]:(o=null,s=u);null!==o;)r.push(o),u=s,null!==(o=F())&&null!==(i=fn())?o=[o,i]:(o=null,s=u);null!==r?e=[e,t,n,r]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;else e=null,s=a;return e}function fn(){var e;return null===(e=dn())&&null===(e=pn())&&null===(e=_n())&&null===(e=mn())&&null===(e=vn())&&(e=St()),e}function dn(){var e,n,r,o,a,u;return o=s,a=s,"ttl"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"ttl"')),null!==e&&null!==(n=M())&&null!==(r=wn())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.ttl=u)),null===e&&(s=o),e}function pn(){var e,n,r,o,a,u;return o=s,a=s,"maddr"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"maddr"')),null!==e&&null!==(n=M())&&null!==(r=ae())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.maddr=u)),null===e&&(s=o),e}function _n(){var e,n,r,o,a,u;return o=s,a=s,"received"===t.substr(s,8).toLowerCase()?(e=t.substr(s,8),s+=8):(e=null,0===i&&l('"received"')),null!==e&&null!==(n=M())?(null===(r=_e())&&(r=fe()),null!==r?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.received=u)),null===e&&(s=o),e}function mn(){var e,n,r,o,a,u;return o=s,a=s,"branch"===t.substr(s,6).toLowerCase()?(e=t.substr(s,6),s+=6):(e=null,0===i&&l('"branch"')),null!==e&&null!==(n=M())&&null!==(r=N())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.branch=u)),null===e&&(s=o),e}function vn(){var e,n,r,o,a;return o=s,"rport"===t.substr(s,5).toLowerCase()?(e=t.substr(s,5),s+=5):(e=null,0===i&&l('"rport"')),null!==e?(a=s,null!==(n=M())&&null!==(r=yn())?n=[n,r]:(n=null,s=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=o)):(e=null,s=o),e}function yn(){var e,t,n,r,o,i,a,u;return i=s,a=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(o=null!==(o=h())?o:"")?e=[e,t,n,r,o]:(e=null,s=a),null!==e&&(u=e,e=void(Bn.rport=parseInt(u.join("")))),null===e&&(s=i),e}function gn(){var e,t,n,r,o,i;return i=s,null!==(e=Tn())&&null!==(t=U())&&null!==(n=N())&&null!==(r=U())&&null!==(o=bn())?e=[e,t,n,r,o]:(e=null,s=i),e}function Tn(){var e,n,r;return n=s,"sip"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"SIP"')),null===e&&(e=N()),null!==e&&(r=e,e=void(Bn.protocol=r)),null===e&&(s=n),e}function bn(){var e,n,r;return n=s,"udp"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"UDP"')),null===e&&("tcp"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"TCP"')),null===e&&("tls"===t.substr(s,3).toLowerCase()?(e=t.substr(s,3),s+=3):(e=null,0===i&&l('"TLS"')),null===e&&("sctp"===t.substr(s,4).toLowerCase()?(e=t.substr(s,4),s+=4):(e=null,0===i&&l('"SCTP"')),null===e&&(e=N())))),null!==e&&(r=e,e=void(Bn.transport=r)),null===e&&(s=n),e}function En(){var e,t,n,r,o;return r=s,null!==(e=Sn())?(o=s,null!==(t=Y())&&null!==(n=An())?t=[t,n]:(t=null,s=o),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=r)):(e=null,s=r),e}function Sn(){var e,n;return n=s,null===(e=_e())&&null===(e=he())&&(e=ue()),null!==e&&(e=function(e){Bn.host=t.substring(s,e)}(n)),null===e&&(s=n),e}function An(){var e,t,n,r,o,i,a,u;return i=s,a=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(o=null!==(o=h())?o:"")?e=[e,t,n,r,o]:(e=null,s=a),null!==e&&(u=e,e=void(Bn.port=parseInt(u.join("")))),null===e&&(s=i),e}function wn(){var e,t,n,r,o;return r=s,o=s,null!==(e=h())&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")?e=[e,t,n]:(e=null,s=o),null!==e&&(e=parseInt(e.join(""))),null===e&&(s=r),e}function Cn(){var e,t,n;return t=s,null!==(e=bt())&&(n=e,e=void(Bn.expires=n)),null===e&&(s=t),e}function Rn(){var e;return null===(e=kn())&&(e=St()),e}function kn(){var e,n,r,o,a,u;return o=s,a=s,"refresher"===t.substr(s,9).toLowerCase()?(e=t.substr(s,9),s+=9):(e=null,0===i&&l('"refresher"')),null!==e&&null!==(n=M())?("uac"===t.substr(s,3).toLowerCase()?(r=t.substr(s,3),s+=3):(r=null,0===i&&l('"uac"')),null===r&&("uas"===t.substr(s,3).toLowerCase()?(r=t.substr(s,3),s+=3):(r=null,0===i&&l('"uas"'))),null!==r?e=[e,n,r]:(e=null,s=a)):(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.refresher=u.toLowerCase())),null===e&&(s=o),e}function In(){var e,t;for(e=[],null===(t=k())&&null===(t=O())&&(t=A());null!==t;)e.push(t),null===(t=k())&&null===(t=O())&&(t=A());return e}function On(){var e,n,r,o,a,u,c,h,f,d,p;return d=s,p=s,null!==(e=xn())?(45===t.charCodeAt(s)?(n="-",s++):(n=null,0===i&&l('"-"')),null!==n&&null!==(r=Nn())?(45===t.charCodeAt(s)?(o="-",s++):(o=null,0===i&&l('"-"')),null!==o&&null!==(a=Nn())?(45===t.charCodeAt(s)?(u="-",s++):(u=null,0===i&&l('"-"')),null!==u&&null!==(c=Nn())?(45===t.charCodeAt(s)?(h="-",s++):(h=null,0===i&&l('"-"')),null!==h&&null!==(f=Pn())?e=[e,n,r,o,a,u,c,h,f]:(e=null,s=p)):(e=null,s=p)):(e=null,s=p)):(e=null,s=p)):(e=null,s=p),null!==e&&(e=function(e,n){Bn=t.substring(s+5,e)}(d,e[0])),null===e&&(s=d),e}function Nn(){var e,t,n,r,o;return o=s,null!==(e=d())&&null!==(t=d())&&null!==(n=d())&&null!==(r=d())?e=[e,t,n,r]:(e=null,s=o),e}function xn(){var e,t,n;return n=s,null!==(e=Nn())&&null!==(t=Nn())?e=[e,t]:(e=null,s=n),e}function Pn(){var e,t,n,r;return r=s,null!==(e=Nn())&&null!==(t=Nn())&&null!==(n=Nn())?e=[e,t,n]:(e=null,s=r),e}function Dn(){var e,n,r,o,a,u;return o=s,a=s,null!==(e=P())?(u=s,64===t.charCodeAt(s)?(n="@",s++):(n=null,0===i&&l('"@"')),null!==n&&null!==(r=P())?n=[n,r]:(n=null,s=u),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=function(e){Bn.call_id=t.substring(s,e)}(o)),null===e&&(s=o),e}function Un(){var e;return null===(e=Mn())&&null===(e=Ln())&&null===(e=qn())&&(e=St()),e}function Mn(){var e,n,r,o,a,u;return o=s,a=s,"to-tag"===t.substr(s,6)?(e="to-tag",s+=6):(e=null,0===i&&l('"to-tag"')),null!==e&&null!==(n=M())&&null!==(r=N())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.to_tag=u)),null===e&&(s=o),e}function Ln(){var e,n,r,o,a,u;return o=s,a=s,"from-tag"===t.substr(s,8)?(e="from-tag",s+=8):(e=null,0===i&&l('"from-tag"')),null!==e&&null!==(n=M())&&null!==(r=N())?e=[e,n,r]:(e=null,s=a),null!==e&&(u=e[2],e=void(Bn.from_tag=u)),null===e&&(s=o),e}function qn(){var e,n;return n=s,"early-only"===t.substr(s,10)?(e="early-only",s+=10):(e=null,0===i&&l('"early-only"')),null!==e&&(e=void(Bn.early_only=!0)),null===e&&(s=n),e}var jn=n(8),Hn=n(18),Bn={};if(null===o[r]()||s!==t.length){var Fn=Math.max(s,a),Yn=Fn<t.length?t.charAt(Fn):null,Gn=function(){for(var e=1,n=1,r=!1,o=0;o<Math.max(s,a);o++){var i=t.charAt(o);"\n"===i?(r||e++,n=1,r=!1):"\r"===i||"\u2028"===i||"\u2029"===i?(e++,n=1,r=!0):(n++,r=!1)}return{line:e,column:n}}();return new this.SyntaxError(function(e){e.sort();for(var t=null,n=[],r=0;r<e.length;r++)e[r]!==t&&(n.push(e[r]),t=e[r]);return n}(u),Yn,Fn,Gn.line,Gn.column),-1}return Bn},toSource:function(){return this._source},SyntaxError:function(t,n,r,o,s){this.name="SyntaxError",this.expected=t,this.found=n,this.message=function(t,n){var r;switch(t.length){case 0:r="end of input";break;case 1:r=t[0];break;default:r=t.slice(0,t.length-1).join(", ")+" or "+t[t.length-1]}return"Expected "+r+" but "+(n?e(n):"end of input")+" found."}(t,n),this.offset=r,this.line=o,this.column=s}};return t.SyntaxError.prototype=Error.prototype,t}()},function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,s=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,s,i,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),i=s[t]),void 0===i)i=s[t]=n,++e._eventsCount;else if("function"==typeof i?i=s[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),(o=l(e))>0&&i.length>o&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,a=u,console&&console.warn&&console.warn(a)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=h.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):_(o,o.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function _(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var a=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw a.context=i,a}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)s(u,this,t);else{var l=u.length,c=_(u,l);for(n=0;n<l;++n)s(c[n],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,f(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,f(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,s,i;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){i=n[s].listener,o=s;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(o=s[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},a.prototype.listenerCount=p,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,i=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){a=!0,s=e},f:function(){try{i||null==n.return||n.return()}finally{if(a)throw s}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}var p=n(41),_=n(1),m=n(2),v=n(18),y=n(4),g=n(0)("JsSIP:SIPMessage"),T=function(){function e(t,n,r,o,s,i){if(h(this,e),!t||!n||!r)return null;o=o||{},this.ua=r,this.headers={},this.method=t,this.ruri=n,this.body=i,this.extraHeaders=m.cloneArray(s),o.route_set?this.setHeader("route",o.route_set):r.configuration.use_preloaded_route&&this.setHeader("route","<".concat(r.transport.sip_uri,";lr>")),this.setHeader("via",""),this.setHeader("max-forwards",_.MAX_FORWARDS);var a=o.to_uri||n,u=o.to_tag?{tag:o.to_tag}:null,l=void 0!==o.to_display_name?o.to_display_name:null;this.to=new v(a,l,u),this.setHeader("to",this.to.toString());var c,f=o.from_uri||r.configuration.uri,d={tag:o.from_tag||m.newTag()};c=void 0!==o.from_display_name?o.from_display_name:r.configuration.display_name?r.configuration.display_name:null,this.from=new v(f,c,d),this.setHeader("from",this.from.toString());var p=o.call_id||r.configuration.jssip_id+m.createRandomToken(15);this.call_id=p,this.setHeader("call-id",p);var y=o.cseq||Math.floor(1e4*Math.random());this.cseq=y,this.setHeader("cseq","".concat(y," ").concat(t))}return d(e,[{key:"setHeader",value:function(e,t){for(var n=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),r=0;r<this.extraHeaders.length;r++)n.test(this.extraHeaders[r])&&this.extraHeaders.splice(r,1);this.headers[m.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){var t=this.headers[m.headerize(e)];if(t){if(t[0])return t[0]}else{var n,r=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),o=l(this.extraHeaders);try{for(o.s();!(n=o.n()).done;){var s=n.value;if(r.test(s))return s.substring(s.indexOf(":")+1).trim()}}catch(e){o.e(e)}finally{o.f()}}}},{key:"getHeaders",value:function(e){var t=this.headers[m.headerize(e)],n=[];if(t){var r,o=l(t);try{for(o.s();!(r=o.n()).done;){var s=r.value;n.push(s)}}catch(e){o.e(e)}finally{o.f()}return n}var i,a=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),u=l(this.extraHeaders);try{for(u.s();!(i=u.n()).done;){var c=i.value;a.test(c)&&n.push(c.substring(c.indexOf(":")+1).trim())}}catch(e){u.e(e)}finally{u.f()}return n}},{key:"hasHeader",value:function(e){if(this.headers[m.headerize(e)])return!0;var t,n=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),r=l(this.extraHeaders);try{for(r.s();!(t=r.n()).done;){var o=t.value;if(n.test(o))return!0}}catch(e){r.e(e)}finally{r.f()}return!1}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=p.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){var e="".concat(this.method," ").concat(this.ruri," SIP/2.0\r\n");for(var t in this.headers)if(Object.prototype.hasOwnProperty.call(this.headers,t)){var n,r=l(this.headers[t]);try{for(r.s();!(n=r.n()).done;){var o=n.value;e+="".concat(t,": ").concat(o,"\r\n")}}catch(e){r.e(e)}finally{r.f()}}var s,i=l(this.extraHeaders);try{for(i.s();!(s=i.n()).done;){var a=s.value;e+="".concat(a.trim(),"\r\n")}}catch(e){i.e(e)}finally{i.f()}var u=[];switch(this.method){case _.REGISTER:u.push("path","gruu");break;case _.INVITE:this.ua.configuration.session_timers&&u.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&u.push("gruu"),u.push("ice","replaces");break;case _.UPDATE:this.ua.configuration.session_timers&&u.push("timer"),u.push("ice")}u.push("outbound");var c=this.ua.configuration.user_agent||_.USER_AGENT;if(e+="Allow: ".concat(_.ALLOWED_METHODS,"\r\n"),e+="Supported: ".concat(u,"\r\n"),e+="User-Agent: ".concat(c,"\r\n"),this.body){var h=m.str_utf8_length(this.body);e+="Content-Length: ".concat(h,"\r\n\r\n"),e+=this.body}else e+="Content-Length: 0\r\n\r\n";return e}},{key:"clone",value:function(){var t=new e(this.method,this.ruri,this.ua);return Object.keys(this.headers).forEach(function(e){t.headers[e]=this.headers[e].slice()},this),t.body=this.body,t.extraHeaders=m.cloneArray(this.extraHeaders),t.to=this.to,t.from=this.from,t.call_id=this.call_id,t.cseq=this.cseq,t}}]),e}(),b=function(e){o(n,T);var t=i(n);function n(e,r,o,s,i){var a;return h(this,n),(a=t.call(this,_.INVITE,e,r,o,s,i)).transaction=null,a}return d(n,[{key:"cancel",value:function(e){this.transaction.cancel(e)}},{key:"clone",value:function(){var e=new n(this.ruri,this.ua);return Object.keys(this.headers).forEach(function(t){e.headers[t]=this.headers[t].slice()},this),e.body=this.body,e.extraHeaders=m.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e.transaction=this.transaction,e}}]),n}(),E=function(){function e(){h(this,e),this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null,this.sdp=null}return d(e,[{key:"addHeader",value:function(e,t){var n={raw:t};e=m.headerize(e),this.headers[e]?this.headers[e].push(n):this.headers[e]=[n]}},{key:"getHeader",value:function(e){var t=this.headers[m.headerize(e)];if(t)return t[0]?t[0].raw:void 0}},{key:"getHeaders",value:function(e){var t=this.headers[m.headerize(e)],n=[];if(!t)return[];var r,o=l(t);try{for(o.s();!(r=o.n()).done;){var s=r.value;n.push(s.raw)}}catch(e){o.e(e)}finally{o.f()}return n}},{key:"hasHeader",value:function(e){return!!this.headers[m.headerize(e)]}},{key:"parseHeader",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(e=m.headerize(e),this.headers[e]){if(!(t>=this.headers[e].length)){var n=this.headers[e][t],r=n.raw;if(n.parsed)return n.parsed;var o=y.parse(r,e.replace(/-/g,"_"));return-1===o?(this.headers[e].splice(t,1),void g('error parsing "'.concat(e,'" header field with value "').concat(r,'"'))):(n.parsed=o,o)}g('not so many "'.concat(e,'" headers present'))}else g('header "'.concat(e,'" not present'))}},{key:"s",value:function(e,t){return this.parseHeader(e,t)}},{key:"setHeader",value:function(e,t){var n={raw:t};this.headers[m.headerize(e)]=[n]}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=p.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){return this.data}}]),e}(),S=function(e){o(n,E);var t=i(n);function n(e){var r;return h(this,n),(r=t.call(this)).ua=e,r.headers={},r.ruri=null,r.transport=null,r.server_transaction=null,r}return d(n,[{key:"reply",value:function(e,t,n,r,o,s){var i=[],a=this.getHeader("To");if(t=t||null,!(e=e||null)||e<100||e>699)throw new TypeError("Invalid status_code: ".concat(e));if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: ".concat(t));t=t||_.REASON_PHRASE[e]||"",n=m.cloneArray(n);var u="SIP/2.0 ".concat(e," ").concat(t,"\r\n");if(this.method===_.INVITE&&e>100&&e<=200){var c,h=l(this.getHeaders("record-route"));try{for(h.s();!(c=h.n()).done;){var f=c.value;u+="Record-Route: ".concat(f,"\r\n")}}catch(e){h.e(e)}finally{h.f()}}var d,p=l(this.getHeaders("via"));try{for(p.s();!(d=p.n()).done;){var v=d.value;u+="Via: ".concat(v,"\r\n")}}catch(e){p.e(e)}finally{p.f()}!this.to_tag&&e>100?a+=";tag=".concat(m.newTag()):this.to_tag&&!this.s("to").hasParam("tag")&&(a+=";tag=".concat(this.to_tag)),u+="To: ".concat(a,"\r\n"),u+="From: ".concat(this.getHeader("From"),"\r\n"),u+="Call-ID: ".concat(this.call_id,"\r\n"),u+="CSeq: ".concat(this.cseq," ").concat(this.method,"\r\n");var y,g=l(n);try{for(g.s();!(y=g.n()).done;){var T=y.value;u+="".concat(T.trim(),"\r\n")}}catch(e){g.e(e)}finally{g.f()}switch(this.method){case _.INVITE:this.ua.configuration.session_timers&&i.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&i.push("gruu"),i.push("ice","replaces");break;case _.UPDATE:this.ua.configuration.session_timers&&i.push("timer"),r&&i.push("ice"),i.push("replaces")}if(i.push("outbound"),this.method===_.OPTIONS?(u+="Allow: ".concat(_.ALLOWED_METHODS,"\r\n"),u+="Accept: ".concat(_.ACCEPTED_BODY_TYPES,"\r\n")):405===e?u+="Allow: ".concat(_.ALLOWED_METHODS,"\r\n"):415===e&&(u+="Accept: ".concat(_.ACCEPTED_BODY_TYPES,"\r\n")),u+="Supported: ".concat(i,"\r\n"),r){var b=m.str_utf8_length(r);u+="Content-Type: application/sdp\r\n",u+="Content-Length: ".concat(b,"\r\n\r\n"),u+=r}else u+="Content-Length: ".concat(0,"\r\n\r\n");this.server_transaction.receiveResponse(e,u,o,s)}},{key:"reply_sl",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.getHeaders("via");if(!e||e<100||e>699)throw new TypeError("Invalid status_code: ".concat(e));if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: ".concat(t));t=t||_.REASON_PHRASE[e]||"";var r,o="SIP/2.0 ".concat(e," ").concat(t,"\r\n"),s=l(n);try{for(s.s();!(r=s.n()).done;){var i=r.value;o+="Via: ".concat(i,"\r\n")}}catch(e){s.e(e)}finally{s.f()}var a=this.getHeader("To");!this.to_tag&&e>100?a+=";tag=".concat(m.newTag()):this.to_tag&&!this.s("to").hasParam("tag")&&(a+=";tag=".concat(this.to_tag)),o+="To: ".concat(a,"\r\n"),o+="From: ".concat(this.getHeader("From"),"\r\n"),o+="Call-ID: ".concat(this.call_id,"\r\n"),o+="CSeq: ".concat(this.cseq," ").concat(this.method,"\r\n"),o+="Content-Length: ".concat(0,"\r\n\r\n"),this.transport.send(o)}}]),n}(),A=function(e){o(n,E);var t=i(n);function n(){var e;return h(this,n),(e=t.call(this)).headers={},e.status_code=null,e.reason_phrase=null,e}return n}();e.exports={OutgoingRequest:T,InitialOutgoingInviteRequest:b,IncomingRequest:S,IncomingResponse:A}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}function i(e){var t=c();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){var t="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,f(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),h(r,e)})(e)}function l(e,t,n){return(l=c()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&h(o,n.prototype),o}).apply(null,arguments)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){s(n,u(Error));var t=i(n);function n(e,r){var s;return o(this,n),(s=t.call(this)).code=1,s.name="CONFIGURATION_ERROR",s.parameter=e,s.value=r,s.message=s.value?"Invalid value ".concat(JSON.stringify(s.value),' for parameter "').concat(s.parameter,'"'):"Missing parameter: ".concat(s.parameter),s}return n}(),p=function(e){s(n,u(Error));var t=i(n);function n(e){var r;return o(this,n),(r=t.call(this)).code=2,r.name="INVALID_STATE_ERROR",r.status=e,r.message="Invalid status: ".concat(e),r}return n}(),_=function(e){s(n,u(Error));var t=i(n);function n(e){var r;return o(this,n),(r=t.call(this)).code=3,r.name="NOT_SUPPORTED_ERROR",r.message=e,r}return n}(),m=function(e){s(n,u(Error));var t=i(n);function n(e){var r;return o(this,n),(r=t.call(this)).code=4,r.name="NOT_READY_ERROR",r.message=e,r}return n}();e.exports={ConfigurationError:d,InvalidStateError:p,NotSupportedError:_,NotReadyError:m}},function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(1),a=n(2),u=n(4);e.exports=function(){function e(t,n,r,o){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!r)throw new TypeError('missing or invalid "host" parameter');for(var u in this._parameters={},this._headers={},this._scheme=t||i.SIP,this._user=n,this._host=r,this._port=o,s)Object.prototype.hasOwnProperty.call(s,u)&&this.setParam(u,s[u]);for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&this.setHeader(l,a[l])}var t,n,o;return t=e,o=[{key:"parse",value:function(e){return-1!==(e=u.parse(e,"SIP_URI"))?e:void 0}}],(n=[{key:"scheme",get:function(){return this._scheme},set:function(e){this._scheme=e.toLowerCase()}},{key:"user",get:function(){return this._user},set:function(e){this._user=e}},{key:"host",get:function(){return this._host},set:function(e){this._host=e.toLowerCase()}},{key:"port",get:function(){return this._port},set:function(e){this._port=0===e?e:parseInt(e,10)||null}},{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"setHeader",value:function(e,t){this._headers[a.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){if(e)return this._headers[a.headerize(e)]}},{key:"hasHeader",value:function(e){if(e)return!!this._headers.hasOwnProperty(a.headerize(e))}},{key:"deleteHeader",value:function(e){if(e=a.headerize(e),this._headers.hasOwnProperty(e)){var t=this._headers[e];return delete this._headers[e],t}}},{key:"clearHeaders",value:function(){this._headers={}}},{key:"clone",value:function(){return new e(this._scheme,this._user,this._host,this._port,JSON.parse(JSON.stringify(this._parameters)),JSON.parse(JSON.stringify(this._headers)))}},{key:"toString",value:function(){var e=[],t="".concat(this._scheme,":");for(var n in this._user&&(t+="".concat(a.escapeUser(this._user),"@")),t+=this._host,(this._port||0===this._port)&&(t+=":".concat(this._port)),this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,n)&&(t+=";".concat(n),null!==this._parameters[n]&&(t+="=".concat(this._parameters[n])));for(var o in this._headers)if(Object.prototype.hasOwnProperty.call(this._headers,o)){var s,i=r(this._headers[o]);try{for(i.s();!(s=i.n()).done;){var u=s.value;e.push("".concat(o,"=").concat(u))}}catch(e){i.e(e)}finally{i.f()}}return e.length>0&&(t+="?".concat(e.join("&"))),t}},{key:"toAor",value:function(e){var t="".concat(this._scheme,":");return this._user&&(t+="".concat(a.escapeUser(this._user),"@")),t+=this._host,e&&(this._port||0===this._port)&&(t+=":".concat(this._port)),t}}])&&s(t.prototype,n),o&&s(t,o),e}()},function(e,t,n){const r=n(75),o=n(76),s=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:(e,t)=>{const n=e.length,o=new Array(n);let i=0;e.forEach((e,a)=>{r(e,!1,e=>{o[a]=e,++i===n&&t(o.join(s))})})},decodePacket:o,decodePayload:(e,t)=>{const n=e.split(s),r=[];for(let e=0;e<n.length;e++){const s=o(n[e],t);if(r.push(s),"error"===s.type)break}return r}}},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?h(e):t}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=n(5).EventEmitter,p=n(1),_=n(6),m=n(43),v=n(0)("JsSIP:NonInviteClientTransaction"),y=n(0)("JsSIP:InviteClientTransaction"),g=n(0)("JsSIP:AckClientTransaction"),T=n(0)("JsSIP:NonInviteServerTransaction"),b=n(0)("JsSIP:InviteServerTransaction"),E={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"},S=function(e){a(n,d);var t=l(n);function n(e,r,s,i){var a;o(this,n),(a=t.call(this)).type=E.NON_INVITE_CLIENT,a.id="z9hG4bK".concat(Math.floor(1e7*Math.random())),a.ua=e,a.transport=r,a.request=s,a.eventHandlers=i;var u="SIP/2.0/".concat(r.via_transport);return u+=" ".concat(e.configuration.via_host,";branch=").concat(a.id),a.request.setHeader("via",u),a.ua.newTransaction(h(a)),a}return i(n,[{key:"C",get:function(){return E}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(E.STATUS_TRYING),this.F=setTimeout(function(){e.timer_F()},m.TIMER_F),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){v("transport error occurred, deleting transaction ".concat(this.id)),clearTimeout(this.F),clearTimeout(this.K),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onTransportError()}},{key:"timer_F",value:function(){v("Timer F expired for transaction ".concat(this.id)),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout()}},{key:"timer_K",value:function(){this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"receiveResponse",value:function(e){var t=this,n=e.status_code;if(n<200)switch(this.state){case E.STATUS_TRYING:case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e)}else switch(this.state){case E.STATUS_TRYING:case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_COMPLETED),clearTimeout(this.F),408===n?this.eventHandlers.onRequestTimeout():this.eventHandlers.onReceiveResponse(e),this.K=setTimeout(function(){t.timer_K()},m.TIMER_K);break;case E.STATUS_COMPLETED:}}}]),n}(),A=function(e){a(n,d);var t=l(n);function n(e,r,s,i){var a;o(this,n),(a=t.call(this)).type=E.INVITE_CLIENT,a.id="z9hG4bK".concat(Math.floor(1e7*Math.random())),a.ua=e,a.transport=r,a.request=s,a.eventHandlers=i,s.transaction=h(a);var u="SIP/2.0/".concat(r.via_transport);return u+=" ".concat(e.configuration.via_host,";branch=").concat(a.id),a.request.setHeader("via",u),a.ua.newTransaction(h(a)),a}return i(n,[{key:"C",get:function(){return E}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(E.STATUS_CALLING),this.B=setTimeout(function(){e.timer_B()},m.TIMER_B),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){clearTimeout(this.B),clearTimeout(this.D),clearTimeout(this.M),this.state!==E.STATUS_ACCEPTED&&(y("transport error occurred, deleting transaction ".concat(this.id)),this.eventHandlers.onTransportError()),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_M",value:function(){y("Timer M expired for transaction ".concat(this.id)),this.state===E.STATUS_ACCEPTED&&(clearTimeout(this.B),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"timer_B",value:function(){y("Timer B expired for transaction ".concat(this.id)),this.state===E.STATUS_CALLING&&(this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout())}},{key:"timer_D",value:function(){y("Timer D expired for transaction ".concat(this.id)),clearTimeout(this.B),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"sendACK",value:function(e){var t=this,n=new _.OutgoingRequest(p.ACK,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});n.setHeader("from",this.request.getHeader("from")),n.setHeader("via",this.request.getHeader("via")),n.setHeader("to",e.getHeader("to")),this.D=setTimeout(function(){t.timer_D()},m.TIMER_D),this.transport.send(n)}},{key:"cancel",value:function(e){if(this.state===E.STATUS_PROCEEDING){var t=new _.OutgoingRequest(p.CANCEL,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",this.request.getHeader("to")),e&&t.setHeader("reason",e),this.transport.send(t)}}},{key:"receiveResponse",value:function(e){var t=this,n=e.status_code;if(n>=100&&n<=199)switch(this.state){case E.STATUS_CALLING:this.stateChanged(E.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e);break;case E.STATUS_PROCEEDING:this.eventHandlers.onReceiveResponse(e)}else if(n>=200&&n<=299)switch(this.state){case E.STATUS_CALLING:case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_ACCEPTED),this.M=setTimeout(function(){t.timer_M()},m.TIMER_M),this.eventHandlers.onReceiveResponse(e);break;case E.STATUS_ACCEPTED:this.eventHandlers.onReceiveResponse(e)}else if(n>=300&&n<=699)switch(this.state){case E.STATUS_CALLING:case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_COMPLETED),this.sendACK(e),this.eventHandlers.onReceiveResponse(e);break;case E.STATUS_COMPLETED:this.sendACK(e)}}}]),n}(),w=function(e){a(n,d);var t=l(n);function n(e,r,s,i){var a;o(this,n),(a=t.call(this)).id="z9hG4bK".concat(Math.floor(1e7*Math.random())),a.transport=r,a.request=s,a.eventHandlers=i;var u="SIP/2.0/".concat(r.via_transport);return u+=" ".concat(e.configuration.via_host,";branch=").concat(a.id),a.request.setHeader("via",u),a}return i(n,[{key:"C",get:function(){return E}},{key:"send",value:function(){this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){g("transport error occurred for transaction ".concat(this.id)),this.eventHandlers.onTransportError()}}]),n}(),C=function(e){a(n,d);var t=l(n);function n(e,r,s){var i;return o(this,n),(i=t.call(this)).type=E.NON_INVITE_SERVER,i.id=s.via_branch,i.ua=e,i.transport=r,i.request=s,i.last_response="",s.server_transaction=h(i),i.state=E.STATUS_TRYING,e.newTransaction(h(i)),i}return i(n,[{key:"C",get:function(){return E}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_J",value:function(){T("Timer J expired for transaction ".concat(this.id)),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,T("transport error occurred, deleting transaction ".concat(this.id)),clearTimeout(this.J),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"receiveResponse",value:function(e,t,n,r){var o=this;if(100===e)switch(this.state){case E.STATUS_TRYING:this.stateChanged(E.STATUS_PROCEEDING),this.transport.send(t)||this.onTransportError();break;case E.STATUS_PROCEEDING:this.last_response=t,this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=200&&e<=699)switch(this.state){case E.STATUS_TRYING:case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_COMPLETED),this.last_response=t,this.J=setTimeout(function(){o.timer_J()},m.TIMER_J),this.transport.send(t)?n&&n():(this.onTransportError(),r&&r());break;case E.STATUS_COMPLETED:}}}]),n}(),R=function(e){a(n,d);var t=l(n);function n(e,r,s){var i;return o(this,n),(i=t.call(this)).type=E.INVITE_SERVER,i.id=s.via_branch,i.ua=e,i.transport=r,i.request=s,i.last_response="",s.server_transaction=h(i),i.state=E.STATUS_PROCEEDING,e.newTransaction(h(i)),i.resendProvisionalTimer=null,s.reply(100),i}return i(n,[{key:"C",get:function(){return E}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_H",value:function(){b("Timer H expired for transaction ".concat(this.id)),this.state===E.STATUS_COMPLETED&&b("ACK not received, dialog will be terminated"),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_I",value:function(){this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_L",value:function(){b("Timer L expired for transaction ".concat(this.id)),this.state===E.STATUS_ACCEPTED&&(this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,b("transport error occurred, deleting transaction ".concat(this.id)),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),clearTimeout(this.L),clearTimeout(this.H),clearTimeout(this.I),this.stateChanged(E.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"resend_provisional",value:function(){this.transport.send(this.last_response)||this.onTransportError()}},{key:"receiveResponse",value:function(e,t,n,r){var o=this;if(e>=100&&e<=199)switch(this.state){case E.STATUS_PROCEEDING:this.transport.send(t)||this.onTransportError(),this.last_response=t}if(e>100&&e<=199&&this.state===E.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=setInterval(function(){o.resend_provisional()},m.PROVISIONAL_RESPONSE_INTERVAL));else if(e>=200&&e<=299)switch(this.state){case E.STATUS_PROCEEDING:this.stateChanged(E.STATUS_ACCEPTED),this.last_response=t,this.L=setTimeout(function(){o.timer_L()},m.TIMER_L),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case E.STATUS_ACCEPTED:this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=300&&e<=699)switch(this.state){case E.STATUS_PROCEEDING:null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(t)?(this.stateChanged(E.STATUS_COMPLETED),this.H=setTimeout(function(){o.timer_H()},m.TIMER_H),n&&n()):(this.onTransportError(),r&&r())}}}]),n}();e.exports={C:E,NonInviteClientTransaction:S,InviteClientTransaction:A,AckClientTransaction:w,NonInviteServerTransaction:C,InviteServerTransaction:R,checkTransaction:function(e,t){var n,r=e._transactions;switch(t.method){case p.INVITE:if(n=r.ist[t.via_branch]){switch(n.state){case E.STATUS_PROCEEDING:n.transport.send(n.last_response);break;case E.STATUS_ACCEPTED:}return!0}break;case p.ACK:if(!(n=r.ist[t.via_branch]))return!1;if(n.state===E.STATUS_ACCEPTED)return!1;if(n.state===E.STATUS_COMPLETED)return n.state=E.STATUS_CONFIRMED,n.I=setTimeout(function(){n.timer_I()},m.TIMER_I),!0;break;case p.CANCEL:return(n=r.ist[t.via_branch])?(t.reply_sl(200),n.state!==E.STATUS_PROCEEDING):(t.reply_sl(481),!0);default:if(n=r.nist[t.via_branch]){switch(n.state){case E.STATUS_TRYING:break;case E.STATUS_PROCEEDING:case E.STATUS_COMPLETED:n.transport.send(n.last_response)}return!0}}}}},function(e,t){e.exports=(()=>"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())()},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(1),s=n(97),i=n(11),a=n(0)("JsSIP:RequestSender"),u={onRequestTimeout:function(){},onTransportError:function(){},onReceiveResponse:function(){},onAuthenticated:function(){}};e.exports=function(){function e(t,n,r){for(var s in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ua=t,this._eventHandlers=r,this._method=n.method,this._request=n,this._auth=null,this._challenged=!1,this._staled=!1,u)Object.prototype.hasOwnProperty.call(u,s)&&(this._eventHandlers[s]||(this._eventHandlers[s]=u[s]));t.status!==t.C.STATUS_USER_CLOSED||this._method===o.BYE&&this._method===o.ACK||this._eventHandlers.onTransportError()}var t,n,l;return t=e,(n=[{key:"send",value:function(){var e=this,t={onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onReceiveResponse:function(t){e._receiveResponse(t)}};switch(this._method){case"INVITE":this.clientTransaction=new i.InviteClientTransaction(this._ua,this._ua.transport,this._request,t);break;case"ACK":this.clientTransaction=new i.AckClientTransaction(this._ua,this._ua.transport,this._request,t);break;default:this.clientTransaction=new i.NonInviteClientTransaction(this._ua,this._ua.transport,this._request,t)}this._ua._configuration.authorization_jwt&&this._request.setHeader("Authorization",this._ua._configuration.authorization_jwt),this.clientTransaction.send()}},{key:"_receiveResponse",value:function(e){var t,n,r=e.status_code;if(401!==r&&407!==r||null===this._ua.configuration.password&&null===this._ua.configuration.ha1)this._eventHandlers.onReceiveResponse(e);else{if(401===e.status_code?(t=e.parseHeader("www-authenticate"),n="authorization"):(t=e.parseHeader("proxy-authenticate"),n="proxy-authorization"),!t)return a("".concat(e.status_code," with wrong or missing challenge, cannot authenticate")),void this._eventHandlers.onReceiveResponse(e);if(!this._challenged||!this._staled&&!0===t.stale){if(this._auth||(this._auth=new s({username:this._ua.configuration.authorization_user,password:this._ua.configuration.password,realm:this._ua.configuration.realm,ha1:this._ua.configuration.ha1})),!this._auth.authenticate(this._request,t))return void this._eventHandlers.onReceiveResponse(e);this._challenged=!0,this._ua.set("realm",this._auth.get("realm")),this._ua.set("ha1",this._auth.get("ha1")),t.stale&&(this._staled=!0),this._request=this._request.clone(),this._request.cseq+=1,this._request.setHeader("cseq","".concat(this._request.cseq," ").concat(this._method)),this._request.setHeader(n,this._auth.toString()),this._eventHandlers.onAuthenticated(this._request),this.send()}else this._eventHandlers.onReceiveResponse(e)}}}])&&r(t.prototype,n),l&&r(t,l),e}()},function(e,t,n){const r=n(9),o=n(10);e.exports=class extends o{constructor(e){super(),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(e){const t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){this.emit("packet",e)}onClose(){this.readyState="closed",this.emit("close")}}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var s=n[r].split("=");t[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return t}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(10),o=n(85),s=n(37),i=n(0)("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={}));t.Encoder=class{encode(e){return i("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!s.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),i("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=o.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class u extends r{constructor(){super()}add(e){let t;if("string"==typeof e)(t=this.decodeString(e)).type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new l(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!s.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(t=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===a[n.type])throw new Error("unknown packet type "+n.type);if(n.type===a.BINARY_EVENT||n.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t;){if(","===e.charAt(t))break;if(t===e.length)break}n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!u.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return i("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=u;class l{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(8),s=n(4);e.exports=function(){function e(t,n,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t&&t instanceof o))throw new TypeError('missing or invalid "uri" parameter');for(var s in this._uri=t,this._parameters={},this.display_name=n,r)Object.prototype.hasOwnProperty.call(r,s)&&this.setParam(s,r[s])}var t,n,i;return t=e,i=[{key:"parse",value:function(e){return-1!==(e=s.parse(e,"Name_Addr_Header"))?e:void 0}}],(n=[{key:"uri",get:function(){return this._uri}},{key:"display_name",get:function(){return this._display_name},set:function(e){this._display_name=0===e?"0":e}},{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"clone",value:function(){return new e(this._uri.clone(),this._display_name,JSON.parse(JSON.stringify(this._parameters)))}},{key:"_quote",value:function(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}},{key:"toString",value:function(){var e=this._display_name?'"'.concat(this._quote(this._display_name),'" '):"";for(var t in e+="<".concat(this._uri.toString(),">"),this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,t)&&(e+=";".concat(t),null!==this._parameters[t]&&(e+="=".concat(this._parameters[t])));return e}}])&&r(t.prototype,n),i&&r(t,i),e}()},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(3);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(r.isURLSearchParams(t))s=t.toString();else{var i=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),s=i.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(3),o=n(54),s={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=n(24):void 0!==t&&"[object process]"===Object.prototype.toString.call(t)&&(a=n(24)),a),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(s)}),e.exports=u}).call(this,n(23))},function(e,t){var n,r,o=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,l=[],c=!1,h=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&d())}function d(){if(!c){var e=a(f);c=!0;for(var t=l.length;t;){for(u=l,l=[];++h<t;)u&&u[h].run();h=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function _(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=_,o.addListener=_,o.once=_,o.off=_,o.removeListener=_,o.removeAllListeners=_,o.emit=_,o.prependListener=_,o.prependOnceListener=_,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(3),o=n(55),s=n(57),i=n(20),a=n(58),u=n(61),l=n(62),c=n(25);e.exports=function(e){return new Promise(function(t,n){var h=e.data,f=e.headers;r.isFormData(h)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",_=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(p+":"+_)}var m=a(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),i(m,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,s={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:e,request:d};o(t,n,s),d=null}},d.onabort=function(){d&&(n(c("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(c("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=(e.withCredentials||l(m))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(f,function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)}),r.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),n(e),d=null)}),h||(h=null),d.send(h)})}},function(e,t,n){"use strict";var r=n(56);e.exports=function(e,t,n,o,s){var i=new Error(e);return r(i,t,n,o,s)}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],s=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function l(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))}),r.forEach(s,l),r.forEach(i,function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])}),r.forEach(a,function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))});var c=o.concat(s).concat(i).concat(a),h=Object.keys(e).concat(Object.keys(t)).filter(function(e){return-1===c.indexOf(e)});return r.forEach(h,l),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),s=e.indexOf("]");-1!=o&&-1!=s&&(e=e.substring(0,o)+e.substring(o,s).replace(/:/g,";")+e.substring(s,e.length));for(var i,a,u=n.exec(e||""),l={},c=14;c--;)l[r[c]]=u[c]||"";return-1!=o&&-1!=s&&(l.source=t,l.host=l.host.substring(1,l.host.length-1).replace(/;/g,":"),l.authority=l.authority.replace("[","").replace("]","").replace(/;/g,":"),l.ipv6uri=!0),l.pathNames=function(e,t){var n=t.replace(/\/{2,9}/g,"/").split("/");"/"!=t.substr(0,1)&&0!==t.length||n.splice(0,1);"/"==t.substr(t.length-1,1)&&n.splice(n.length-1,1);return n}(0,l.path),l.queryKey=(i=l.query,a={},i.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(e,t,n){t&&(a[t]=n)}),a),l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=n(71),o=n(36),s=n(17),i=n(38),a=n(86),u=n(39),l=n(0)("socket.io-client:manager");t.Manager=class extends u.StrictEventEmitter{constructor(e,t){super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(l("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=r(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const o=i.on(t,"open",function(){n.onopen(),e&&e()}),s=i.on(t,"error",t=>{l("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()});if(!1!==this._timeout){const e=this._timeout;l("connect attempt will timeout after %d",e),0===e&&o();const n=setTimeout(()=>{l("connect attempt timed out after %d",e),o(),t.close(),t.emit("error",new Error("timeout"))},e);this.opts.autoUnref&&n.unref(),this.subs.push(function(){clearTimeout(n)})}return this.subs.push(o),this.subs.push(s),this}connect(e){return this.open(e)}onopen(){l("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(i.on(e,"ping",this.onping.bind(this)),i.on(e,"data",this.ondata.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this)),i.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){l("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new o.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t){if(this.nsps[e].active)return void l("socket %s is still active, skipping close",e)}this._close()}_packet(e){l("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){l("cleanup"),this.subs.forEach(e=>e()),this.subs.length=0,this.decoder.destroy()}_close(){l("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){l("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();l("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=setTimeout(()=>{e.skipReconnect||(l("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open(t=>{t?(l("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(l("reconnect success"),e.onreconnect())}))},t);this.opts.autoUnref&&n.unref(),this.subs.push(function(){clearTimeout(n)})}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}},function(e,t,n){const r=n(31),o=n(74),s=n(78),i=n(79);t.polling=function(e){let t,n=!1,i=!1;const a=!1!==e.jsonp;if("undefined"!=typeof location){const t="https:"===location.protocol;let r=location.port;r||(r=t?443:80),n=e.hostname!==location.hostname||r!==e.port,i=e.secure!==t}if(e.xdomain=n,e.xscheme=i,"open"in(t=new r(e))&&!e.forceJSONP)return new o(e);if(!a)throw new Error("JSONP disabled");return new s(e)},t.websocket=i},function(e,t,n){const r=n(73),o=n(12);e.exports=function(e){const t=e.xdomain,n=e.xscheme,s=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&s)return new XDomainRequest}catch(e){}if(!t)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},function(e,t,n){const r=n(14),o=n(15),s=n(9),i=n(34),a=n(0)("engine.io-client:polling");e.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(e){const t=this;function n(){a("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){let e=0;this.polling&&(a("we are currently polling - waiting to pause"),e++,this.once("pollComplete",function(){a("pre-pause polling complete"),--e||n()})),this.writable||(a("we are currently writing - waiting to pause"),e++,this.once("drain",function(){a("pre-pause writing complete"),--e||n()}))}else n()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){const t=this;a("polling got data %s",e);s.decodePayload(e,this.socket.binaryType).forEach(function(e,n,r){if("opening"===t.readyState&&"open"===e.type&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=this;function t(){a("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(a("transport open - closing"),t()):(a("transport not open - deferring close"),this.once("open",t))}write(e){this.writable=!1,s.encodePayload(e,e=>{this.doWrite(e,()=>{this.writable=!0,this.emit("drain")})})}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}},function(e,t){const n=Object.create(null);n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";const r=Object.create(null);Object.keys(n).forEach(e=>{r[n[e]]=e});e.exports={PACKET_TYPES:n,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s=64,i={},a=0,u=0;function l(e){var t="";do{t=o[e%s]+t,e=Math.floor(e/s)}while(e>0);return t}function c(){var e=l(+new Date);return e!==r?(a=0,r=e):e+"."+l(a++)}for(;u<s;u++)i[o[u]]=u;c.encode=l,c.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*s+i[e.charAt(u)];return t},e.exports=c},function(e,t){e.exports.pick=(e,...t)=>t.reduce((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t),{})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const r=n(17),o=n(38),s=n(39),i=n(0)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});t.Socket=class extends s.StrictEventEmitter{constructor(e,t,n){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[o.on(e,"open",this.onopen.bind(this)),o.on(e,"packet",this.onpacket.bind(this)),o.on(e,"error",this.onerror.bind(this)),o.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen(),this)}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(a.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:r.PacketType.EVENT,data:t,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(i("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++);const o=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!o||!this.connected)?i("discard packet as the transport is not currently writable"):this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){i("transport is open - connecting"),"function"==typeof this.auth?this.auth(e=>{this.packet({type:r.PacketType.CONNECT,data:e})}):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){i("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case r.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(e);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(e);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];i("emitting event %j",t),null!=e.id&&(i("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...o){n||(n=!0,i("sending ack %j",o),t.packet({type:r.PacketType.ACK,id:e,data:o}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(i("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):i("bad ack %s",e.id)}onconnect(e){i("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitReserved("connect"),this.emitBuffered()}emitBuffered(){this.receiveBuffer.forEach(e=>this.emitEvent(e)),this.receiveBuffer=[],this.sendBuffer.forEach(e=>this.packet(e)),this.sendBuffer=[]}ondisconnect(){i("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(e=>e()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(i("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const r="function"==typeof ArrayBuffer,o=e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer,s=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);function u(e){return r&&(e instanceof ArrayBuffer||o(e))||i&&e instanceof Blob||a&&e instanceof File}t.isBinary=u,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(u(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;const r=n(10);t.StrictEventEmitter=class extends r{on(e,t){return super.on(e,t),this}once(e,t){return super.once(e,t),this}emit(e,...t){return super.emit(e,...t),this}emitReserved(e,...t){return super.emit(e,...t),this}listeners(e){return super.listeners(e)}}},function(e){e.exports=JSON.parse('{"name":"jssip","title":"JsSIP","description":"the Javascript SIP library","version":"3.7.3","homepage":"https://jssip.net","author":"José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)","contributors":["Iñaki Baz Castillo <ibc@aliax.net> (https://github.com/ibc)"],"types":"lib/JsSIP.d.ts","main":"lib-es5/JsSIP.js","keywords":["sip","websocket","webrtc","node","browser","library"],"license":"MIT","repository":{"type":"git","url":"https://github.com/versatica/JsSIP.git"},"bugs":{"url":"https://github.com/versatica/JsSIP/issues"},"dependencies":{"@types/debug":"^4.1.5","@types/node":"^14.14.34","debug":"^4.3.1","events":"^3.3.0","sdp-transform":"^2.14.1"},"devDependencies":{"@babel/core":"^7.13.10","@babel/preset-env":"^7.13.10","ansi-colors":"^3.2.4","browserify":"^16.5.1","eslint":"^5.16.0","fancy-log":"^1.3.3","gulp":"^4.0.2","gulp-babel":"^8.0.0","gulp-eslint":"^5.0.0","gulp-expect-file":"^1.0.2","gulp-header":"^2.0.9","gulp-nodeunit-runner":"^0.2.2","gulp-plumber":"^1.2.1","gulp-rename":"^1.4.0","gulp-uglify-es":"^1.0.4","pegjs":"^0.7.0","vinyl-buffer":"^1.0.1","vinyl-source-stream":"^2.0.0"},"scripts":{"lint":"gulp lint","test":"gulp test","prepublishOnly":"gulp babel"}}')},function(e,t,n){var r=n(95),o=n(96);t.write=o,t.parse=r.parse,t.parseParams=r.parseParams,t.parseFmtpConfig=r.parseFmtpConfig,t.parsePayloads=r.parsePayloads,t.parseRemoteCandidates=r.parseRemoteCandidates,t.parseImageAttributes=r.parseImageAttributes,t.parseSimulcastStreamList=r.parseSimulcastStreamList},function(e,t){var n=e.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+(e["encrypt-uri"]?" %s":"%v")+" %s"+(e.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),t+=null!=e["network-id"]?" network-id %d":"%v",t+=null!=e["network-cost"]?" network-cost %d":"%v"}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(e){return"ts-refclk:%s"+(null!=e.clksrcExt?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(e){var t="mediaclk:";return t+=null!=e.id?"id=%s %s":"%v%s",t+=null!=e.mediaClockValue?"=%s":"",t+=null!=e.rateNumerator?" rate=%s":"",t+=null!=e.rateDenominator?"/%s":""}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};Object.keys(n).forEach(function(e){n[e].forEach(function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")})})},function(e,t,n){"use strict";var r=500;e.exports={T1:r,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=n(5).EventEmitter,f=n(41),d=n(1),p=n(7),_=n(11),m=n(2),v=n(43),y=n(6),g=n(98),T=n(13),b=n(100),E=n(101),S=n(102),A=n(103),w=n(8),C=n(0)("JsSIP:RTCSession"),R=n(0)("JsSIP:ERROR:RTCSession");R.log=console.warn.bind(console);var k={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_ACK:6,STATUS_CANCELED:7,STATUS_TERMINATED:8,STATUS_CONFIRMED:9},I=["audio","video"];e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(l,h);var t,n,r,s=u(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),C("new"),(t=s.call(this))._id=null,t._ua=e,t._status=k.STATUS_NULL,t._dialog=null,t._earlyDialogs={},t._contact=null,t._from_tag=null,t._to_tag=null,t._connection=null,t._connectionPromiseQueue=Promise.resolve(),t._request=null,t._is_canceled=!1,t._cancel_reason="",t._is_confirmed=!1,t._late_sdp=!1,t._rtcOfferConstraints=null,t._rtcAnswerConstraints=null,t._localMediaStream=null,t._localMediaStreamLocallyGenerated=!1,t._rtcReady=!0,t._timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null},t._direction=null,t._local_identity=null,t._remote_identity=null,t._start_time=null,t._end_time=null,t._tones=null,t._audioMuted=!1,t._videoMuted=!1,t._localHold=!1,t._remoteHold=!1,t._sessionTimers={enabled:t._ua.configuration.session_timers,refreshMethod:t._ua.configuration.session_timers_refresh_method,defaultExpires:d.SESSION_EXPIRES,currentExpires:null,running:!1,refresher:!1,timer:null},t._referSubscribers={},t._data={},t}return t=l,r=[{key:"C",get:function(){return k}}],(n=[{key:"C",get:function(){return k}},{key:"causes",get:function(){return d.causes}},{key:"id",get:function(){return this._id}},{key:"connection",get:function(){return this._connection}},{key:"contact",get:function(){return this._contact}},{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"start_time",get:function(){return this._start_time}},{key:"end_time",get:function(){return this._end_time}},{key:"data",get:function(){return this._data},set:function(e){this._data=e}},{key:"status",get:function(){return this._status}},{key:"isInProgress",value:function(){switch(this._status){case k.STATUS_NULL:case k.STATUS_INVITE_SENT:case k.STATUS_1XX_RECEIVED:case k.STATUS_INVITE_RECEIVED:case k.STATUS_WAITING_FOR_ANSWER:return!0;default:return!1}}},{key:"isEstablished",value:function(){switch(this._status){case k.STATUS_ANSWERED:case k.STATUS_WAITING_FOR_ACK:case k.STATUS_CONFIRMED:return!0;default:return!1}}},{key:"isEnded",value:function(){switch(this._status){case k.STATUS_CANCELED:case k.STATUS_TERMINATED:return!0;default:return!1}}},{key:"isMuted",value:function(){return{audio:this._audioMuted,video:this._videoMuted}}},{key:"isOnHold",value:function(){return{local:this._localHold,remote:this._remoteHold}}},{key:"connect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;C("connect()");var r=e,o=m.cloneObject(t.eventHandlers),s=m.cloneArray(t.extraHeaders),i=m.cloneObject(t.mediaConstraints,{audio:!0,video:!0}),a=t.mediaStream||null,u=m.cloneObject(t.pcConfig,{iceServers:[]}),l=t.rtcConstraints||null,c=t.rtcOfferConstraints||null;if(this._rtcOfferConstraints=c,this._rtcAnswerConstraints=t.rtcAnswerConstraints||null,this._data=t.data||this._data,void 0===e)throw new TypeError("Not enough arguments");if(this._status!==k.STATUS_NULL)throw new p.InvalidStateError(this._status);if(!window.RTCPeerConnection)throw new p.NotSupportedError("WebRTC not supported");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(r));for(var h in this._sessionTimers.enabled&&m.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=d.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=d.SESSION_EXPIRES),o)Object.prototype.hasOwnProperty.call(o,h)&&this.on(h,o[h]);this._from_tag=m.newTag();var f=t.anonymous||!1,_={from_tag:this._from_tag};this._contact=this._ua.contact.toString({anonymous:f,outbound:!0}),f?(_.from_display_name="Anonymous",_.from_uri=new w("sip","anonymous","anonymous.invalid"),s.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString())),s.push("Privacy: id")):t.fromUserName&&(_.from_uri=new w("sip",t.fromUserName,this._ua.configuration.uri.host),s.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString()))),t.fromDisplayName&&(_.from_display_name=t.fromDisplayName),s.push("Contact: ".concat(this._contact)),s.push("Content-Type: application/sdp"),this._sessionTimers.enabled&&s.push("Session-Expires: ".concat(this._sessionTimers.defaultExpires).concat(this._ua.configuration.session_timers_force_refresher?";refresher=uac":"")),this._request=new y.InitialOutgoingInviteRequest(e,this._ua,_,s),this._id=this._request.call_id+this._from_tag,this._createRTCConnection(u,l),this._direction="outgoing",this._local_identity=this._request.from,this._remote_identity=this._request.to,n&&n(this),this._newRTCSession("local",this._request),this._sendInitialRequest(i,c,a)}},{key:"init_incoming",value:function(e,t){var n,r=this;C("init_incoming()");var o=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;e.body&&"application/sdp"!==o?e.reply(415):(this._status=k.STATUS_INVITE_RECEIVED,this._from_tag=e.from_tag,this._id=e.call_id+this._from_tag,this._request=e,this._contact=this._ua.contact.toString(),e.hasHeader("expires")&&(n=1e3*e.getHeader("expires")),e.to_tag=m.newTag(),this._createDialog(e,"UAS",!0)?(e.body?this._late_sdp=!1:this._late_sdp=!0,this._status=k.STATUS_WAITING_FOR_ANSWER,this._timers.userNoAnswerTimer=setTimeout(function(){e.reply(408),r._failed("local",null,d.causes.NO_ANSWER)},this._ua.configuration.no_answer_timeout),n&&(this._timers.expiresTimer=setTimeout(function(){r._status===k.STATUS_WAITING_FOR_ANSWER&&(e.reply(487),r._failed("system",null,d.causes.EXPIRES))},n)),this._direction="incoming",this._local_identity=e.to,this._remote_identity=e.from,t&&t(this),this._newRTCSession("remote",e),this._status!==k.STATUS_TERMINATED&&(e.reply(180,null,["Contact: ".concat(this._contact)]),this._progress("local",null))):e.reply(500,"Missing Contact header field"))}},{key:"answer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};C("answer()");var n=this._request,r=m.cloneArray(t.extraHeaders),s=m.cloneObject(t.mediaConstraints),i=t.mediaStream||null,a=m.cloneObject(t.pcConfig,{iceServers:[]}),u=t.rtcConstraints||null,l=t.rtcAnswerConstraints||null,c=m.cloneObject(t.rtcOfferConstraints),h=!1,f=!1,_=!1,v=!1;if(this._rtcAnswerConstraints=l,this._rtcOfferConstraints=t.rtcOfferConstraints||null,this._data=t.data||this._data,"incoming"!==this._direction)throw new p.NotSupportedError('"answer" not supported for outgoing RTCSession');if(this._status!==k.STATUS_WAITING_FOR_ANSWER)throw new p.InvalidStateError(this._status);if(this._sessionTimers.enabled&&m.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=d.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=d.SESSION_EXPIRES),this._status=k.STATUS_ANSWERED,this._createDialog(n,"UAS")){clearTimeout(this._timers.userNoAnswerTimer),r.unshift("Contact: ".concat(this._contact));var y=n.parseSDP();Array.isArray(y.media)||(y.media=[y.media]);var g,T=o(y.media);try{for(T.s();!(g=T.n()).done;){var b=g.value;"audio"===b.type&&(h=!0,b.direction&&"sendrecv"!==b.direction||(_=!0)),"video"===b.type&&(f=!0,b.direction&&"sendrecv"!==b.direction||(v=!0))}}catch(e){T.e(e)}finally{T.f()}if(i&&!1===s.audio){var E,S=o(i.getAudioTracks());try{for(S.s();!(E=S.n()).done;){var A=E.value;i.removeTrack(A)}}catch(e){S.e(e)}finally{S.f()}}if(i&&!1===s.video){var w,I=o(i.getVideoTracks());try{for(I.s();!(w=I.n()).done;){var O=w.value;i.removeTrack(O)}}catch(e){I.e(e)}finally{I.f()}}i||void 0!==s.audio||(s.audio=_),i||void 0!==s.video||(s.video=v),i||h||c.offerToReceiveAudio||(s.audio=!1),i||f||c.offerToReceiveVideo||(s.video=!1),this._createRTCConnection(a,u),Promise.resolve().then(function(){return i||(s.audio||s.video?(e._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(s).catch(function(t){if(e._status===k.STATUS_TERMINATED)throw new Error("terminated");throw n.reply(480),e._failed("local",null,d.causes.USER_DENIED_MEDIA_ACCESS),R('emit "getusermediafailed" [error:%o]',t),e.emit("getusermediafailed",t),new Error("getUserMedia() failed")})):void 0)}).then(function(t){if(e._status===k.STATUS_TERMINATED)throw new Error("terminated");e._localMediaStream=t,t&&t.getTracks().forEach(function(n){e._connection.addTrack(n,t)})}).then(function(){if(!e._late_sdp){var t={originator:"remote",type:"offer",sdp:n.body};C('emit "sdp"'),e.emit("sdp",t);var r=new RTCSessionDescription({type:"offer",sdp:t.sdp});return e._connectionPromiseQueue=e._connectionPromiseQueue.then(function(){return e._connection.setRemoteDescription(r)}).catch(function(t){throw n.reply(488),e._failed("system",null,d.causes.WEBRTC_ERROR),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),e.emit("peerconnection:setremotedescriptionfailed",t),new Error("peerconnection.setRemoteDescription() failed")}),e._connectionPromiseQueue}}).then(function(){if(e._status===k.STATUS_TERMINATED)throw new Error("terminated");return e._connecting(n),e._late_sdp?e._createLocalDescription("offer",e._rtcOfferConstraints).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")}):e._createLocalDescription("answer",l).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")})}).then(function(t){if(e._status===k.STATUS_TERMINATED)throw new Error("terminated");e._handleSessionTimersInIncomingRequest(n,r),n.reply(200,null,r,t,function(){e._status=k.STATUS_WAITING_FOR_ACK,e._setInvite2xxTimer(n,t),e._setACKTimer(),e._accepted("local")},function(){e._failed("system",null,d.causes.CONNECTION_ERROR)})}).catch(function(t){e._status!==k.STATUS_TERMINATED&&R(t)})}else n.reply(500,"Error creating dialog")}},{key:"terminate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};C("terminate()");var n,r=t.cause||d.causes.BYE,o=m.cloneArray(t.extraHeaders),s=t.body,i=t.status_code,a=t.reason_phrase;if(this._status===k.STATUS_TERMINATED)throw new p.InvalidStateError(this._status);switch(this._status){case k.STATUS_NULL:case k.STATUS_INVITE_SENT:case k.STATUS_1XX_RECEIVED:if(C("canceling session"),i&&(i<200||i>=700))throw new TypeError("Invalid status_code: ".concat(i));i&&(a=a||d.REASON_PHRASE[i]||"",n="SIP ;cause=".concat(i,' ;text="').concat(a,'"')),this._status===k.STATUS_NULL||this._status===k.STATUS_INVITE_SENT?(this._is_canceled=!0,this._cancel_reason=n):this._status===k.STATUS_1XX_RECEIVED&&this._request.cancel(n),this._status=k.STATUS_CANCELED,this._failed("local",null,d.causes.CANCELED);break;case k.STATUS_WAITING_FOR_ANSWER:case k.STATUS_ANSWERED:if(C("rejecting session"),(i=i||480)<300||i>=700)throw new TypeError("Invalid status_code: ".concat(i));this._request.reply(i,a,o,s),this._failed("local",null,d.causes.REJECTED);break;case k.STATUS_WAITING_FOR_ACK:case k.STATUS_CONFIRMED:if(C("terminating session"),a=t.reason_phrase||d.REASON_PHRASE[i]||"",i&&(i<200||i>=700))throw new TypeError("Invalid status_code: ".concat(i));if(i&&o.push("Reason: SIP ;cause=".concat(i,'; text="').concat(a,'"')),this._status===k.STATUS_WAITING_FOR_ACK&&"incoming"===this._direction&&this._request.server_transaction.state!==_.C.STATUS_TERMINATED){var u=this._dialog;this.receiveRequest=function(t){t.method===d.ACK&&(e.sendRequest(d.BYE,{extraHeaders:o,body:s}),u.terminate())},this._request.server_transaction.on("stateChanged",function(){e._request.server_transaction.state===_.C.STATUS_TERMINATED&&(e.sendRequest(d.BYE,{extraHeaders:o,body:s}),u.terminate())}),this._ended("local",null,r),this._dialog=u,this._ua.newDialog(u)}else this.sendRequest(d.BYE,{extraHeaders:o,body:s}),this._ended("local",null,r)}}},{key:"sendDTMF",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};C("sendDTMF() | tones: %s",e);var n=0,r=t.duration||null,o=t.interToneGap||null,s=t.transportType||d.DTMF_TRANSPORT.INFO;if(void 0===e)throw new TypeError("Not enough arguments");if(this._status!==k.STATUS_CONFIRMED&&this._status!==k.STATUS_WAITING_FOR_ACK)throw new p.InvalidStateError(this._status);if(s!==d.DTMF_TRANSPORT.INFO&&s!==d.DTMF_TRANSPORT.RFC2833)throw new TypeError("invalid transportType: ".concat(s));if("number"==typeof e&&(e=e.toString()),!e||"string"!=typeof e||!e.match(/^[0-9A-DR#*,]+$/i))throw new TypeError("Invalid tones: ".concat(e));if(r&&!m.isDecimal(r))throw new TypeError("Invalid tone duration: ".concat(r));if(r?r<b.C.MIN_DURATION?(C('"duration" value is lower than the minimum allowed, setting it to '.concat(b.C.MIN_DURATION," milliseconds")),r=b.C.MIN_DURATION):r>b.C.MAX_DURATION?(C('"duration" value is greater than the maximum allowed, setting it to '.concat(b.C.MAX_DURATION," milliseconds")),r=b.C.MAX_DURATION):r=Math.abs(r):r=b.C.DEFAULT_DURATION,t.duration=r,o&&!m.isDecimal(o))throw new TypeError("Invalid interToneGap: ".concat(o));if(o?o<b.C.MIN_INTER_TONE_GAP?(C('"interToneGap" value is lower than the minimum allowed, setting it to '.concat(b.C.MIN_INTER_TONE_GAP," milliseconds")),o=b.C.MIN_INTER_TONE_GAP):o=Math.abs(o):o=b.C.DEFAULT_INTER_TONE_GAP,s!==d.DTMF_TRANSPORT.RFC2833)this._tones?this._tones+=e:(this._tones=e,a.call(this));else{var i=this._getDTMFRTPSender();i&&(e=i.toneBuffer+e,i.insertDTMF(e,r,o))}function a(){var e,s=this;if(this._status===k.STATUS_TERMINATED||!this._tones||n>=this._tones.length)this._tones=null;else{var i=this._tones[n];if(n+=1,","===i)e=2e3;else{var u=new b(this);t.eventHandlers={onFailed:function(){s._tones=null}},u.send(i,t),e=r+o}setTimeout(a.bind(this),e)}}}},{key:"sendInfo",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(C("sendInfo()"),this._status!==k.STATUS_CONFIRMED&&this._status!==k.STATUS_WAITING_FOR_ACK)throw new p.InvalidStateError(this._status);var r=new E(this);r.send(e,t,n)}},{key:"mute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!1};C("mute()");var t=!1,n=!1;!1===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!0,this._toggleMuteAudio(!0)),!1===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!0,this._toggleMuteVideo(!0)),!0!==t&&!0!==n||this._onmute({audio:t,video:n})}},{key:"unmute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!0};C("unmute()");var t=!1,n=!1;!0===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!1,!1===this._localHold&&this._toggleMuteAudio(!1)),!0===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!1,!1===this._localHold&&this._toggleMuteVideo(!1)),!0!==t&&!0!==n||this._onunmute({audio:t,video:n})}},{key:"hold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(C("hold()"),this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;if(!0===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!0,this._onhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:d.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Hold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"unhold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(C("unhold()"),this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;if(!1===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!1,this._onunhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:d.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Unhold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"renegotiate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;C("renegotiate()");var r=t.rtcOfferConstraints||null;if(this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;if(!this._isReadyToReOffer())return!1;var o={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:d.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Media Renegotiation Failed"})}};return this._setLocalMediaStatus(),t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:o,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:o,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}),!0}},{key:"refer",value:function(e,t){var n=this;C("refer()");var r=e;if(this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(r));var o=new A(this);o.sendRefer(e,t);var s=o.id;return this._referSubscribers[s]=o,o.on("requestFailed",function(){delete n._referSubscribers[s]}),o.on("accepted",function(){delete n._referSubscribers[s]}),o.on("failed",function(){delete n._referSubscribers[s]}),o}},{key:"sendRequest",value:function(e,t){return C("sendRequest()"),this._dialog.sendRequest(e,t)}},{key:"receiveRequest",value:function(e){var t=this;if(C("receiveRequest()"),e.method===d.CANCEL)this._status!==k.STATUS_WAITING_FOR_ANSWER&&this._status!==k.STATUS_ANSWERED||(this._status=k.STATUS_CANCELED,this._request.reply(487),this._failed("remote",e,d.causes.CANCELED));else switch(e.method){case d.ACK:if(this._status!==k.STATUS_WAITING_FOR_ACK)return;if(this._status=k.STATUS_CONFIRMED,clearTimeout(this._timers.ackTimer),clearTimeout(this._timers.invite2xxTimer),this._late_sdp){if(!e.body){this.terminate({cause:d.causes.MISSING_SDP,status_code:400});break}var n={originator:"remote",type:"answer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",n);var r=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(r)}).then(function(){t._is_confirmed||t._confirmed("remote",e)}).catch(function(e){t.terminate({cause:d.causes.BAD_MEDIA_DESCRIPTION,status_code:488}),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else this._is_confirmed||this._confirmed("remote",e);break;case d.BYE:this._status===k.STATUS_CONFIRMED||this._status===k.STATUS_WAITING_FOR_ACK?(e.reply(200),this._ended("remote",e,d.causes.BYE)):this._status===k.STATUS_INVITE_RECEIVED||this._status===k.STATUS_WAITING_FOR_ANSWER?(e.reply(200),this._request.reply(487,"BYE Received"),this._ended("remote",e,d.causes.BYE)):e.reply(403,"Wrong Status");break;case d.INVITE:this._status===k.STATUS_CONFIRMED?e.hasHeader("replaces")?this._receiveReplaces(e):this._receiveReinvite(e):e.reply(403,"Wrong Status");break;case d.INFO:if(this._status===k.STATUS_1XX_RECEIVED||this._status===k.STATUS_WAITING_FOR_ANSWER||this._status===k.STATUS_ANSWERED||this._status===k.STATUS_WAITING_FOR_ACK||this._status===k.STATUS_CONFIRMED){var o=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;o&&o.match(/^application\/dtmf-relay/i)?new b(this).init_incoming(e):void 0!==o?new E(this).init_incoming(e):e.reply(415)}else e.reply(403,"Wrong Status");break;case d.UPDATE:this._status===k.STATUS_CONFIRMED?this._receiveUpdate(e):e.reply(403,"Wrong Status");break;case d.REFER:this._status===k.STATUS_CONFIRMED?this._receiveRefer(e):e.reply(403,"Wrong Status");break;case d.NOTIFY:this._status===k.STATUS_CONFIRMED?this._receiveNotify(e):e.reply(403,"Wrong Status");break;default:e.reply(501)}}},{key:"onTransportError",value:function(){R("onTransportError()"),this._status!==k.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:d.causes.CONNECTION_ERROR,cause:d.causes.CONNECTION_ERROR})}},{key:"onRequestTimeout",value:function(){R("onRequestTimeout()"),this._status!==k.STATUS_TERMINATED&&this.terminate({status_code:408,reason_phrase:d.causes.REQUEST_TIMEOUT,cause:d.causes.REQUEST_TIMEOUT})}},{key:"onDialogError",value:function(){R("onDialogError()"),this._status!==k.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:d.causes.DIALOG_ERROR,cause:d.causes.DIALOG_ERROR})}},{key:"newDTMF",value:function(e){C("newDTMF()"),this.emit("newDTMF",e)}},{key:"newInfo",value:function(e){C("newInfo()"),this.emit("newInfo",e)}},{key:"_isReadyToReOffer",value:function(){return this._rtcReady?this._dialog?!0!==this._dialog.uac_pending_reply&&!0!==this._dialog.uas_pending_reply||(C("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress"),!1):(C("_isReadyToReOffer() | session not established yet"),!1):(C("_isReadyToReOffer() | internal WebRTC status not ready"),!1)}},{key:"_close",value:function(){if(C("close()"),this._localMediaStream&&this._localMediaStreamLocallyGenerated&&(C("close() | closing local MediaStream"),m.closeMediaStream(this._localMediaStream)),this._status!==k.STATUS_TERMINATED){if(this._status=k.STATUS_TERMINATED,this._connection)try{this._connection.close()}catch(e){R("close() | error closing the RTCPeerConnection: %o",e)}for(var e in this._timers)Object.prototype.hasOwnProperty.call(this._timers,e)&&clearTimeout(this._timers[e]);for(var t in clearTimeout(this._sessionTimers.timer),this._dialog&&(this._dialog.terminate(),delete this._dialog),this._earlyDialogs)Object.prototype.hasOwnProperty.call(this._earlyDialogs,t)&&(this._earlyDialogs[t].terminate(),delete this._earlyDialogs[t]);for(var n in this._referSubscribers)Object.prototype.hasOwnProperty.call(this._referSubscribers,n)&&delete this._referSubscribers[n];this._ua.destroyRTCSession(this)}}},{key:"_setInvite2xxTimer",value:function(e,t){var n=v.T1;this._timers.invite2xxTimer=setTimeout(function r(){this._status===k.STATUS_WAITING_FOR_ACK&&(e.reply(200,null,["Contact: ".concat(this._contact)],t),n<v.T2&&(n*=2)>v.T2&&(n=v.T2),this._timers.invite2xxTimer=setTimeout(r.bind(this),n))}.bind(this),n)}},{key:"_setACKTimer",value:function(){var e=this;this._timers.ackTimer=setTimeout(function(){e._status===k.STATUS_WAITING_FOR_ACK&&(C("no ACK received, terminating the session"),clearTimeout(e._timers.invite2xxTimer),e.sendRequest(d.BYE),e._ended("remote",null,d.causes.NO_ACK))},v.TIMER_H)}},{key:"_createRTCConnection",value:function(e,t){var n=this;this._connection=new RTCPeerConnection(e,t),this._connection.addEventListener("iceconnectionstatechange",function(){"failed"===n._connection.iceConnectionState&&n.terminate({cause:d.causes.RTP_TIMEOUT,status_code:408,reason_phrase:d.causes.RTP_TIMEOUT})}),C('emit "peerconnection"'),this.emit("peerconnection",{peerconnection:this._connection})}},{key:"_createLocalDescription",value:function(e,t){var n=this;if(C("createLocalDescription()"),"offer"!==e&&"answer"!==e)throw new Error('createLocalDescription() | invalid type "'.concat(e,'"'));var r=this._connection;return this._rtcReady=!1,Promise.resolve().then(function(){return"offer"===e?r.createOffer(t).catch(function(e){return R('emit "peerconnection:createofferfailed" [error:%o]',e),n.emit("peerconnection:createofferfailed",e),Promise.reject(e)}):r.createAnswer(t).catch(function(e){return R('emit "peerconnection:createanswerfailed" [error:%o]',e),n.emit("peerconnection:createanswerfailed",e),Promise.reject(e)})}).then(function(e){return r.setLocalDescription(e).catch(function(e){return n._rtcReady=!0,R('emit "peerconnection:setlocaldescriptionfailed" [error:%o]',e),n.emit("peerconnection:setlocaldescriptionfailed",e),Promise.reject(e)})}).then(function(){if(!("complete"!==r.iceGatheringState||t&&t.iceRestart)){n._rtcReady=!0;var o={originator:"local",type:e,sdp:r.localDescription.sdp};return C('emit "sdp"'),n.emit("sdp",o),Promise.resolve(o.sdp)}return new Promise(function(t){var o,s,i=!1,a=function(){r.removeEventListener("icecandidate",o),r.removeEventListener("icegatheringstatechange",s),i=!0,n._rtcReady=!0;var a={originator:"local",type:e,sdp:r.localDescription.sdp};C('emit "sdp"'),n.emit("sdp",a),t(a.sdp)};r.addEventListener("icecandidate",o=function(e){var t=e.candidate;t?n.emit("icecandidate",{candidate:t,ready:a}):i||a()}),r.addEventListener("icegatheringstatechange",s=function(){"complete"!==r.iceGatheringState||i||a()})})})}},{key:"_createDialog",value:function(e,t,n){var r="UAS"===t?e.to_tag:e.from_tag,o="UAS"===t?e.from_tag:e.to_tag,s=e.call_id+r+o,i=this._earlyDialogs[s];if(n)return!!i||((i=new g(this,e,t,g.C.STATUS_EARLY)).error?(C(i.error),this._failed("remote",e,d.causes.INTERNAL_ERROR),!1):(this._earlyDialogs[s]=i,!0));if(this._from_tag=e.from_tag,this._to_tag=e.to_tag,i)return i.update(e,t),this._dialog=i,delete this._earlyDialogs[s],!0;var a=new g(this,e,t);return a.error?(C(a.error),this._failed("remote",e,d.causes.INTERNAL_ERROR),!1):(this._dialog=a,!0)}},{key:"_receiveReinvite",value:function(e){var t=this;C("receiveReinvite()");var n=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o=!0;var n=t.status_code||403,r=t.reason_phrase||"",s=m.cloneArray(t.extraHeaders);if(this._status!==k.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: ".concat(n));e.reply(n,r,s)}.bind(this)},o=!1;if(this.emit("reinvite",r),!o){if(this._late_sdp=!1,!e.body)return this._late_sdp=!0,this._remoteHold&&(this._remoteHold=!1,this._onunhold("remote")),void(this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._createLocalDescription("offer",t._rtcOfferConstraints)}).then(function(e){s.call(t,e)}).catch(function(){e.reply(500)}));if("application/sdp"!==n)return C("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==k.STATUS_TERMINATED&&s.call(t,e)}).catch(function(e){R(e)})}function s(t){var n=this,o=["Contact: ".concat(this._contact)];this._handleSessionTimersInIncomingRequest(e,o),this._late_sdp&&(t=this._mangleOffer(t)),e.reply(200,null,o,t,function(){n._status=k.STATUS_WAITING_FOR_ACK,n._setInvite2xxTimer(e,t),n._setACKTimer()}),"function"==typeof r.callback&&r.callback()}}},{key:"_receiveUpdate",value:function(e){var t=this;C("receiveUpdate()");var n=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o=!0;var n=t.status_code||403,r=t.reason_phrase||"",s=m.cloneArray(t.extraHeaders);if(this._status!==k.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: ".concat(n));e.reply(n,r,s)}.bind(this)},o=!1;if(this.emit("update",r),!o)if(e.body){if("application/sdp"!==n)return C("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==k.STATUS_TERMINATED&&s.call(t,e)}).catch(function(e){R(e)})}else s.call(this,null);function s(t){var n=["Contact: ".concat(this._contact)];this._handleSessionTimersInIncomingRequest(e,n),e.reply(200,null,n,t),"function"==typeof r.callback&&r.callback()}}},{key:"_processInDialogSdpOffer",value:function(e){var t=this;C("_processInDialogSdpOffer()");var n,r=e.parseSDP(),s=!1,i=o(r.media);try{for(i.s();!(n=i.n()).done;){var a=n.value;if(-1!==I.indexOf(a.type)){var u=a.direction||r.direction||"sendrecv";if("sendonly"!==u&&"inactive"!==u){s=!1;break}s=!0}}}catch(e){i.e(e)}finally{i.f()}var l={originator:"remote",type:"offer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",l);var c=new RTCSessionDescription({type:"offer",sdp:l.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if(t._status===k.STATUS_TERMINATED)throw new Error("terminated");return t._connection.setRemoteDescription(c).catch(function(n){throw e.reply(488),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n),n})}).then(function(){if(t._status===k.STATUS_TERMINATED)throw new Error("terminated");!0===t._remoteHold&&!1===s?(t._remoteHold=!1,t._onunhold("remote")):!1===t._remoteHold&&!0===s&&(t._remoteHold=!0,t._onhold("remote"))}).then(function(){if(t._status===k.STATUS_TERMINATED)throw new Error("terminated");return t._createLocalDescription("answer",t._rtcAnswerConstraints).catch(function(t){throw e.reply(500),R('emit "peerconnection:createtelocaldescriptionfailed" [error:%o]',t),t})}).catch(function(e){R("_processInDialogSdpOffer() failed [error: %o]",e)}),this._connectionPromiseQueue}},{key:"_receiveRefer",value:function(e){var t=this;if(C("receiveRefer()"),!e.refer_to)return C("no Refer-To header field present in REFER"),void e.reply(400);if(e.refer_to.uri.scheme!==d.SIP)return C("Refer-To header field points to a non-SIP URI scheme"),void e.reply(416);e.reply(202);var n=new S(this,e.cseq);function r(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t="function"==typeof t?t:null,this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;var o=new l(this._ua);if(o.on("progress",function(e){var t=e.response;n.notify(t.status_code,t.reason_phrase)}),o.on("accepted",function(e){var t=e.response;n.notify(t.status_code,t.reason_phrase)}),o.on("_failed",function(e){var t=e.message,r=e.cause;t?n.notify(t.status_code,t.reason_phrase):n.notify(487,r)}),e.refer_to.uri.hasHeader("replaces")){var s=decodeURIComponent(e.refer_to.uri.getHeader("replaces"));r.extraHeaders=m.cloneArray(r.extraHeaders),r.extraHeaders.push("Replaces: ".concat(s))}o.connect(e.refer_to.uri.toAor(),r,t)}function o(){n.notify(603)}C('emit "refer"'),this.emit("refer",{request:e,accept:function(e,n){r.call(t,e,n)},reject:function(){o.call(t)}})}},{key:"_receiveNotify",value:function(e){switch(C("receiveNotify()"),e.event||e.reply(400),e.event.event){case"refer":var t,n;if(e.event.params&&e.event.params.id)t=e.event.params.id,n=this._referSubscribers[t];else{if(1!==Object.keys(this._referSubscribers).length)return void e.reply(400,"Missing event id parameter");n=this._referSubscribers[Object.keys(this._referSubscribers)[0]]}if(!n)return void e.reply(481,"Subscription does not exist");n.receiveNotify(e),e.reply(200);break;default:e.reply(489)}}},{key:"_receiveReplaces",value:function(e){var t=this;function n(t){var n=this;if(this._status!==k.STATUS_WAITING_FOR_ACK&&this._status!==k.STATUS_CONFIRMED)return!1;var r=new l(this._ua);r.on("confirmed",function(){n.terminate()}),r.init_incoming(e,t)}function r(){C("Replaced INVITE rejected by the user"),e.reply(486)}C("receiveReplaces()"),this.emit("replaces",{request:e,accept:function(e){n.call(t,e)},reject:function(){r.call(t)}})}},{key:"_sendInitialRequest",value:function(e,t,n){var r=this,o=new T(this._ua,this._request,{onRequestTimeout:function(){r.onRequestTimeout()},onTransportError:function(){r.onTransportError()},onAuthenticated:function(e){r._request=e},onReceiveResponse:function(e){r._receiveInviteResponse(e)}});Promise.resolve().then(function(){return n||(e.audio||e.video?(r._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(e).catch(function(e){if(r._status===k.STATUS_TERMINATED)throw new Error("terminated");throw r._failed("local",null,d.causes.USER_DENIED_MEDIA_ACCESS),R('emit "getusermediafailed" [error:%o]',e),r.emit("getusermediafailed",e),e})):void 0)}).then(function(e){if(r._status===k.STATUS_TERMINATED)throw new Error("terminated");return r._localMediaStream=e,e&&e.getTracks().forEach(function(t){r._connection.addTrack(t,e)}),r._connecting(r._request),r._createLocalDescription("offer",t).catch(function(e){throw r._failed("local",null,d.causes.WEBRTC_ERROR),e})}).then(function(e){if(r._is_canceled||r._status===k.STATUS_TERMINATED)throw new Error("terminated");r._request.body=e,r._status=k.STATUS_INVITE_SENT,C('emit "sending" [request:%o]',r._request),r.emit("sending",{request:r._request}),o.send()}).catch(function(e){r._status!==k.STATUS_TERMINATED&&R(e)})}},{key:"_getDTMFRTPSender",value:function(){var e=this._connection.getSenders().find(function(e){return e.track&&"audio"===e.track.kind});if(e&&e.dtmf)return e.dtmf;R("sendDTMF() | no local audio track to send DTMF with")}},{key:"_receiveInviteResponse",value:function(e){var t=this;if(C("receiveInviteResponse()"),this._dialog&&e.status_code>=200&&e.status_code<=299){if(this._dialog.id.call_id===e.call_id&&this._dialog.id.local_tag===e.from_tag&&this._dialog.id.remote_tag===e.to_tag)return void this.sendRequest(d.ACK);var n=new g(this,e,"UAC");return void 0!==n.error?void C(n.error):(this.sendRequest(d.ACK),void this.sendRequest(d.BYE))}if(this._is_canceled)e.status_code>=100&&e.status_code<200?this._request.cancel(this._cancel_reason):e.status_code>=200&&e.status_code<299&&this._acceptAndTerminate(e);else if(this._status===k.STATUS_INVITE_SENT||this._status===k.STATUS_1XX_RECEIVED)switch(!0){case/^100$/.test(e.status_code):this._status=k.STATUS_1XX_RECEIVED;break;case/^1[0-9]{2}$/.test(e.status_code):if(!e.to_tag){C("1xx response received without to tag");break}if(e.hasHeader("contact")&&!this._createDialog(e,"UAC",!0))break;if(this._status=k.STATUS_1XX_RECEIVED,!e.body){this._progress("remote",e);break}var r={originator:"remote",type:"answer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",r);var o=new RTCSessionDescription({type:"answer",sdp:r.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(o)}).then(function(){return t._progress("remote",e)}).catch(function(e){R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)});break;case/^2[0-9]{2}$/.test(e.status_code):if(this._status=k.STATUS_CONFIRMED,!e.body){this._acceptAndTerminate(e,400,d.causes.MISSING_SDP),this._failed("remote",e,d.causes.BAD_MEDIA_DESCRIPTION);break}if(!this._createDialog(e,"UAC"))break;var s={originator:"remote",type:"answer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",s);var i=new RTCSessionDescription({type:"answer",sdp:s.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if("stable"===t._connection.signalingState)return t._connection.createOffer(t._rtcOfferConstraints).then(function(e){return t._connection.setLocalDescription(e)}).catch(function(n){t._acceptAndTerminate(e,500,n.toString()),t._failed("local",e,d.causes.WEBRTC_ERROR)})}).then(function(){t._connection.setRemoteDescription(i).then(function(){t._handleSessionTimersInIncomingResponse(e),t._accepted("remote",e),t.sendRequest(d.ACK),t._confirmed("local",null)}).catch(function(n){t._acceptAndTerminate(e,488,"Not Acceptable Here"),t._failed("remote",e,d.causes.BAD_MEDIA_DESCRIPTION),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n)})});break;default:var a=m.sipErrorCause(e.status_code);this._failed("remote",e,a)}}},{key:"_sendReinvite",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};C("sendReinvite()");var n=m.cloneArray(t.extraHeaders),r=m.cloneObject(t.eventHandlers),o=t.rtcOfferConstraints||this._rtcOfferConstraints||null,s=!1;function i(e){var t=this;if(this._status!==k.STATUS_TERMINATED&&(this.sendRequest(d.ACK),!s))if(this._handleSessionTimersInIncomingResponse(e),e.body)if(e.hasHeader("Content-Type")&&"application/sdp"===e.getHeader("Content-Type").toLowerCase()){var n={originator:"remote",type:"answer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",n);var o=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(o)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){a.call(t),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else a.call(this);else a.call(this)}function a(e){r.failed&&r.failed(e)}n.push("Contact: ".concat(this._contact)),n.push("Content-Type: application/sdp"),this._sessionTimers.running&&n.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(this._sessionTimers.refresher?"uac":"uas")),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",o)}).then(function(t){var r={originator:"local",type:"offer",sdp:t=e._mangleOffer(t)};C('emit "sdp"'),e.emit("sdp",r),e.sendRequest(d.INVITE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){i.call(e,t),s=!0},onErrorResponse:function(t){a.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){a()})}},{key:"_sendUpdate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};C("sendUpdate()");var n=m.cloneArray(t.extraHeaders),r=m.cloneObject(t.eventHandlers),o=t.rtcOfferConstraints||this._rtcOfferConstraints||null,s=t.sdpOffer||!1,i=!1;function a(e){var t=this;if(this._status!==k.STATUS_TERMINATED&&!i)if(this._handleSessionTimersInIncomingResponse(e),s){if(!e.body)return void u.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void u.call(this);var n={originator:"remote",type:"answer",sdp:e.body};C('emit "sdp"'),this.emit("sdp",n);var o=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(o)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){u.call(t),R('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else r.succeeded&&r.succeeded(e)}function u(e){r.failed&&r.failed(e)}n.push("Contact: ".concat(this._contact)),this._sessionTimers.running&&n.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(this._sessionTimers.refresher?"uac":"uas")),s?(n.push("Content-Type: application/sdp"),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",o)}).then(function(t){var r={originator:"local",type:"offer",sdp:t=e._mangleOffer(t)};C('emit "sdp"'),e.emit("sdp",r),e.sendRequest(d.UPDATE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){a.call(e,t),i=!0},onErrorResponse:function(t){u.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){u.call(e)})):this.sendRequest(d.UPDATE,{extraHeaders:n,eventHandlers:{onSuccessResponse:function(t){a.call(e,t)},onErrorResponse:function(t){u.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}},{key:"_acceptAndTerminate",value:function(e,t,n){C("acceptAndTerminate()");var r=[];t&&(n=n||d.REASON_PHRASE[t]||"",r.push("Reason: SIP ;cause=".concat(t,'; text="').concat(n,'"'))),(this._dialog||this._createDialog(e,"UAC"))&&(this.sendRequest(d.ACK),this.sendRequest(d.BYE,{extraHeaders:r})),this._status=k.STATUS_TERMINATED}},{key:"_mangleOffer",value:function(e){if(!this._localHold&&!this._remoteHold)return e;if(e=f.parse(e),this._localHold&&!this._remoteHold){C("mangleOffer() | me on hold, mangling offer");var t,n=o(e.media);try{for(n.s();!(t=n.n()).done;){var r=t.value;-1!==I.indexOf(r.type)&&(r.direction?"sendrecv"===r.direction?r.direction="sendonly":"recvonly"===r.direction&&(r.direction="inactive"):r.direction="sendonly")}}catch(e){n.e(e)}finally{n.f()}}else if(this._localHold&&this._remoteHold){C("mangleOffer() | both on hold, mangling offer");var s,i=o(e.media);try{for(i.s();!(s=i.n()).done;){var a=s.value;-1!==I.indexOf(a.type)&&(a.direction="inactive")}}catch(e){i.e(e)}finally{i.f()}}else if(this._remoteHold){C("mangleOffer() | remote on hold, mangling offer");var u,l=o(e.media);try{for(l.s();!(u=l.n()).done;){var c=u.value;-1!==I.indexOf(c.type)&&(c.direction?"sendrecv"===c.direction?c.direction="recvonly":"recvonly"===c.direction&&(c.direction="inactive"):c.direction="recvonly")}}catch(e){l.e(e)}finally{l.f()}}return f.write(e)}},{key:"_setLocalMediaStatus",value:function(){var e=!0,t=!0;(this._localHold||this._remoteHold)&&(e=!1,t=!1),this._audioMuted&&(e=!1),this._videoMuted&&(t=!1),this._toggleMuteAudio(!e),this._toggleMuteVideo(!t)}},{key:"_handleSessionTimersInIncomingRequest",value:function(e,t){var n;this._sessionTimers.enabled&&(e.session_expires&&e.session_expires>=d.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,n=e.session_expires_refresher||"uas"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,n="uas"),t.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(n)),this._sessionTimers.refresher="uas"===n,this._runSessionTimer())}},{key:"_handleSessionTimersInIncomingResponse",value:function(e){var t;this._sessionTimers.enabled&&(e.session_expires&&e.session_expires>=d.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,t=e.session_expires_refresher||"uac"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,t="uac"),this._sessionTimers.refresher="uac"===t,this._runSessionTimer())}},{key:"_runSessionTimer",value:function(){var e=this,t=this._sessionTimers.currentExpires;this._sessionTimers.running=!0,clearTimeout(this._sessionTimers.timer),this._sessionTimers.refresher?this._sessionTimers.timer=setTimeout(function(){e._status!==k.STATUS_TERMINATED&&(C("runSessionTimer() | sending session refresh request"),e._sessionTimers.refreshMethod===d.UPDATE?e._sendUpdate():e._sendReinvite())},500*t):this._sessionTimers.timer=setTimeout(function(){e._status!==k.STATUS_TERMINATED&&(R("runSessionTimer() | timer expired, terminating the session"),e.terminate({cause:d.causes.REQUEST_TIMEOUT,status_code:408,reason_phrase:"Session Timer Expired"}))},1100*t)}},{key:"_toggleMuteAudio",value:function(e){var t,n=o(this._connection.getSenders().filter(function(e){return e.track&&"audio"===e.track.kind}));try{for(n.s();!(t=n.n()).done;)t.value.track.enabled=!e}catch(e){n.e(e)}finally{n.f()}}},{key:"_toggleMuteVideo",value:function(e){var t,n=o(this._connection.getSenders().filter(function(e){return e.track&&"video"===e.track.kind}));try{for(n.s();!(t=n.n()).done;)t.value.track.enabled=!e}catch(e){n.e(e)}finally{n.f()}}},{key:"_newRTCSession",value:function(e,t){C("newRTCSession()"),this._ua.newRTCSession(this,{originator:e,session:this,request:t})}},{key:"_connecting",value:function(e){C("session connecting"),C('emit "connecting"'),this.emit("connecting",{request:e})}},{key:"_progress",value:function(e,t){C("session progress"),C('emit "progress"'),this.emit("progress",{originator:e,response:t||null})}},{key:"_accepted",value:function(e,t){C("session accepted"),this._start_time=new Date,C('emit "accepted"'),this.emit("accepted",{originator:e,response:t||null})}},{key:"_confirmed",value:function(e,t){C("session confirmed"),this._is_confirmed=!0,C('emit "confirmed"'),this.emit("confirmed",{originator:e,ack:t||null})}},{key:"_ended",value:function(e,t,n){C("session ended"),this._end_time=new Date,this._close(),C('emit "ended"'),this.emit("ended",{originator:e,message:t||null,cause:n})}},{key:"_failed",value:function(e,t,n){C("session failed"),C('emit "_failed"'),this.emit("_failed",{originator:e,message:t||null,cause:n}),this._close(),C('emit "failed"'),this.emit("failed",{originator:e,message:t||null,cause:n})}},{key:"_onhold",value:function(e){C("session onhold"),this._setLocalMediaStatus(),C('emit "hold"'),this.emit("hold",{originator:e})}},{key:"_onunhold",value:function(e){C("session onunhold"),this._setLocalMediaStatus(),C('emit "unhold"'),this.emit("unhold",{originator:e})}},{key:"_onmute",value:function(e){var t=e.audio,n=e.video;C("session onmute"),this._setLocalMediaStatus(),C('emit "muted"'),this.emit("muted",{audio:t,video:n})}},{key:"_onunmute",value:function(e){var t=e.audio,n=e.video;C("session onunmute"),this._setLocalMediaStatus(),C('emit "unmuted"'),this.emit("unmuted",{audio:t,video:n})}}])&&i(t.prototype,n),r&&i(t,r),l}()},function(e,t,n){"use strict";var r=n(2),o=n(4),s=n(0)("JsSIP:ERROR:Socket");s.log=console.warn.bind(console),t.isSocket=function(e){if(Array.isArray(e))return!1;if(void 0===e)return s("undefined JsSIP.Socket instance"),!1;try{if(!r.isString(e.url))throw s("missing or invalid JsSIP.Socket url property"),new Error;if(!r.isString(e.via_transport))throw s("missing or invalid JsSIP.Socket via_transport property"),new Error;if(-1===o.parse(e.sip_uri,"SIP_URI"))throw s("missing or invalid JsSIP.Socket sip_uri property"),new Error}catch(e){return!1}try{["connect","disconnect","send"].forEach(function(t){if(!r.isFunction(e[t]))throw s("missing or invalid JsSIP.Socket method: ".concat(t)),new Error})}catch(e){return!1}return!0}},function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=n(47),u=n(66),l=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).client.defaults.baseURL+="/api",n}var n,r,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(t,a),n=t,(r=[{key:"v1",value:function(){return new u(this.client)}}])&&o(n.prototype,r),l&&o(n,l),t}();e.exports=l},function(e,t,n){var r=n(48);e.exports=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=r.create(t)}},function(e,t,n){e.exports=n(49)},function(e,t,n){"use strict";var r=n(3),o=n(19),s=n(50),i=n(26);function a(e){var t=new s(e),n=o(s.prototype.request,t);return r.extend(n,s.prototype,t),r.extend(n,t),n}var u=a(n(22));u.Axios=s,u.create=function(e){return a(i(u.defaults,e))},u.Cancel=n(27),u.CancelToken=n(63),u.isCancel=n(21),u.all=function(e){return Promise.all(e)},u.spread=n(64),u.isAxiosError=n(65),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(3),o=n(20),s=n(51),i=n(52),a=n(26);function u(e){this.defaults=e,this.interceptors={request:new s,response:new s}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],function(e){u.prototype[e]=function(t,n){return this.request(a(n||{},{method:e,url:t,data:(n||{}).data}))}}),r.forEach(["post","put","patch"],function(e){u.prototype[e]=function(t,n,r){return this.request(a(r||{},{method:e,url:t,data:n}))}}),e.exports=u},function(e,t,n){"use strict";var r=n(3);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(3),o=n(53),s=n(21),i=n(22);function a(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return a(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return a(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(a(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(3);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(59),o=n(60);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(3),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,i={};return e?(r.forEach(e.split("\n"),function(e){if(s=e.indexOf(":"),t=r.trim(e.substr(0,s)).toLowerCase(),n=r.trim(e.substr(s+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(3);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(27);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(67),s=n(87),i=n(88),a=n(89),u=n(90),l=n(91),c=n(110),h=n(111),f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t,this.client.defaults.baseURL+="/v1"}var t,n,f;return t=e,(n=[{key:"withAuth",value:function(e){return this.token=e,this.client.defaults.headers.common.Authorization="Bearer ".concat(e),this}},{key:"socket",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.socketio=o(e,{transports:["websocket"],query:{token:this.token,extension:t},forceNew:!0}),this}},{key:"websocket",value:function(e){return this.ws=new h("".concat(e,"?token=").concat(this.token)),this}},{key:"isJwtToken",value:function(e){return 60!==e.length}},{key:"agent",value:function(){return new s(this.client)}},{key:"user",value:function(){return new i(this.client)}},{key:"call",value:function(){return new u(this.client)}},{key:"workBreaks",value:function(){return new a(this.client)}},{key:"realtime",value:function(){return new l(this.socketio)}},{key:"events",value:function(){return new c(this.ws)}}])&&r(t.prototype,n),f&&r(t,f),e}();e.exports=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=t.io=t.Manager=t.protocol=void 0;const r=n(68),o=n(29),s=n(36);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return s.Socket}});const i=n(0)("socket.io-client");e.exports=t=u;const a=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=r.url(e,t.path),s=n.source,u=n.id,l=n.path,c=a[u]&&l in a[u].nsps;let h;return t.forceNew||t["force new connection"]||!1===t.multiplex||c?(i("ignoring socket cache for %s",s),h=new o.Manager(s,t)):(a[u]||(i("new io instance for %s",s),a[u]=new o.Manager(s,t)),h=a[u]),n.query&&!t.query&&(t.query=n.queryKey),h.socket(n.path,t)}t.io=u;var l=n(17);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return l.protocol}}),t.connect=u;var c=n(29);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return c.Manager}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const r=n(28),o=n(0)("socket.io-client:url");t.url=function(e,t="",n){let s=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),s=r(e)),s.port||(/^(http|ws)$/.test(s.protocol)?s.port="80":/^(http|ws)s$/.test(s.protocol)&&(s.port="443")),s.path=s.path||"/";const i=-1!==s.host.indexOf(":")?"["+s.host+"]":s.host;return s.id=s.protocol+"://"+i+":"+s.port+t,s.href=s.protocol+"://"+i+(n&&n.port===s.port?"":":"+s.port),s}},function(e,t,n){var r;function o(e){function n(){if(n.enabled){var e=n,o=+new Date,s=o-(r||o);e.diff=s,e.prev=r,e.curr=o,r=o;for(var i=new Array(arguments.length),a=0;a<i.length;a++)i[a]=arguments[a];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var u=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var s=i[u];n=o.call(e,s),i.splice(u,1),u--}return n}),t.formatArgs.call(e,i),(n.log||t.log||console.log.bind(console)).apply(e,i)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),"function"==typeof t.init&&t.init(n),n}(t=e.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length,o=0;o<r;o++)n[o]&&("-"===(e=n[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(70),t.names=[],t.skips=[],t.formatters={}},function(e,t){var n=1e3,r=60*n,o=60*r,s=24*o,i=7*s,a=365.25*s;function u(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var l=typeof e;if("string"===l&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var u=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*i;case"days":case"day":case"d":return u*s;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(e);if("number"===l&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return u(e,t,s,"day");if(t>=o)return u(e,t,o,"hour");if(t>=r)return u(e,t,r,"minute");if(t>=n)return u(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const r=n(72);e.exports=(e,t)=>new r(e,t),e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n(14),e.exports.transports=n(30),e.exports.parser=n(9)},function(e,t,n){const r=n(30),o=n(10),s=n(0)("engine.io-client:socket"),i=n(9),a=n(28),u=n(15);class l extends o{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=a(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=a(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=u.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(addEventListener("beforeunload",()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){s('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=i.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return s("options: %j",n),new r[e](n)}open(){let e;if(this.opts.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){const e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return s("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){s("setting transport %s",e.name);const t=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})}probe(e){s('probing transport "%s"',e);let t=this.createTransport(e,{probe:1}),n=!1;const r=this;function o(){if(r.onlyBinaryUpgrades){const e=!this.supportsBinary&&r.transport.supportsBinary;n=n||e}n||(s('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(s('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;l.priorWebsocketSuccess="websocket"===t.name,s('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(s("changing transport and sending upgrade packet"),f(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{s('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,r.emit("upgradeError",n)}}))}function i(){n||(n=!0,f(),t.close(),t=null)}function a(n){const o=new Error("probe error: "+n);o.transport=t.name,i(),s('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){a("transport closed")}function c(){a("socket closed")}function h(e){t&&e.name!==t.name&&(s('"%s" works - aborting "%s"',e.name,t.name),i())}function f(){t.removeListener("open",o),t.removeListener("error",a),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",h)}l.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",a),t.once("close",u),this.once("close",c),this.once("upgrading",h),t.open()}onOpen(){if(s("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){s("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else s('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout(()=>{this.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=this;function t(){e.onClose("forced close"),s("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()),this}onError(e){s("socket error %j",e),l.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}onClose(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',e);const n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",e,t),n.writeBuffer=[],n.prevBufferLen=0}}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}l.priorWebsocketSuccess=!1,l.protocol=i.protocol,e.exports=l},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){const r=n(31),o=n(32),s=n(10),{pick:i}=n(35),a=n(12),u=n(0)("engine.io-client:polling-xhr");function l(){}const c=null!=new r({xdomain:!1}).responseType;class h extends s{constructor(e,t){super(),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=i(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new r(e),n=this;try{u("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout(function(){n.onError("number"==typeof t.status?t.status:0)},0))},u("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout(function(){n.onError(e)},0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}if(h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){addEventListener("onpagehide"in a?"pagehide":"unload",f,!1)}function f(){for(let e in h.requests)h.requests.hasOwnProperty(e)&&h.requests[e].abort()}e.exports=class extends o{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=c&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new h(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e}),r=this;n.on("success",t),n.on("error",function(e){r.onError("xhr post error",e)})}doPoll(){u("xhr poll");const e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e}},e.exports.Request=h},function(e,t,n){const{PACKET_TYPES:r}=n(33),o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),s="function"==typeof ArrayBuffer,i=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=({type:e,data:t},n,a)=>o&&t instanceof Blob?n?a(t):i(t,a):s&&(t instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer)(t))?n?a(t instanceof ArrayBuffer?t:t.buffer):i(new Blob([t]),a):a(r[e]+(t||""))},function(e,t,n){const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:o}=n(33);let s;"function"==typeof ArrayBuffer&&(s=n(77));const i=(e,t)=>{if(s){const n=s.decode(e);return a(n,t)}return{base64:!0,data:e}},a=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:i(e.substring(1),t)}:r[n]?e.length>1?{type:r[n],data:e.substring(1)}:{type:r[n]}:o}},function(e,t){!function(e){"use strict";t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,s="";for(n=0;n<o;n+=3)s+=e[r[n]>>2],s+=e[(3&r[n])<<4|r[n+1]>>4],s+=e[(15&r[n+1])<<2|r[n+2]>>6],s+=e[63&r[n+2]];return o%3==2?s=s.substring(0,s.length-1)+"=":o%3==1&&(s=s.substring(0,s.length-2)+"=="),s},t.decode=function(t){var n,r,o,s,i,a=.75*t.length,u=t.length,l=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var c=new ArrayBuffer(a),h=new Uint8Array(c);for(n=0;n<u;n+=4)r=e.indexOf(t[n]),o=e.indexOf(t[n+1]),s=e.indexOf(t[n+2]),i=e.indexOf(t[n+3]),h[l++]=r<<2|o>>4,h[l++]=(15&o)<<4|s>>2,h[l++]=(3&s)<<6|63&i;return c}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},function(e,t,n){const r=n(32),o=n(12),s=/\n/g,i=/\\n/g;let a;e.exports=class extends r{constructor(e){super(e),this.query=this.query||{},a||(a=o.___eio=o.___eio||[]),this.index=a.length;const t=this;a.push(function(e){t.onData(e)}),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};const n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){const e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)}doWrite(e,t){const n=this;let r;if(!this.form){const e=document.createElement("form"),t=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;e.className="socketio",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.target=n,e.method="POST",e.setAttribute("accept-charset","utf-8"),t.name="d",e.appendChild(t),document.body.appendChild(e),this.form=e,this.area=t}function o(){a(),t()}function a(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{const e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),a(),e=e.replace(i,"\\\n"),this.area.value=e.replace(s,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&o()}:this.iframe.onload=o}}},function(e,t,n){(function(t){const r=n(14),o=n(9),s=n(15),i=n(34),{pick:a}=n(35),{WebSocket:u,usingBrowserWebSocket:l,defaultBinaryType:c}=n(84),h=n(0)("engine.io-client:websocket"),f="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class d extends r{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=f?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=l&&!f?t?new u(e,t):new u(e):new u(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){const n=this;this.writable=!1;let r=e.length,s=0;const i=r;for(;s<i;s++)!function(e){o.encodePacket(e,n.supportsBinary,function(o){const s={};if(!l&&(e.options&&(s.compress=e.options.compress),n.opts.perMessageDeflate)){("string"==typeof o?t.byteLength(o):o.length)<n.opts.perMessageDeflate.threshold&&(s.compress=!1)}try{l?n.ws.send(o):n.ws.send(o,s)}catch(e){h("websocket closed before onclose event")}--r||a()})}(e[s]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||(e.b64=1),(e=s.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}check(){return!(!u||"__initialize"in u&&this.name===d.prototype.name)}}e.exports=d}).call(this,n(80).Buffer)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(81),o=n(82),s=n(83);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return l(this,e,t,n)}function l(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),o=(e=a(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):f(e,t);if("Buffer"===t.type&&s(t.data))return f(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(c(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|d(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(e).length;default:if(r)return B(e).length;t=(""+t).toLowerCase(),r=!0}}function _(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return C(this,t,n);case"ascii":return k(this,t,n);case"latin1":case"binary":return I(this,t,n);case"base64":return w(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,o){var s,i=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,n/=2}function l(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var c=-1;for(s=n;s<a;s++)if(l(e,s)===l(t,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*i}else-1!==c&&(s-=s-c),c=-1}else for(n+u>a&&(n=a-u),s=n;s>=0;s--){for(var h=!0,f=0;f<u;f++)if(l(e,s+f)!==l(t,f)){h=!1;break}if(h)return s}return-1}function g(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var i=0;i<r;++i){var a=parseInt(t.substr(2*i,2),16);if(isNaN(a))return i;e[n+i]=a}return i}function T(e,t,n,r){return Y(B(t,e.length-n),e,n,r)}function b(e,t,n,r){return Y(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function E(e,t,n,r){return b(e,t,n,r)}function S(e,t,n,r){return Y(F(t),e,n,r)}function A(e,t,n,r){return Y(function(e,t){for(var n,r,o,s=[],i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),r=n>>8,o=n%256,s.push(o),s.push(r);return s}(t,e.length-n),e,n,r)}function w(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function C(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var s,i,a,u,l=e[o],c=null,h=l>239?4:l>223?3:l>191?2:1;if(o+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(s=e[o+1]))&&(u=(31&l)<<6|63&s)>127&&(c=u);break;case 3:s=e[o+1],i=e[o+2],128==(192&s)&&128==(192&i)&&(u=(15&l)<<12|(63&s)<<6|63&i)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:s=e[o+1],i=e[o+2],a=e[o+3],128==(192&s)&&128==(192&i)&&128==(192&a)&&(u=(15&l)<<18|(63&s)<<12|(63&i)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=h}return function(e){var t=e.length;if(t<=R)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=R));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,s=Math.min(n,r);o<s;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var i=e[n];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,o),o+=i.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):_.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0),a=Math.min(s,i),l=this.slice(r,o),c=e.slice(t,n),h=0;h<a;++h)if(l[h]!==c[h]){s=l[h],i=c[h];break}return s<i?-1:i<s?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return T(this,e,t,n);case"ascii":return b(this,e,t,n);case"latin1":case"binary":return E(this,e,t,n);case"base64":return S(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function k(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function I(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",s=t;s<n;++s)o+=H(e[s]);return o}function N(e,t,n){for(var r=e.slice(t,n),o="",s=0;s<r.length;s+=2)o+=String.fromCharCode(r[s]+256*r[s+1]);return o}function x(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,n,r,o,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function D(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,s=Math.min(e.length-n,2);o<s;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,s=Math.min(e.length-n,4);o<s;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function M(e,t,n,r,o,s){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(e,t,n,r,s){return s||M(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function q(e,t,n,r,s){return s||M(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var r=this[e],o=1,s=0;++s<t&&(o*=256);)r+=this[e+s]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||x(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||x(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||x(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||x(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||x(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var r=this[e],o=1,s=0;++s<t&&(o*=256);)r+=this[e+s]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var r=t,o=1,s=this[e+--r];r>0&&(o*=256);)s+=this[e+--r]*o;return s>=(o*=128)&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return t||x(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||x(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||x(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||x(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||x(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||x(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||x(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||x(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||x(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,s=0;for(this[t]=255&e;++s<n&&(o*=256);)this[t+s]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,s=1;for(this[t+o]=255&e;--o>=0&&(s*=256);)this[t+o]=e/s&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var s=0,i=1,a=0;for(this[t]=255&e;++s<n&&(i*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/i>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var s=n-1,i=1,a=0;for(this[t+s]=255&e;--s>=0&&(i*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/i>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return q(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return q(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,s=r-n;if(this===e&&n<t&&t<r)for(o=s-1;o>=0;--o)e[o+t]=this[o+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var i=u.isBuffer(e)?e:B(new u(e,r).toString()),a=i.length;for(s=0;s<n-t;++s)this[s+t]=i[s%a]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function H(e){return e<16?"0"+e.toString(16):e.toString(16)}function B(e,t){var n;t=t||1/0;for(var r=e.length,o=null,s=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&s.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&s.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function F(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(16))},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=l(e),i=r[0],a=r[1],u=new s(function(e,t,n){return 3*(t+n)/4-n}(0,i,a)),c=0,h=a>0?i-4:i;for(n=0;n<h;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===a&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,u[c++]=255&t);1===a&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,s=[],i=0,a=n-o;i<a;i+=16383)s.push(c(e,i,i+16383>a?a:i+16383));1===o?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],o=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=i.length;a<u;++a)r[a]=i[a],o[i.charCodeAt(a)]=a;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var o,s,i=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(r[(s=o)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var s,i,a=8*o-r-1,u=(1<<a)-1,l=u>>1,c=-7,h=n?o-1:0,f=n?-1:1,d=e[t+h];for(h+=f,s=d&(1<<-c)-1,d>>=-c,c+=a;c>0;s=256*s+e[t+h],h+=f,c-=8);for(i=s&(1<<-c)-1,s>>=-c,c+=r;c>0;i=256*i+e[t+h],h+=f,c-=8);if(0===s)s=1-l;else{if(s===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),s-=l}return(d?-1:1)*i*Math.pow(2,s-r)},t.write=function(e,t,n,r,o,s){var i,a,u,l=8*s-o-1,c=(1<<l)-1,h=c>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:s-1,p=r?1:-1,_=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=c?(a=0,i=c):i+h>=1?(a=(t*u-1)*Math.pow(2,o),i+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),i=0));o>=8;e[n+d]=255&a,d+=p,a/=256,o-=8);for(i=i<<o|a,l+=o;l>0;e[n+d]=255&i,d+=p,i/=256,l-=8);e[n+d-p]|=128*_}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){const r=n(12);e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(37);t.deconstructPacket=function(e){const t=[],n=e.data,o=e;return o.data=function e(t,n){if(!t)return t;if(r.isBinary(t)){const e={_placeholder:!0,num:n.length};return n.push(t),e}if(Array.isArray(t)){const r=new Array(t.length);for(let o=0;o<t.length;o++)r[o]=e(t[o],n);return r}if("object"==typeof t&&!(t instanceof Date)){const r={};for(const o in t)t.hasOwnProperty(o)&&(r[o]=e(t[o],n));return r}return t}(n,t),o.attachments=t.length,{packet:o,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(Array.isArray(t))for(let r=0;r<t.length;r++)t[r]=e(t[r],n);else if("object"==typeof t)for(const r in t)t.hasOwnProperty(r)&&(t[r]=e(t[r],n));return t}(e.data,t),e.attachments=void 0,e}},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){function n(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,s,i;return t=e,(s=[{key:"calls",value:function(e){return this.client.get("/agent/calls",e)}},{key:"login",value:function(e){return this.client.post("/agent/login",e)}},{key:"loginManual",value:function(e){return this.login(function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(o,!0).forEach(function(t){r(e,t,o[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(o).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))})}return e}({},e,{},{mode:"manual"}))}},{key:"loginWebphone",value:function(e){return this.client.post("/agent/webphone/login",e)}},{key:"logout",value:function(){return this.client.post("/agent/logout")}},{key:"connect",value:function(){return this.client.post("/agent/connect")}},{key:"campaigns",value:function(e){return this.client.get("/agent/campaigns",e)}},{key:"qualifyCall",value:function(e,t){return this.client.post("/agent/call/"+e+"/qualify",t)}},{key:"hangupCall",value:function(e){return this.client.post("/agent/call/"+e+"/hangup")}},{key:"enterManualCallMode",value:function(){return this.client.post("/agent/manual_call/enter")}},{key:"exitManualCallMode",value:function(){return this.client.post("/agent/manual_call/exit")}},{key:"enterManualCallAcwMode",value:function(){return this.client.post("/agent/manual_call_acw/enter")}},{key:"exitManualCallAcwMode",value:function(){return this.client.post("/agent/manual_call_acw/exit")}},{key:"dialManualCall",value:function(e){return this.client.post("/agent/manual_call/dial",e)}},{key:"dialManualCallAcw",value:function(e){return this.client.post("/agent/manual_call_acw/dial",e)}}])&&o(t.prototype,s),i&&o(t,i),e}();e.exports=s},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,o;return t=e,(r=[{key:"me",value:function(){return this.client.get("/me")}},{key:"authenticate",value:function(e){return this.client.post("/authenticate",e)}},{key:"webphoneAuthenticate",value:function(e){return this.client.post("/webphone-authenticate",e)}}])&&n(t.prototype,r),o&&n(t,o),e}();e.exports=r},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,o;return t=e,(r=[{key:"workBreakGroups",value:function(e){return this.client.get("/work_break_group",e)}},{key:"createWorkBreakGroup",value:function(e){return this.client.post("/work_break_group",e)}},{key:"deleteWorkBreakGroup",value:function(e){return this.client.delete("/work_break_group/".concat(e))}},{key:"updateWorkBreakGroup",value:function(e,t){return this.client.put("/work_break_group/".concat(e),t)}},{key:"workBreakGroupIntervals",value:function(e,t){return this.client.get("/work_break_group/".concat(e,"/intervals"),t)}},{key:"createWorkBreakGroupInterval",value:function(e,t){return this.client.post("/work_break_group/".concat(e,"/intervals"),t)}},{key:"updateWorkBreakGroupInterval",value:function(e,t,n){return this.client.put("/work_break_group/".concat(e,"/intervals/").concat(t),n)}},{key:"deleteWorkBreakGroupInterval",value:function(e,t){return this.client.delete("/work_break_group/".concat(e,"/intervals/").concat(t))}}])&&n(t.prototype,r),o&&n(t,o),e}();e.exports=r},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=t}var t,r,o;return t=e,(r=[{key:"history",value:function(e){return this.client.get("/calls",e)}},{key:"historyByID",value:function(e){return this.client.get("/calls/".concat(e))}},{key:"download",value:function(e,t,n,r){return this.client.get("/records/".concat(e,"/").concat(t,"/").concat(n,"/").concat(r))}}])&&n(t.prototype,r),o&&n(t,o),e}();e.exports=r},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(92),s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.socket=t}var t,n,s;return t=e,(n=[{key:"integration",value:function(){return this.socket}},{key:"extension",value:function(e){var t="wss://"+e.host+":"+e.port,n={sockets:[new o.WebSocketInterface(t)],register:!0,register_expires:30,session_timers:!1,uri:"sip:"+e.user+"@"+e.host,password:e.password};return new o.UA(n)}}])&&r(t.prototype,n),s&&r(t,s),e}();e.exports=s},function(e,t,n){"use strict";var r=n(40),o=n(1),s=n(7),i=n(2),a=n(93),u=n(8),l=n(18),c=n(4),h=n(109);n(0)("JsSIP")("version %s",r.version),e.exports={C:o,Exceptions:s,Utils:i,UA:a,URI:u,NameAddrHeader:l,WebSocketInterface:h,Grammar:c,debug:n(0),get name(){return r.title},get version(){return r.version}}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=n(5).EventEmitter,h=n(1),f=n(94),d=n(44),p=n(104),_=n(11),m=n(105),v=n(2),y=n(7),g=n(8),T=n(106),b=n(6),E=n(107),S=n(108),A=n(0)("JsSIP:UA"),w=n(0)("JsSIP:ERROR:UA");w.log=console.warn.bind(console);var C={STATUS_INIT:0,STATUS_READY:1,STATUS_USER_CLOSED:2,STATUS_NOT_READY:3,CONFIGURATION_ERROR:1,NETWORK_ERROR:2};function R(e){this.emit("connecting",e)}function k(e){this._status!==C.STATUS_USER_CLOSED&&(this._status=C.STATUS_READY,this._error=null,this.emit("connected",e),this._dynConfiguration.register&&this._registrator.register())}function I(e){for(var t=0,n=["nict","ict","nist","ist"];t<n.length;t++){var r=n[t];for(var o in this._transactions[r])Object.prototype.hasOwnProperty.call(this._transactions[r],o)&&this._transactions[r][o].onTransportError()}this.emit("disconnected",e),this._registrator.onTransportClosed(),this._status!==C.STATUS_USER_CLOSED&&(this._status=C.STATUS_NOT_READY,this._error=C.NETWORK_ERROR)}function O(e){var t=e.transport,n=e.message;if((n=T.parseMessage(n,this))&&!(this._status===C.STATUS_USER_CLOSED&&n instanceof b.IncomingRequest)&&E(n,this,t))if(n instanceof b.IncomingRequest)n.transport=t,this.receiveRequest(n);else if(n instanceof b.IncomingResponse){var r;switch(n.method){case h.INVITE:(r=this._transactions.ict[n.via_branch])&&r.receiveResponse(n);break;case h.ACK:break;default:(r=this._transactions.nict[n.via_branch])&&r.receiveResponse(n)}}}e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(l,c);var t,n,r,a=i(l);function l(e){var t;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),A("new() [configuration:%o]",e),(t=a.call(this))._cache={credentials:{}},t._configuration=Object.assign({},S.settings),t._dynConfiguration={},t._dialogs={},t._applicants={},t._sessions={},t._transport=null,t._contact=null,t._status=C.STATUS_INIT,t._error=null,t._transactions={nist:{},nict:{},ist:{},ict:{}},t._data={},t._closeTimer=null,void 0===e)throw new TypeError("Not enough arguments");try{t._loadConfig(e)}catch(e){throw t._status=C.STATUS_NOT_READY,t._error=C.CONFIGURATION_ERROR,e}return t._registrator=new f(u(t)),t}return t=l,r=[{key:"C",get:function(){return C}}],(n=[{key:"C",get:function(){return C}},{key:"status",get:function(){return this._status}},{key:"contact",get:function(){return this._contact}},{key:"configuration",get:function(){return this._configuration}},{key:"transport",get:function(){return this._transport}},{key:"start",value:function(){A("start()"),this._status===C.STATUS_INIT?this._transport.connect():this._status===C.STATUS_USER_CLOSED?(A("restarting UA"),null!==this._closeTimer&&(clearTimeout(this._closeTimer),this._closeTimer=null,this._transport.disconnect()),this._status=C.STATUS_INIT,this._transport.connect()):this._status===C.STATUS_READY?A("UA is in READY status, not restarted"):A("ERROR: connection is down, Auto-Recovery system is trying to reconnect"),this._dynConfiguration.register=this._configuration.register}},{key:"register",value:function(){A("register()"),this._dynConfiguration.register=!0,this._registrator.register()}},{key:"unregister",value:function(e){A("unregister()"),this._dynConfiguration.register=!1,this._registrator.unregister(e)}},{key:"registrator",value:function(){return this._registrator}},{key:"isRegistered",value:function(){return this._registrator.registered}},{key:"isConnected",value:function(){return this._transport.isConnected()}},{key:"call",value:function(e,t){A("call()");var n=new d(this);return n.connect(e,t),n}},{key:"sendMessage",value:function(e,t,n){A("sendMessage()");var r=new p(this);return r.send(e,t,n),r}},{key:"terminateSessions",value:function(e){for(var t in A("terminateSessions()"),this._sessions)this._sessions[t].isEnded()||this._sessions[t].terminate(e)}},{key:"stop",value:function(){var e=this;if(A("stop()"),this._dynConfiguration={},this._status!==C.STATUS_USER_CLOSED){this._registrator.close();var t=Object.keys(this._sessions).length;for(var n in this._sessions)if(Object.prototype.hasOwnProperty.call(this._sessions,n)){A("closing session ".concat(n));try{this._sessions[n].terminate()}catch(e){}}for(var r in this._applicants)if(Object.prototype.hasOwnProperty.call(this._applicants,r))try{this._applicants[r].close()}catch(e){}this._status=C.STATUS_USER_CLOSED,0===Object.keys(this._transactions.nict).length+Object.keys(this._transactions.nist).length+Object.keys(this._transactions.ict).length+Object.keys(this._transactions.ist).length&&0===t?this._transport.disconnect():this._closeTimer=setTimeout(function(){e._closeTimer=null,e._transport.disconnect()},2e3)}else A("UA already closed")}},{key:"normalizeTarget",value:function(e){return v.normalizeTarget(e,this._configuration.hostport_params)}},{key:"get",value:function(e){switch(e){case"authorization_user":return this._configuration.authorization_user;case"realm":return this._configuration.realm;case"ha1":return this._configuration.ha1;case"authorization_jwt":return this._configuration.authorization_jwt;default:return void w('get() | cannot get "%s" parameter in runtime',e)}}},{key:"set",value:function(e,t){switch(e){case"authorization_user":this._configuration.authorization_user=String(t);break;case"password":this._configuration.password=String(t);break;case"realm":this._configuration.realm=String(t);break;case"ha1":this._configuration.ha1=String(t),this._configuration.password=null;break;case"authorization_jwt":this._configuration.authorization_jwt=String(t);break;case"display_name":this._configuration.display_name=t;break;default:return w('set() | cannot set "%s" parameter in runtime',e),!1}return!0}},{key:"newTransaction",value:function(e){this._transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})}},{key:"destroyTransaction",value:function(e){delete this._transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})}},{key:"newDialog",value:function(e){this._dialogs[e.id]=e}},{key:"destroyDialog",value:function(e){delete this._dialogs[e.id]}},{key:"newMessage",value:function(e,t){this._applicants[e]=e,this.emit("newMessage",t)}},{key:"destroyMessage",value:function(e){delete this._applicants[e]}},{key:"newRTCSession",value:function(e,t){this._sessions[e.id]=e,this.emit("newRTCSession",t)}},{key:"destroyRTCSession",value:function(e){delete this._sessions[e.id]}},{key:"registered",value:function(e){this.emit("registered",e)}},{key:"unregistered",value:function(e){this.emit("unregistered",e)}},{key:"registrationFailed",value:function(e){this.emit("registrationFailed",e)}},{key:"receiveRequest",value:function(e){var t=e.method;if(e.ruri.user!==this._configuration.uri.user&&e.ruri.user!==this._contact.uri.user)return A("Request-URI does not point to us"),void(e.method!==h.ACK&&e.reply_sl(404));if(e.ruri.scheme!==h.SIPS){if(!_.checkTransaction(this,e)){if(t===h.INVITE?new _.InviteServerTransaction(this,this._transport,e):t!==h.ACK&&t!==h.CANCEL&&new _.NonInviteServerTransaction(this,this._transport,e),t===h.OPTIONS)e.reply(200);else if(t===h.MESSAGE){if(0===this.listeners("newMessage").length)return void e.reply(405);new p(this).init_incoming(e)}else if(t===h.INVITE&&!e.to_tag&&0===this.listeners("newRTCSession").length)return void e.reply(405);var n,r;if(e.to_tag)(n=this._findDialog(e.call_id,e.from_tag,e.to_tag))?n.receiveRequest(e):t===h.NOTIFY?(r=this._findSession(e))?r.receiveRequest(e):(A("received NOTIFY request for a non existent subscription"),e.reply(481,"Subscription does not exist")):t!==h.ACK&&e.reply(481);else switch(t){case h.INVITE:if(window.RTCPeerConnection)if(e.hasHeader("replaces")){var o=e.replaces;(n=this._findDialog(o.call_id,o.from_tag,o.to_tag))?(r=n.owner).isEnded()?e.reply(603):r.receiveRequest(e):e.reply(481)}else(r=new d(this)).init_incoming(e);else w("INVITE received but WebRTC is not supported"),e.reply(488);break;case h.BYE:e.reply(481);break;case h.CANCEL:(r=this._findSession(e))?r.receiveRequest(e):A("received CANCEL request for a non existent session");break;case h.ACK:break;case h.NOTIFY:this.emit("sipEvent",{event:e.event,request:e}),e.reply(200);break;default:e.reply(405)}}}else e.reply_sl(416)}},{key:"_findSession",value:function(e){var t=e.call_id,n=e.from_tag,r=e.to_tag,o=t+n,s=this._sessions[o],i=t+r,a=this._sessions[i];return s||a||null}},{key:"_findDialog",value:function(e,t,n){var r=e+t+n,o=this._dialogs[r];return o||(r=e+n+t,(o=this._dialogs[r])||null)}},{key:"_loadConfig",value:function(e){try{S.load(this._configuration,e)}catch(e){throw e}0===this._configuration.display_name&&(this._configuration.display_name="0"),this._configuration.instance_id||(this._configuration.instance_id=v.newUUID()),this._configuration.jssip_id=v.createRandomToken(5);var t=this._configuration.uri.clone();t.user=null,this._configuration.hostport_params=t.toString().replace(/^sip:/i,"");try{this._transport=new m(this._configuration.sockets,{max_interval:this._configuration.connection_recovery_max_interval,min_interval:this._configuration.connection_recovery_min_interval}),this._transport.onconnecting=R.bind(this),this._transport.onconnect=k.bind(this),this._transport.ondisconnect=I.bind(this),this._transport.ondata=O.bind(this)}catch(e){throw w(e),new y.ConfigurationError("sockets",this._configuration.sockets)}if(delete this._configuration.sockets,this._configuration.authorization_user||(this._configuration.authorization_user=this._configuration.uri.user),!this._configuration.registrar_server){var n=this._configuration.uri.clone();n.user=null,n.clearParams(),n.clearHeaders(),this._configuration.registrar_server=n}this._configuration.no_answer_timeout*=1e3,this._configuration.contact_uri?this._configuration.via_host=this._configuration.contact_uri.host:this._configuration.contact_uri=new g("sip",v.createRandomToken(8),this._configuration.via_host,null,{transport:"ws"}),this._contact={pub_gruu:null,temp_gruu:null,uri:this._configuration.contact_uri,toString:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.anonymous||null,n=e.outbound||null,r="<";return r+=t?this.temp_gruu||"sip:anonymous@anonymous.invalid;transport=ws":this.pub_gruu||this.uri.toString(),!n||(t?this.temp_gruu:this.pub_gruu)||(r+=";ob"),r+=">"}};var r=["authorization_user","password","realm","ha1","authorization_jwt","display_name","register"];for(var o in this._configuration)Object.prototype.hasOwnProperty.call(this._configuration,o)&&(-1!==r.indexOf(o)?Object.defineProperty(this._configuration,o,{writable:!0,configurable:!1}):Object.defineProperty(this._configuration,o,{writable:!1,configurable:!1}));for(var s in A("configuration parameters after validation:"),this._configuration)if(Object.prototype.hasOwnProperty.call(S.settings,s))switch(s){case"uri":case"registrar_server":A("- ".concat(s,": ").concat(this._configuration[s]));break;case"password":case"ha1":case"authorization_jwt":A("- ".concat(s,": NOT SHOWN"));break;default:A("- ".concat(s,": ").concat(JSON.stringify(this._configuration[s])))}}}])&&o(t.prototype,n),r&&o(t,r),l}()},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(2),s=n(1),i=n(6),a=n(13),u=n(0)("JsSIP:Registrator");e.exports=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this._ua=t,this._transport=n,this._registrar=t.configuration.registrar_server,this._expires=t.configuration.register_expires,this._call_id=o.createRandomToken(22),this._cseq=0,this._to_uri=t.configuration.uri,this._registrationTimer=null,this._registering=!1,this._registered=!1,this._contact=this._ua.contact.toString(),this._contact+=";+sip.ice",this._extraHeaders=[],this._extraContactParams="",this._contact+=";reg-id=".concat(1),this._contact+=';+sip.instance="<urn:uuid:'.concat(this._ua.configuration.instance_id,'>"')}var t,n,l;return t=e,(n=[{key:"registered",get:function(){return this._registered}},{key:"setExtraHeaders",value:function(e){Array.isArray(e)||(e=[]),this._extraHeaders=e.slice()}},{key:"setExtraContactParams",value:function(e){for(var t in e instanceof Object||(e={}),this._extraContactParams="",e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=e[t];this._extraContactParams+=";".concat(t),n&&(this._extraContactParams+="=".concat(n))}}},{key:"register",value:function(){var e=this;if(this._registering)u("Register request in progress...");else{var t=this._extraHeaders.slice();t.push("Contact: ".concat(this._contact,";expires=").concat(this._expires).concat(this._extraContactParams)),t.push("Expires: ".concat(this._expires));var n=new i.OutgoingRequest(s.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},t),r=new a(this._ua,n,{onRequestTimeout:function(){e._registrationFailure(null,s.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._registrationFailure(null,s.causes.CONNECTION_ERROR)},onAuthenticated:function(){e._cseq+=1},onReceiveResponse:function(t){if(t.cseq===e._cseq)switch(null!==e._registrationTimer&&(clearTimeout(e._registrationTimer),e._registrationTimer=null),!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):if(e._registering=!1,!t.hasHeader("Contact")){u("no Contact header in response to REGISTER, response ignored");break}var n=t.headers.Contact.reduce(function(e,t){return e.concat(t.parsed)},[]).find(function(t){return t.uri.user===e._ua.contact.uri.user});if(!n){u("no Contact header pointing to us, response ignored");break}var r=n.getParam("expires");!r&&t.hasHeader("expires")&&(r=t.getHeader("expires")),r||(r=e._expires),(r=Number(r))<10&&(r=10);var i=r>64?1e3*r/2+Math.floor(1e3*(r/2-32)*Math.random()):1e3*r-5e3;e._registrationTimer=setTimeout(function(){e._registrationTimer=null,0===e._ua.listeners("registrationExpiring").length?e.register():e._ua.emit("registrationExpiring")},i),n.hasParam("temp-gruu")&&(e._ua.contact.temp_gruu=n.getParam("temp-gruu").replace(/"/g,"")),n.hasParam("pub-gruu")&&(e._ua.contact.pub_gruu=n.getParam("pub-gruu").replace(/"/g,"")),e._registered||(e._registered=!0,e._ua.registered({response:t}));break;case/^423$/.test(t.status_code):t.hasHeader("min-expires")?(e._expires=Number(t.getHeader("min-expires")),e._expires<10&&(e._expires=10),e.register()):(u("423 response received for REGISTER without Min-Expires"),e._registrationFailure(t,s.causes.SIP_FAILURE_CODE));break;default:var a=o.sipErrorCause(t.status_code);e._registrationFailure(t,a)}}});this._registering=!0,r.send()}}},{key:"unregister",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._registered){this._registered=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null);var n=this._extraHeaders.slice();t.all?n.push("Contact: *".concat(this._extraContactParams)):n.push("Contact: ".concat(this._contact,";expires=0").concat(this._extraContactParams)),n.push("Expires: 0");var r=new i.OutgoingRequest(s.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},n),l=new a(this._ua,r,{onRequestTimeout:function(){e._unregistered(null,s.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._unregistered(null,s.causes.CONNECTION_ERROR)},onAuthenticated:function(){e._cseq+=1},onReceiveResponse:function(t){switch(!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):e._unregistered(t);break;default:var n=o.sipErrorCause(t.status_code);e._unregistered(t,n)}}});l.send()}else u("already unregistered")}},{key:"close",value:function(){this._registered&&this.unregister()}},{key:"onTransportClosed",value:function(){this._registering=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),this._registered&&(this._registered=!1,this._ua.unregistered({}))}},{key:"_registrationFailure",value:function(e,t){this._registering=!1,this._ua.registrationFailed({response:e||null,cause:t}),this._registered&&(this._registered=!1,this._ua.unregistered({response:e||null,cause:t}))}},{key:"_unregistered",value:function(e,t){this._registering=!1,this._registered=!1,this._ua.unregistered({response:e||null,cause:t||null})}}])&&r(t.prototype,n),l&&r(t,l),e}()},function(e,t,n){var r=function(e){return String(Number(e))===e?Number(e):e},o=function(e,t,n){var o=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:o&&!t[e.name]&&(t[e.name]={});var s=e.push?{}:o?t[e.name]:t;!function(e,t,n,o){if(o&&!n)t[o]=r(e[1]);else for(var s=0;s<n.length;s+=1)null!=e[s+1]&&(t[n[s]]=r(e[s+1]))}(n.match(e.reg),s,e.names,e.name),e.push&&t[e.push].push(s)},s=n(42),i=RegExp.prototype.test.bind(/^([a-z])=(.*)/);t.parse=function(e){var t={},n=[],r=t;return e.split(/(\r\n|\r|\n)/).filter(i).forEach(function(e){var t=e[0],i=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),r=n[n.length-1]);for(var a=0;a<(s[t]||[]).length;a+=1){var u=s[t][a];if(u.reg.test(i))return o(u,r,i)}}),t.media=n,t};var a=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length?e[n[0]]=r(n[1]):1===n.length&&t.length>1&&(e[n[0]]=void 0),e};t.parseParams=function(e){return e.split(/;\s?/).reduce(a,{})},t.parseFmtpConfig=t.parseParams,t.parsePayloads=function(e){return e.toString().split(" ").map(Number)},t.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(r),o=0;o<n.length;o+=3)t.push({component:n[o],ip:n[o+1],port:n[o+2]});return t},t.parseImageAttributes=function(e){return e.split(" ").map(function(e){return e.substring(1,e.length-1).split(",").reduce(a,{})})},t.parseSimulcastStreamList=function(e){return e.split(";").map(function(e){return e.split(",").map(function(e){var t,n=!1;return"~"!==e[0]?t=r(e):(t=r(e.substring(1,e.length)),n=!0),{scid:t,paused:n}})})}},function(e,t,n){var r=n(42),o=/%[sdv%]/g,s=function(e){var t=1,n=arguments,r=n.length;return e.replace(o,function(e){if(t>=r)return e;var o=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(o);case"%d":return Number(o);case"%v":return""}})},i=function(e,t,n){var r=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var o=0;o<t.names.length;o+=1){var i=t.names[o];t.name?r.push(n[t.name][i]):r.push(n[t.names[o]])}else r.push(n[t.name]);return s.apply(null,r)},a=["v","o","s","i","u","e","p","c","b","t","r","z","a"],u=["i","c","b","a"];e.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach(function(e){null==e.payloads&&(e.payloads="")});var n=t.outerOrder||a,o=t.innerOrder||u,s=[];return n.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?s.push(i(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){s.push(i(t,n,e))})})}),e.media.forEach(function(e){s.push(i("m",r.m[0],e)),o.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?s.push(i(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){s.push(i(t,n,e))})})})}),s.join("\r\n")+"\r\n"}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(2),s=n(0)("JsSIP:DigestAuthentication"),i=n(0)("JsSIP:ERROR:DigestAuthentication");i.log=console.warn.bind(console),e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._credentials=t,this._cnonce=null,this._nc=0,this._ncHex="00000000",this._algorithm=null,this._realm=null,this._nonce=null,this._opaque=null,this._stale=null,this._qop=null,this._method=null,this._uri=null,this._ha1=null,this._response=null}var t,n,a;return t=e,(n=[{key:"get",value:function(e){switch(e){case"realm":return this._realm;case"ha1":return this._ha1;default:return void i('get() | cannot get "%s" parameter',e)}}},{key:"authenticate",value:function(e,t){var n=e.method,r=e.ruri,a=e.body,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(this._algorithm=t.algorithm,this._realm=t.realm,this._nonce=t.nonce,this._opaque=t.opaque,this._stale=t.stale,this._algorithm){if("MD5"!==this._algorithm)return i('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this._algorithm="MD5";if(!this._nonce)return i("authenticate() | challenge without Digest nonce, authentication aborted"),!1;if(!this._realm)return i("authenticate() | challenge without Digest realm, authentication aborted"),!1;if(!this._credentials.password){if(!this._credentials.ha1)return i("authenticate() | no plain SIP password nor ha1 provided, authentication aborted"),!1;if(this._credentials.realm!==this._realm)return i('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]',this._credentials.realm,this._realm),!1}if(t.qop)if(t.qop.indexOf("auth-int")>-1)this._qop="auth-int";else{if(!(t.qop.indexOf("auth")>-1))return i('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this._qop="auth"}else this._qop=null;this._method=n,this._uri=r,this._cnonce=u||o.createRandomToken(12),this._nc+=1;var l,c,h=Number(this._nc).toString(16);return this._ncHex="00000000".substr(0,8-h.length)+h,4294967296===this._nc&&(this._nc=1,this._ncHex="00000001"),this._credentials.password?this._ha1=o.calculateMD5("".concat(this._credentials.username,":").concat(this._realm,":").concat(this._credentials.password)):this._ha1=this._credentials.ha1,"auth"===this._qop?(l="".concat(this._method,":").concat(this._uri),c=o.calculateMD5(l),s('authenticate() | using qop=auth [a2:"%s"]',l),this._response=o.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(this._ncHex,":").concat(this._cnonce,":auth:").concat(c))):"auth-int"===this._qop?(l="".concat(this._method,":").concat(this._uri,":").concat(o.calculateMD5(a||"")),c=o.calculateMD5(l),s('authenticate() | using qop=auth-int [a2:"%s"]',l),this._response=o.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(this._ncHex,":").concat(this._cnonce,":auth-int:").concat(c))):null===this._qop&&(l="".concat(this._method,":").concat(this._uri),c=o.calculateMD5(l),s('authenticate() | using qop=null [a2:"%s"]',l),this._response=o.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(c))),s("authenticate() | response generated"),!0}},{key:"toString",value:function(){var e=[];if(!this._response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push("algorithm=".concat(this._algorithm)),e.push('username="'.concat(this._credentials.username,'"')),e.push('realm="'.concat(this._realm,'"')),e.push('nonce="'.concat(this._nonce,'"')),e.push('uri="'.concat(this._uri,'"')),e.push('response="'.concat(this._response,'"')),this._opaque&&e.push('opaque="'.concat(this._opaque,'"')),this._qop&&(e.push("qop=".concat(this._qop)),e.push('cnonce="'.concat(this._cnonce,'"')),e.push("nc=".concat(this._ncHex))),"Digest ".concat(e.join(", "))}}])&&r(t.prototype,n),a&&r(t,a),e}()},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(6),s=n(1),i=n(11),a=n(99),u=n(2),l=n(0)("JsSIP:Dialog"),c={STATUS_EARLY:1,STATUS_CONFIRMED:2};e.exports=function(){function e(t,n,r){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.STATUS_CONFIRMED;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._owner=t,this._ua=t._ua,this._uac_pending_reply=!1,this._uas_pending_reply=!1,!n.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};n instanceof o.IncomingResponse&&(s=n.status_code<200?c.STATUS_EARLY:c.STATUS_CONFIRMED);var i=n.parseHeader("contact");"UAS"===r?(this._id={call_id:n.call_id,local_tag:n.to_tag,remote_tag:n.from_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._remote_seqnum=n.cseq,this._local_uri=n.parseHeader("to").uri,this._remote_uri=n.parseHeader("from").uri,this._remote_target=i.uri,this._route_set=n.getHeaders("record-route"),this._ack_seqnum=this._remote_seqnum):"UAC"===r&&(this._id={call_id:n.call_id,local_tag:n.from_tag,remote_tag:n.to_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._local_seqnum=n.cseq,this._local_uri=n.parseHeader("from").uri,this._remote_uri=n.parseHeader("to").uri,this._remote_target=i.uri,this._route_set=n.getHeaders("record-route").reverse(),this._ack_seqnum=null),this._ua.newDialog(this),l("new ".concat(r," dialog created with status ").concat(this._state===c.STATUS_EARLY?"EARLY":"CONFIRMED"))}var t,n,h;return t=e,h=[{key:"C",get:function(){return c}}],(n=[{key:"id",get:function(){return this._id}},{key:"local_seqnum",get:function(){return this._local_seqnum},set:function(e){this._local_seqnum=e}},{key:"owner",get:function(){return this._owner}},{key:"uac_pending_reply",get:function(){return this._uac_pending_reply},set:function(e){this._uac_pending_reply=e}},{key:"uas_pending_reply",get:function(){return this._uas_pending_reply}},{key:"update",value:function(e,t){this._state=c.STATUS_CONFIRMED,l("dialog ".concat(this._id.toString(),"  changed to CONFIRMED state")),"UAC"===t&&(this._route_set=e.getHeaders("record-route").reverse())}},{key:"terminate",value:function(){l("dialog ".concat(this._id.toString()," deleted")),this._ua.destroyDialog(this)}},{key:"sendRequest",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=u.cloneArray(n.extraHeaders),o=u.cloneObject(n.eventHandlers),s=n.body||null,i=this._createRequest(e,r,s);o.onAuthenticated=function(){t._local_seqnum+=1};var l=new a(this,i,o);return l.send(),i}},{key:"receiveRequest",value:function(e){this._checkInDialogRequest(e)&&(e.method===s.ACK&&null!==this._ack_seqnum?this._ack_seqnum=null:e.method===s.INVITE&&(this._ack_seqnum=e.cseq),this._owner.receiveRequest(e))}},{key:"_createRequest",value:function(e,t,n){t=u.cloneArray(t),this._local_seqnum||(this._local_seqnum=Math.floor(1e4*Math.random()));var r=e===s.CANCEL||e===s.ACK?this._local_seqnum:this._local_seqnum+=1;return new o.OutgoingRequest(e,this._remote_target,this._ua,{cseq:r,call_id:this._id.call_id,from_uri:this._local_uri,from_tag:this._id.local_tag,to_uri:this._remote_uri,to_tag:this._id.remote_tag,route_set:this._route_set},t,n)}},{key:"_checkInDialogRequest",value:function(e){var t=this;if(this._remote_seqnum)if(e.cseq<this._remote_seqnum){if(e.method!==s.ACK)return e.reply(500),!1;if(null===this._ack_seqnum||e.cseq!==this._ack_seqnum)return!1}else e.cseq>this._remote_seqnum&&(this._remote_seqnum=e.cseq);else this._remote_seqnum=e.cseq;if(e.method===s.INVITE||e.method===s.UPDATE&&e.body){if(!0===this._uac_pending_reply)e.reply(491);else{if(!0===this._uas_pending_reply){var n=1+(10*Math.random()|0);return e.reply(500,null,["Retry-After:".concat(n)]),!1}this._uas_pending_reply=!0,e.server_transaction.on("stateChanged",function n(){e.server_transaction.state!==i.C.STATUS_ACCEPTED&&e.server_transaction.state!==i.C.STATUS_COMPLETED&&e.server_transaction.state!==i.C.STATUS_TERMINATED||(e.server_transaction.removeListener("stateChanged",n),t._uas_pending_reply=!1)})}e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===i.C.STATUS_ACCEPTED&&(t._remote_target=e.parseHeader("contact").uri)})}else e.method===s.NOTIFY&&e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===i.C.STATUS_COMPLETED&&(t._remote_target=e.parseHeader("contact").uri)});return!0}}])&&r(t.prototype,n),h&&r(t,h),e}()},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(1),s=n(11),i=n(44),a=n(13),u={onRequestTimeout:function(){},onTransportError:function(){},onSuccessResponse:function(){},onErrorResponse:function(){},onAuthenticated:function(){},onDialogError:function(){}};e.exports=function(){function e(t,n,r){for(var o in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._dialog=t,this._ua=t._ua,this._request=n,this._eventHandlers=r,this._reattempt=!1,this._reattemptTimer=null,u)Object.prototype.hasOwnProperty.call(u,o)&&(this._eventHandlers[o]||(this._eventHandlers[o]=u[o]))}var t,n,l;return t=e,(n=[{key:"request",get:function(){return this._request}},{key:"send",value:function(){var e=this,t=new a(this._ua,this._request,{onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onAuthenticated:function(t){e._eventHandlers.onAuthenticated(t)},onReceiveResponse:function(t){e._receiveResponse(t)}});t.send(),(this._request.method===o.INVITE||this._request.method===o.UPDATE&&this._request.body)&&t.clientTransaction.state!==s.C.STATUS_TERMINATED&&(this._dialog.uac_pending_reply=!0,t.clientTransaction.on("stateChanged",function n(){t.clientTransaction.state!==s.C.STATUS_ACCEPTED&&t.clientTransaction.state!==s.C.STATUS_COMPLETED&&t.clientTransaction.state!==s.C.STATUS_TERMINATED||(t.clientTransaction.removeListener("stateChanged",n),e._dialog.uac_pending_reply=!1)}))}},{key:"_receiveResponse",value:function(e){var t=this;408===e.status_code||481===e.status_code?this._eventHandlers.onDialogError(e):e.method===o.INVITE&&491===e.status_code?this._reattempt?e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e):(this._request.cseq=this._dialog.local_seqnum+=1,this._reattemptTimer=setTimeout(function(){t._dialog.owner.status!==i.C.STATUS_TERMINATED&&(t._reattempt=!0,t._request_sender.send())},1e3)):e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e)}}])&&r(t.prototype,n),l&&r(t,l),e}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n(5).EventEmitter,c=n(1),h=n(7),f=n(2),d=n(0)("JsSIP:RTCSession:DTMF");n(0)("JsSIP:ERROR:RTCSession:DTMF").log=console.warn.bind(console);var p={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,l);var t,n,r,a=i(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this))._session=e,t._direction=null,t._tone=null,t._duration=null,t._request=null,t}return t=u,(n=[{key:"tone",get:function(){return this._tone}},{key:"duration",get:function(){return this._duration}},{key:"send",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(void 0===e)throw new TypeError("Not enough arguments");if(this._direction="outgoing",this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new h.InvalidStateError(this._session.status);var r=f.cloneArray(n.extraHeaders);if(this.eventHandlers=f.cloneObject(n.eventHandlers),"string"==typeof e)e=e.toUpperCase();else{if("number"!=typeof e)throw new TypeError("Invalid tone: ".concat(e));e=e.toString()}if(!e.match(/^[0-9A-DR#*]$/))throw new TypeError("Invalid tone: ".concat(e));this._tone=e,this._duration=n.duration,r.push("Content-Type: application/dtmf-relay");var o="Signal=".concat(this._tone,"\r\n");o+="Duration=".concat(this._duration),this._session.newDTMF({originator:"local",dtmf:this,request:this._request}),this._session.sendRequest(c.INFO,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){t.eventHandlers.onFailed&&t.eventHandlers.onFailed(),t.emit("failed",{originator:"remote",response:e})},onRequestTimeout:function(){t._session.onRequestTimeout()},onTransportError:function(){t._session.onTransportError()},onDialogError:function(){t._session.onDialogError()}},body:o})}},{key:"init_incoming",value:function(e){var t=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,n=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(this._direction="incoming",this._request=e,e.reply(200),e.body){var r=e.body.split("\n");r.length>=1&&t.test(r[0])&&(this._tone=r[0].replace(t,"$2")),r.length>=2&&n.test(r[1])&&(this._duration=parseInt(r[1].replace(n,"$2"),10))}this._duration||(this._duration=p.DEFAULT_DURATION),this._tone?this._session.newDTMF({originator:"remote",dtmf:this,request:e}):d("invalid INFO DTMF received, discarded")}}])&&o(t.prototype,n),r&&o(t,r),u}(),e.exports.C=p},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n(5).EventEmitter;n(0)("JsSIP:ERROR:RTCSession:Info").log=console.warn.bind(console);var c=n(1),h=n(7),f=n(2);e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,l);var t,n,r,a=i(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this))._session=e,t._direction=null,t._contentType=null,t._body=null,t}return t=u,(n=[{key:"contentType",get:function(){return this._contentType}},{key:"body",get:function(){return this._body}},{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(this._direction="outgoing",void 0===e)throw new TypeError("Not enough arguments");if(this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new h.InvalidStateError(this._session.status);this._contentType=e,this._body=t;var o=f.cloneArray(r.extraHeaders);o.push("Content-Type: ".concat(e)),this._session.newInfo({originator:"local",info:this,request:this.request}),this._session.sendRequest(c.INFO,{extraHeaders:o,eventHandlers:{onSuccessResponse:function(e){n.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){n.emit("failed",{originator:"remote",response:e})},onTransportError:function(){n._session.onTransportError()},onRequestTimeout:function(){n._session.onRequestTimeout()},onDialogError:function(){n._session.onDialogError()}},body:t})}},{key:"init_incoming",value:function(e){this._direction="incoming",this.request=e,e.reply(200),this._contentType=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,this._body=e.body,this._session.newInfo({originator:"remote",info:this,request:e})}}])&&o(t.prototype,n),r&&o(t,r),u}()},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(1),s=n(0)("JsSIP:RTCSession:ReferNotifier"),i={event_type:"refer",body_type:"message/sipfrag;version=2.0",expires:300};e.exports=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._session=t,this._id=n,this._expires=r||i.expires,this._active=!0,this.notify(100)}var t,n,a;return t=e,(n=[{key:"notify",value:function(e,t){var n;s("notify()"),!1!==this._active&&(t=t||o.REASON_PHRASE[e]||"",n=e>=200?"terminated;reason=noresource":"active;expires=".concat(this._expires),this._session.sendRequest(o.NOTIFY,{extraHeaders:["Event: ".concat(i.event_type,";id=").concat(this._id),"Subscription-State: ".concat(n),"Content-Type: ".concat(i.body_type)],body:"SIP/2.0 ".concat(e," ").concat(t),eventHandlers:{onErrorResponse:function(){this._active=!1}}}))}}])&&r(t.prototype,n),a&&r(t,a),e}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n(5).EventEmitter,c=n(1),h=n(4),f=n(2),d=n(0)("JsSIP:RTCSession:ReferSubscriber");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,l);var t,n,r,a=i(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this))._id=null,t._session=e,t}return t=u,(n=[{key:"id",get:function(){return this._id}},{key:"sendRefer",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};d("sendRefer()");var r=f.cloneArray(n.extraHeaders),o=f.cloneObject(n.eventHandlers);for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&this.on(s,o[s]);var i=null;n.replaces&&(i=n.replaces._request.call_id,i+=";to-tag=".concat(n.replaces._to_tag),i+=";from-tag=".concat(n.replaces._from_tag),i=encodeURIComponent(i));var a="Refer-To: <".concat(e).concat(i?"?Replaces=".concat(i):"",">");r.push(a);var u="Referred-By: <".concat(this._session._ua._configuration.uri._scheme,":").concat(this._session._ua._configuration.uri._user,"@").concat(this._session._ua._configuration.uri._host,">");r.push(u),r.push("Contact: ".concat(this._session.contact));var l=this._session.sendRequest(c.REFER,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t._requestSucceeded(e)},onErrorResponse:function(e){t._requestFailed(e,c.causes.REJECTED)},onTransportError:function(){t._requestFailed(null,c.causes.CONNECTION_ERROR)},onRequestTimeout:function(){t._requestFailed(null,c.causes.REQUEST_TIMEOUT)},onDialogError:function(){t._requestFailed(null,c.causes.DIALOG_ERROR)}}});this._id=l.cseq}},{key:"receiveNotify",value:function(e){if(d("receiveNotify()"),e.body){var t=h.parse(e.body.trim(),"Status_Line");if(-1!==t)switch(!0){case/^100$/.test(t.status_code):this.emit("trying",{request:e,status_line:t});break;case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",{request:e,status_line:t});break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",{request:e,status_line:t});break;default:this.emit("failed",{request:e,status_line:t})}else d('receiveNotify() | error parsing NOTIFY body: "'.concat(e.body,'"'))}}},{key:"_requestSucceeded",value:function(e){d("REFER succeeded"),d('emit "requestSucceeded"'),this.emit("requestSucceeded",{response:e})}},{key:"_requestFailed",value:function(e,t){d("REFER failed"),d('emit "requestFailed"'),this.emit("requestFailed",{response:e||null,cause:t})}}])&&o(t.prototype,n),r&&o(t,r),u}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n(5).EventEmitter,c=n(1),h=n(6),f=n(2),d=n(13),p=n(7),_=n(0)("JsSIP:Message");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,l);var t,n,r,a=i(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this))._ua=e,t._request=null,t._closed=!1,t._direction=null,t._local_identity=null,t._remote_identity=null,t._is_replied=!1,t._data={},t}return t=u,(n=[{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=e;if(void 0===e||void 0===t)throw new TypeError("Not enough arguments");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(o));var s=f.cloneArray(r.extraHeaders),i=f.cloneObject(r.eventHandlers),a=r.contentType||"text/plain";for(var u in i)Object.prototype.hasOwnProperty.call(i,u)&&this.on(u,i[u]);s.push("Content-Type: ".concat(a)),this._request=new h.OutgoingRequest(c.MESSAGE,e,this._ua,null,s),t&&(this._request.body=t);var l=new d(this._ua,this._request,{onRequestTimeout:function(){n._onRequestTimeout()},onTransportError:function(){n._onTransportError()},onReceiveResponse:function(e){n._receiveResponse(e)}});this._newMessage("local",this._request),l.send()}},{key:"init_incoming",value:function(e){this._request=e,this._newMessage("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}},{key:"accept",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=f.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new p.NotSupportedError('"accept" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}},{key:"reject",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.status_code||480,n=e.reason_phrase,r=f.cloneArray(e.extraHeaders),o=e.body;if("incoming"!==this._direction)throw new p.NotSupportedError('"reject" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");if(t<300||t>=700)throw new TypeError("Invalid status_code: ".concat(t));this._is_replied=!0,this._request.reply(t,n,r,o)}},{key:"_receiveResponse",value:function(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:var t=f.sipErrorCause(e.status_code);this._failed("remote",e,t)}}},{key:"_onRequestTimeout",value:function(){this._closed||this._failed("system",null,c.causes.REQUEST_TIMEOUT)}},{key:"_onTransportError",value:function(){this._closed||this._failed("system",null,c.causes.CONNECTION_ERROR)}},{key:"_close",value:function(){this._closed=!0,this._ua.destroyMessage(this)}},{key:"_newMessage",value:function(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newMessage(this,{originator:e,message:this,request:t})}},{key:"_failed",value:function(e,t,n){_("MESSAGE failed"),this._close(),_('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}},{key:"_succeeded",value:function(e,t){_("MESSAGE succeeded"),this._close(),_('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}])&&o(t.prototype,n),r&&o(t,r),u}()},function(e,t,n){"use strict";(function(t){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(45),s=n(0)("JsSIP:Transport"),i=n(0)("JsSIP:ERROR:Transport"),a=n(1);i.log=console.warn.bind(console);var u={STATUS_CONNECTED:0,STATUS_CONNECTING:1,STATUS_DISCONNECTED:2,SOCKET_STATUS_READY:0,SOCKET_STATUS_ERROR:1,recovery_options:{min_interval:a.CONNECTION_RECOVERY_MIN_INTERVAL,max_interval:a.CONNECTION_RECOVERY_MAX_INTERVAL}};e.exports=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.recovery_options;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s("new()"),this.status=u.STATUS_DISCONNECTED,this.socket=null,this.sockets=[],this.recovery_options=r,this.recover_attempts=0,this.recovery_timer=null,this.close_requested=!1,t.TextDecoder&&(this.textDecoder=new TextDecoder("utf8")),void 0===n)throw new TypeError("Invalid argument. undefined 'sockets' argument");n instanceof Array||(n=[n]),n.forEach(function(e){if(!o.isSocket(e.socket))throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");if(e.weight&&!Number(e.weight))throw new TypeError("Invalid argument. 'weight' attribute is not a number");this.sockets.push({socket:e.socket,weight:e.weight||0,status:u.SOCKET_STATUS_READY})},this),this._getSocket()}var n,a,l;return n=e,(a=[{key:"via_transport",get:function(){return this.socket.via_transport}},{key:"url",get:function(){return this.socket.url}},{key:"sip_uri",get:function(){return this.socket.sip_uri}},{key:"connect",value:function(){s("connect()"),this.isConnected()?s("Transport is already connected"):this.isConnecting()?s("Transport is connecting"):(this.close_requested=!1,this.status=u.STATUS_CONNECTING,this.onconnecting({socket:this.socket,attempts:this.recover_attempts}),this.close_requested||(this.socket.onconnect=this._onConnect.bind(this),this.socket.ondisconnect=this._onDisconnect.bind(this),this.socket.ondata=this._onData.bind(this),this.socket.connect()))}},{key:"disconnect",value:function(){s("close()"),this.close_requested=!0,this.recover_attempts=0,this.status=u.STATUS_DISCONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.socket.onconnect=function(){},this.socket.ondisconnect=function(){},this.socket.ondata=function(){},this.socket.disconnect(),this.ondisconnect({socket:this.socket,error:!1})}},{key:"send",value:function(e){if(s("send()"),!this.isConnected())return i("unable to send message, transport is not connected"),!1;var t=e.toString();return s("sending message:\n\n".concat(t,"\n")),this.socket.send(t)}},{key:"isConnected",value:function(){return this.status===u.STATUS_CONNECTED}},{key:"isConnecting",value:function(){return this.status===u.STATUS_CONNECTING}},{key:"_reconnect",value:function(){var e=this;this.recover_attempts+=1;var t=Math.floor(Math.random()*Math.pow(2,this.recover_attempts)+1);t<this.recovery_options.min_interval?t=this.recovery_options.min_interval:t>this.recovery_options.max_interval&&(t=this.recovery_options.max_interval),s("reconnection attempt: ".concat(this.recover_attempts,". next connection attempt in ").concat(t," seconds")),this.recovery_timer=setTimeout(function(){e.close_requested||e.isConnected()||e.isConnecting()||(e._getSocket(),e.connect())},1e3*t)}},{key:"_getSocket",value:function(){var e=[];if(this.sockets.forEach(function(t){t.status!==u.SOCKET_STATUS_ERROR&&(0===e.length?e.push(t):t.weight>e[0].weight?e=[t]:t.weight===e[0].weight&&e.push(t))}),0===e.length)return this.sockets.forEach(function(e){e.status=u.SOCKET_STATUS_READY}),void this._getSocket();var t=Math.floor(Math.random()*e.length);this.socket=e[t].socket}},{key:"_onConnect",value:function(){this.recover_attempts=0,this.status=u.STATUS_CONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.onconnect({socket:this})}},{key:"_onDisconnect",value:function(e,t,n){this.status=u.STATUS_DISCONNECTED,this.ondisconnect({socket:this.socket,error:e,code:t,reason:n}),this.close_requested||(this.sockets.forEach(function(e){this.socket===e.socket&&(e.status=u.SOCKET_STATUS_ERROR)},this),this._reconnect(e))}},{key:"_onData",value:function(e){if("\r\n"!==e){if("string"!=typeof e){try{e=this.textDecoder?this.textDecoder.decode(e):String.fromCharCode.apply(null,new Uint8Array(e))}catch(e){return void s("received binary message failed to be converted into string, message discarded")}s("received binary message:\n\n".concat(e,"\n"))}else s("received text message:\n\n".concat(e,"\n"));this.ondata({transport:this,message:e})}else s("received message with CRLF Keep Alive response")}}])&&r(n.prototype,a),l&&r(n,l),e}()}).call(this,n(16))},function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=n(4),i=n(6),a=n(0)("JsSIP:ERROR:Parser");function u(e,t){var n=t,r=0,o=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===r;){if(-1===(o=e.indexOf("\r\n",n)))return o;!e.substring(o+2,o+4).match(/(^\r\n)/)&&e.charAt(o+2).match(/(^\s+)/)?n=o+2:r=o}return r}function l(e,t,n,o){var a,u=t.indexOf(":",n),l=t.substring(n,u).trim(),c=t.substring(u+1,o).trim();switch(l.toLowerCase()){case"via":case"v":e.addHeader("via",c),1===e.getHeaders("via").length?(a=e.parseHeader("Via"))&&(e.via=a,e.via_branch=a.branch):a=0;break;case"from":case"f":e.setHeader("from",c),(a=e.parseHeader("from"))&&(e.from=a,e.from_tag=a.getParam("tag"));break;case"to":case"t":e.setHeader("to",c),(a=e.parseHeader("to"))&&(e.to=a,e.to_tag=a.getParam("tag"));break;case"record-route":if(-1===(a=s.parse(c,"Record_Route")))a=void 0;else{var h,f=r(a);try{for(f.s();!(h=f.n()).done;){var d=h.value;e.addHeader("record-route",c.substring(d.possition,d.offset)),e.headers["Record-Route"][e.getHeaders("record-route").length-1].parsed=d.parsed}}catch(e){f.e(e)}finally{f.f()}}break;case"call-id":case"i":e.setHeader("call-id",c),(a=e.parseHeader("call-id"))&&(e.call_id=c);break;case"contact":case"m":if(-1===(a=s.parse(c,"Contact")))a=void 0;else{var p,_=r(a);try{for(_.s();!(p=_.n()).done;){var m=p.value;e.addHeader("contact",c.substring(m.possition,m.offset)),e.headers.Contact[e.getHeaders("contact").length-1].parsed=m.parsed}}catch(e){_.e(e)}finally{_.f()}}break;case"content-length":case"l":e.setHeader("content-length",c),a=e.parseHeader("content-length");break;case"content-type":case"c":e.setHeader("content-type",c),a=e.parseHeader("content-type");break;case"cseq":e.setHeader("cseq",c),(a=e.parseHeader("cseq"))&&(e.cseq=a.value),e instanceof i.IncomingResponse&&(e.method=a.method);break;case"max-forwards":e.setHeader("max-forwards",c),a=e.parseHeader("max-forwards");break;case"www-authenticate":e.setHeader("www-authenticate",c),a=e.parseHeader("www-authenticate");break;case"proxy-authenticate":e.setHeader("proxy-authenticate",c),a=e.parseHeader("proxy-authenticate");break;case"session-expires":case"x":e.setHeader("session-expires",c),(a=e.parseHeader("session-expires"))&&(e.session_expires=a.expires,e.session_expires_refresher=a.refresher);break;case"refer-to":case"r":e.setHeader("refer-to",c),(a=e.parseHeader("refer-to"))&&(e.refer_to=a);break;case"replaces":e.setHeader("replaces",c),(a=e.parseHeader("replaces"))&&(e.replaces=a);break;case"event":case"o":e.setHeader("event",c),(a=e.parseHeader("event"))&&(e.event=a);break;default:e.addHeader(l,c),a=0}return void 0!==a||{error:'error parsing header "'.concat(l,'"')}}a.log=console.warn.bind(console),t.parseMessage=function(e,t){var n,r,o=e.indexOf("\r\n");if(-1!==o){var c=e.substring(0,o),h=s.parse(c,"Request_Response");if(-1!==h){h.status_code?((n=new i.IncomingResponse).status_code=h.status_code,n.reason_phrase=h.reason_phrase):((n=new i.IncomingRequest(t)).method=h.method,n.ruri=h.uri),n.data=e;for(var f=o+2;;){if(-2===(o=u(e,f))){r=f+2;break}if(-1===o)return void a("parseMessage() | malformed message");if(!0!==(h=l(n,e,f,o)))return void a("parseMessage() |",h.error);f=o+2}if(n.hasHeader("content-length")){var d=n.getHeader("content-length");n.body=e.substr(r,d)}else n.body=e.substring(r);return n}a('parseMessage() | error parsing first line of SIP message: "'.concat(c,'"'))}else a("parseMessage() | no CRLF found, not a SIP message")}},function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s,i,a,u=n(1),l=n(6),c=n(2),h=n(0)("JsSIP:sanityCheck"),f=[function(){for(var e=0,t=["from","to","call_id","cseq","via"];e<t.length;e++){var n=t[e];if(!s.hasHeader(n))return h("missing mandatory header field : ".concat(n,", dropping the response")),!1}}],d=[function(){if("sip"!==s.s("to").uri.scheme)return _(416),!1},function(){if(!s.to_tag&&s.call_id.substr(0,5)===i.configuration.jssip_id)return _(482),!1},function(){var e=c.str_utf8_length(s.body),t=s.getHeader("content-length");if(e<t)return _(400),!1},function(){var e,t=s.from_tag,n=s.call_id,r=s.cseq;if(s.to_tag)return;if(s.method===u.INVITE){if(i._transactions.ist[s.via_branch])return!1;for(var o in i._transactions.ist)if(Object.prototype.hasOwnProperty.call(i._transactions.ist,o)&&(e=i._transactions.ist[o]).request.from_tag===t&&e.request.call_id===n&&e.request.cseq===r)return _(482),!1}else{if(i._transactions.nist[s.via_branch])return!1;for(var a in i._transactions.nist)if(Object.prototype.hasOwnProperty.call(i._transactions.nist,a)&&(e=i._transactions.nist[a]).request.from_tag===t&&e.request.call_id===n&&e.request.cseq===r)return _(482),!1}}],p=[function(){if(s.getHeaders("via").length>1)return h("more than one Via header field present in the response, dropping the response"),!1},function(){var e=c.str_utf8_length(s.body),t=s.getHeader("content-length");if(e<t)return h("message body length is lower than the value in Content-Length header field, dropping the response"),!1}];function _(e){var t,n,o=s.getHeaders("via"),i="SIP/2.0 ".concat(e," ").concat(u.REASON_PHRASE[e],"\r\n"),l=r(o);try{for(l.s();!(n=l.n()).done;){var h=n.value;i+="Via: ".concat(h,"\r\n")}}catch(e){l.e(e)}finally{l.f()}t=s.getHeader("To"),s.to_tag||(t+=";tag=".concat(c.newTag())),i+="To: ".concat(t,"\r\n"),i+="From: ".concat(s.getHeader("From"),"\r\n"),i+="Call-ID: ".concat(s.call_id,"\r\n"),i+="CSeq: ".concat(s.cseq," ").concat(s.method,"\r\n"),i+="\r\n",a.send(i)}e.exports=function(e,t,n){s=e,i=t,a=n;var o,u=r(f);try{for(u.s();!(o=u.n()).done;){if(!1===(0,o.value)())return!1}}catch(e){u.e(e)}finally{u.f()}if(s instanceof l.IncomingRequest){var c,h=r(d);try{for(h.s();!(c=h.n()).done;){if(!1===(0,c.value)())return!1}}catch(e){h.e(e)}finally{h.f()}}else if(s instanceof l.IncomingResponse){var _,m=r(p);try{for(m.s();!(_=m.n()).done;){if(!1===(0,_.value)())return!1}}catch(e){m.e(e)}finally{m.f()}}return!0}},function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=n(2),i=n(1),a=n(4),u=n(8),l=n(45),c=n(7);t.settings={authorization_user:null,password:null,realm:null,ha1:null,authorization_jwt:null,display_name:null,uri:null,contact_uri:null,instance_id:null,use_preloaded_route:!1,session_timers:!0,session_timers_refresh_method:i.UPDATE,session_timers_force_refresher:!1,no_answer_timeout:60,register:!0,register_expires:600,registrar_server:null,sockets:null,connection_recovery_max_interval:i.CONNECTION_RECOVERY_MAX_INTERVAL,connection_recovery_min_interval:i.CONNECTION_RECOVERY_MIN_INTERVAL,via_host:"".concat(s.createRandomToken(12),".invalid")};var h={mandatory:{sockets:function(e){var t=[];if(l.isSocket(e))t.push({socket:e});else{if(!Array.isArray(e)||!e.length)return;var n,o=r(e);try{for(o.s();!(n=o.n()).done;){var s=n.value;Object.prototype.hasOwnProperty.call(s,"socket")&&l.isSocket(s.socket)?t.push(s):l.isSocket(s)&&t.push({socket:s})}}catch(e){o.e(e)}finally{o.f()}}return t},uri:function(e){/^sip:/i.test(e)||(e="".concat(i.SIP,":").concat(e));var t=u.parse(e);return t&&t.user?t:void 0}},optional:{authorization_user:function(e){return-1===a.parse('"'.concat(e,'"'),"quoted_string")?void 0:e},authorization_jwt:function(e){if("string"==typeof e)return e},user_agent:function(e){if("string"==typeof e)return e},connection_recovery_max_interval:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},connection_recovery_min_interval:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},contact_uri:function(e){if("string"==typeof e){var t=a.parse(e,"SIP_URI");if(-1!==t)return t}},display_name:function(e){return e},instance_id:function(e){return/^uuid:/i.test(e)&&(e=e.substr(5)),-1===a.parse(e,"uuid")?void 0:e},no_answer_timeout:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},session_timers:function(e){if("boolean"==typeof e)return e},session_timers_refresh_method:function(e){if("string"==typeof e&&((e=e.toUpperCase())===i.INVITE||e===i.UPDATE))return e},session_timers_force_refresher:function(e){if("boolean"==typeof e)return e},password:function(e){return String(e)},realm:function(e){return String(e)},ha1:function(e){return String(e)},register:function(e){if("boolean"==typeof e)return e},register_expires:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},registrar_server:function(e){/^sip:/i.test(e)||(e="".concat(i.SIP,":").concat(e));var t=u.parse(e);return t?t.user?void 0:t:void 0},use_preloaded_route:function(e){if("boolean"==typeof e)return e}}};t.load=function(e,t){for(var n in h.mandatory){if(!t.hasOwnProperty(n))throw new c.ConfigurationError(n);var r=t[n],o=h.mandatory[n](r);if(void 0===o)throw new c.ConfigurationError(n,r);e[n]=o}for(var i in h.optional)if(t.hasOwnProperty(i)){var a=t[i];if(s.isEmpty(a))continue;var u=h.optional[i](a);if(void 0===u)throw new c.ConfigurationError(i,a);e[i]=u}}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(4),s=n(0)("JsSIP:WebSocketInterface"),i=n(0)("JsSIP:ERROR:WebSocketInterface");i.log=console.warn.bind(console),e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s('new() [url:"%s"]',t),this._url=t,this._sip_uri=null,this._via_transport=null,this._ws=null;var n=o.parse(t,"absoluteURI");if(-1===n)throw i("invalid WebSocket URI: ".concat(t)),new TypeError("Invalid argument: ".concat(t));if("wss"!==n.scheme&&"ws"!==n.scheme)throw i("invalid WebSocket URI scheme: ".concat(n.scheme)),new TypeError("Invalid argument: ".concat(t));this._sip_uri="sip:".concat(n.host).concat(n.port?":".concat(n.port):"",";transport=ws"),this._via_transport=n.scheme.toUpperCase()}var t,n,a;return t=e,(n=[{key:"via_transport",get:function(){return this._via_transport},set:function(e){this._via_transport=e.toUpperCase()}},{key:"sip_uri",get:function(){return this._sip_uri}},{key:"url",get:function(){return this._url}},{key:"connect",value:function(){if(s("connect()"),this.isConnected())s("WebSocket ".concat(this._url," is already connected"));else if(this.isConnecting())s("WebSocket ".concat(this._url," is connecting"));else{this._ws&&this.disconnect(),s("connecting to WebSocket ".concat(this._url));try{this._ws=new WebSocket(this._url,"sip"),this._ws.binaryType="arraybuffer",this._ws.onopen=this._onOpen.bind(this),this._ws.onclose=this._onClose.bind(this),this._ws.onmessage=this._onMessage.bind(this),this._ws.onerror=this._onError.bind(this)}catch(e){this._onError(e)}}}},{key:"disconnect",value:function(){s("disconnect()"),this._ws&&(this._ws.onopen=function(){},this._ws.onclose=function(){},this._ws.onmessage=function(){},this._ws.onerror=function(){},this._ws.close(),this._ws=null)}},{key:"send",value:function(e){return s("send()"),this.isConnected()?(this._ws.send(e),!0):(i("unable to send message, WebSocket is not open"),!1)}},{key:"isConnected",value:function(){return this._ws&&this._ws.readyState===this._ws.OPEN}},{key:"isConnecting",value:function(){return this._ws&&this._ws.readyState===this._ws.CONNECTING}},{key:"_onOpen",value:function(){s("WebSocket ".concat(this._url," connected")),this.onconnect()}},{key:"_onClose",value:function(e){var t=e.wasClean,n=e.code,r=e.reason;s("WebSocket ".concat(this._url," closed")),!1===t&&s("WebSocket abrupt disconnection");var o={socket:this,error:!t,code:n,reason:r};this.ondisconnect(o)}},{key:"_onMessage",value:function(e){var t=e.data;s("received WebSocket message"),this.ondata(t)}},{key:"_onError",value:function(e){i("WebSocket ".concat(this._url," error: ").concat(e))}}])&&r(t.prototype,n),a&&r(t,a),e}()},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(5),s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ws=t,this.eventemitter=new o,this.connect();var n=this;this.ws.onopen=function(){n.eventemitter.emit("open")},this.ws.onmessage=function(e){var t=JSON.parse(e.data),r=t.type;n.eventemitter.emit("message",t),n.eventemitter.emit(r,t)}}var t,n,s;return t=e,(n=[{key:"connect",value:function(){var e=this;this.ws.onclose=function(){e.eventemitter.emit("close"),setTimeout(function(){e.connect()},1e3)},this.ws.onerror=function(t){e.eventemitter.emit("error",t),e.ws.close()}}},{key:"on",value:function(e,t){this.eventemitter.on(e,t)}},{key:"close",value:function(){this.ws.close()}}])&&r(t.prototype,n),s&&r(t,s),e}();e.exports=s},function(e,t,n){(function(t){var n=null;"undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof MozWebSocket?n=MozWebSocket:void 0!==t?n=t.WebSocket||t.MozWebSocket:"undefined"!=typeof window?n=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),e.exports=n}).call(this,n(16))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,